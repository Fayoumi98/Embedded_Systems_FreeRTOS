
Embedded_RTOS_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000078  00800060  00002df4  00002e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000048f  008000d8  008000d8  00002f00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000568  00000000  00000000  00002f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000672d  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000144f  00000000  00000000  00009c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003b30  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010ec  00000000  00000000  0000eb80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c07  00000000  00000000  0000fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000062fa  00000000  00000000  00011873  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000540  00000000  00000000  00017b6d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_1>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 9e 06 	jmp	0xd3c	; 0xd3c <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	43 14       	cp	r4, r3
      56:	43 14       	cp	r4, r3
      58:	72 14       	cp	r7, r2
      5a:	77 14       	cp	r7, r7
      5c:	8d 14       	cp	r8, r13
      5e:	43 14       	cp	r4, r3
      60:	43 14       	cp	r4, r3
      62:	72 14       	cp	r7, r2
      64:	77 14       	cp	r7, r7

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e4 ef       	ldi	r30, 0xF4	; 244
      7a:	fd e2       	ldi	r31, 0x2D	; 45
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a8 3d       	cpi	r26, 0xD8	; 216
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	25 e0       	ldi	r18, 0x05	; 5
      8a:	a8 ed       	ldi	r26, 0xD8	; 216
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a7 36       	cpi	r26, 0x67	; 103
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 71 04 	call	0x8e2	; 0x8e2 <main>
      9c:	0c 94 f8 16 	jmp	0x2df0	; 0x2df0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <ADC_init>:


void ADC_init(void)
{
	// AVCC with external capacitor at AREF pin
	ADMUX |= 1 << REFS0;
      a4:	87 b1       	in	r24, 0x07	; 7
      a6:	80 64       	ori	r24, 0x40	; 64
      a8:	87 b9       	out	0x07, r24	; 7
	// ADEN: ADC Enable  ADEN = 1
	// ADPS2:0: ADC Pre-scaler Select Bits (128)		ADPS0 =	1		ADPS1 =	1		ADPS2 = 1
	
	ADCSRA |= (1 << ADEN) | (1 << ADPS0) | (1 << ADPS1) | (1 << ADPS2);
      aa:	86 b1       	in	r24, 0x06	; 6
      ac:	87 68       	ori	r24, 0x87	; 135
      ae:	86 b9       	out	0x06, r24	; 6
      b0:	08 95       	ret

000000b2 <ADC_read>:

uint16_t ADC_read(uint8_t channel)
{
	// channel select 
	// MUX4:0: Analog Channel and Gain Selection Bits
	ADMUX |= channel | (1 << REFS0);
      b2:	97 b1       	in	r25, 0x07	; 7
      b4:	89 2b       	or	r24, r25
      b6:	80 64       	ori	r24, 0x40	; 64
      b8:	87 b9       	out	0x07, r24	; 7
	
	// Start conversion (ADSC: ADC Start Conversion)
	SETBIT(ADCSRA,ADSC);
      ba:	86 b1       	in	r24, 0x06	; 6
      bc:	80 64       	ori	r24, 0x40	; 64
      be:	86 b9       	out	0x06, r24	; 6
	
	// wait until ADC Start Conversion  is turned into 0
	while(READBIT(ADCSRA,ADSC) == 1){}
      c0:	36 99       	sbic	0x06, 6	; 6
      c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_read+0xe>
	/*
	or :  wait until ADIF ADC Interrupt Flag  is turned into 1
	while(READBIT(ADCSRA,ADIF) == 0){}
	*/
	return ADC;
      c4:	84 b1       	in	r24, 0x04	; 4
      c6:	95 b1       	in	r25, 0x05	; 5
      c8:	08 95       	ret

000000ca <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
      d0:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
      d4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__data_end>
      d8:	90 91 d9 00 	lds	r25, 0x00D9	; 0x8000d9 <__data_end+0x1>
      dc:	89 2b       	or	r24, r25
      de:	31 f4       	brne	.+12     	; 0xec <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
      e0:	8c ed       	ldi	r24, 0xDC	; 220
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	90 93 d9 00 	sts	0x00D9, r25	; 0x8000d9 <__data_end+0x1>
      e8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      ec:	20 97       	sbiw	r28, 0x00	; 0
      ee:	c9 f0       	breq	.+50     	; 0x122 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
      f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <xNextFreeByte>
      f4:	90 91 db 00 	lds	r25, 0x00DB	; 0x8000db <xNextFreeByte+0x1>
      f8:	9e 01       	movw	r18, r28
      fa:	28 0f       	add	r18, r24
      fc:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
      fe:	2f 3f       	cpi	r18, 0xFF	; 255
     100:	43 e0       	ldi	r20, 0x03	; 3
     102:	34 07       	cpc	r19, r20
     104:	88 f4       	brcc	.+34     	; 0x128 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     106:	82 17       	cp	r24, r18
     108:	93 07       	cpc	r25, r19
     10a:	88 f4       	brcc	.+34     	; 0x12e <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     10c:	c0 91 d8 00 	lds	r28, 0x00D8	; 0x8000d8 <__data_end>
     110:	d0 91 d9 00 	lds	r29, 0x00D9	; 0x8000d9 <__data_end+0x1>
     114:	c8 0f       	add	r28, r24
     116:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     118:	30 93 db 00 	sts	0x00DB, r19	; 0x8000db <xNextFreeByte+0x1>
     11c:	20 93 da 00 	sts	0x00DA, r18	; 0x8000da <xNextFreeByte>
     120:	08 c0       	rjmp	.+16     	; 0x132 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     122:	c0 e0       	ldi	r28, 0x00	; 0
     124:	d0 e0       	ldi	r29, 0x00	; 0
     126:	05 c0       	rjmp	.+10     	; 0x132 <pvPortMalloc+0x68>
     128:	c0 e0       	ldi	r28, 0x00	; 0
     12a:	d0 e0       	ldi	r29, 0x00	; 0
     12c:	02 c0       	rjmp	.+4      	; 0x132 <pvPortMalloc+0x68>
     12e:	c0 e0       	ldi	r28, 0x00	; 0
     130:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     132:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     136:	ce 01       	movw	r24, r28
     138:	df 91       	pop	r29
     13a:	cf 91       	pop	r28
     13c:	08 95       	ret

0000013e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     13e:	08 95       	ret

00000140 <keypad_init>:
};


void keypad_init(void)
{
	INIT_KEYPAD();
     140:	8f e0       	ldi	r24, 0x0F	; 15
     142:	84 bb       	out	0x14, r24	; 20
     144:	8f ef       	ldi	r24, 0xFF	; 255
     146:	85 bb       	out	0x15, r24	; 21
     148:	08 95       	ret

0000014a <keypad_read>:


int8_t keypad_read(void)
{
	uint8_t i ;
	for(i = 0 ; i < 4 ; i++ )
     14a:	e0 e0       	ldi	r30, 0x00	; 0
     14c:	6e c0       	rjmp	.+220    	; 0x22a <keypad_read+0xe0>
	{
		switch(i)
     14e:	e1 30       	cpi	r30, 0x01	; 1
     150:	99 f0       	breq	.+38     	; 0x178 <keypad_read+0x2e>
     152:	28 f0       	brcs	.+10     	; 0x15e <keypad_read+0x14>
     154:	e2 30       	cpi	r30, 0x02	; 2
     156:	e9 f0       	breq	.+58     	; 0x192 <keypad_read+0x48>
     158:	e3 30       	cpi	r30, 0x03	; 3
     15a:	41 f1       	breq	.+80     	; 0x1ac <keypad_read+0x62>
     15c:	33 c0       	rjmp	.+102    	; 0x1c4 <keypad_read+0x7a>
		{
			case 0 : KP0(0); KP1(1); KP2(1); KP3(1); break;
     15e:	85 b3       	in	r24, 0x15	; 21
     160:	8e 7f       	andi	r24, 0xFE	; 254
     162:	85 bb       	out	0x15, r24	; 21
     164:	85 b3       	in	r24, 0x15	; 21
     166:	82 60       	ori	r24, 0x02	; 2
     168:	85 bb       	out	0x15, r24	; 21
     16a:	85 b3       	in	r24, 0x15	; 21
     16c:	84 60       	ori	r24, 0x04	; 4
     16e:	85 bb       	out	0x15, r24	; 21
     170:	85 b3       	in	r24, 0x15	; 21
     172:	88 60       	ori	r24, 0x08	; 8
     174:	85 bb       	out	0x15, r24	; 21
     176:	26 c0       	rjmp	.+76     	; 0x1c4 <keypad_read+0x7a>
			case 1 : KP0(1); KP1(0); KP2(1); KP3(1); break;
     178:	85 b3       	in	r24, 0x15	; 21
     17a:	81 60       	ori	r24, 0x01	; 1
     17c:	85 bb       	out	0x15, r24	; 21
     17e:	85 b3       	in	r24, 0x15	; 21
     180:	8d 7f       	andi	r24, 0xFD	; 253
     182:	85 bb       	out	0x15, r24	; 21
     184:	85 b3       	in	r24, 0x15	; 21
     186:	84 60       	ori	r24, 0x04	; 4
     188:	85 bb       	out	0x15, r24	; 21
     18a:	85 b3       	in	r24, 0x15	; 21
     18c:	88 60       	ori	r24, 0x08	; 8
     18e:	85 bb       	out	0x15, r24	; 21
     190:	19 c0       	rjmp	.+50     	; 0x1c4 <keypad_read+0x7a>
			case 2 : KP0(1); KP1(1); KP2(0); KP3(1); break;
     192:	85 b3       	in	r24, 0x15	; 21
     194:	81 60       	ori	r24, 0x01	; 1
     196:	85 bb       	out	0x15, r24	; 21
     198:	85 b3       	in	r24, 0x15	; 21
     19a:	82 60       	ori	r24, 0x02	; 2
     19c:	85 bb       	out	0x15, r24	; 21
     19e:	85 b3       	in	r24, 0x15	; 21
     1a0:	8b 7f       	andi	r24, 0xFB	; 251
     1a2:	85 bb       	out	0x15, r24	; 21
     1a4:	85 b3       	in	r24, 0x15	; 21
     1a6:	88 60       	ori	r24, 0x08	; 8
     1a8:	85 bb       	out	0x15, r24	; 21
     1aa:	0c c0       	rjmp	.+24     	; 0x1c4 <keypad_read+0x7a>
			case 3 : KP0(1); KP1(1); KP2(1); KP3(0); break;
     1ac:	85 b3       	in	r24, 0x15	; 21
     1ae:	81 60       	ori	r24, 0x01	; 1
     1b0:	85 bb       	out	0x15, r24	; 21
     1b2:	85 b3       	in	r24, 0x15	; 21
     1b4:	82 60       	ori	r24, 0x02	; 2
     1b6:	85 bb       	out	0x15, r24	; 21
     1b8:	85 b3       	in	r24, 0x15	; 21
     1ba:	84 60       	ori	r24, 0x04	; 4
     1bc:	85 bb       	out	0x15, r24	; 21
     1be:	85 b3       	in	r24, 0x15	; 21
     1c0:	87 7f       	andi	r24, 0xF7	; 247
     1c2:	85 bb       	out	0x15, r24	; 21
		}
		
		if(KP4() == 0) return keypad_matrix[0 + 4*i];
     1c4:	9c 99       	sbic	0x13, 4	; 19
     1c6:	09 c0       	rjmp	.+18     	; 0x1da <keypad_read+0x90>
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	ee 0f       	add	r30, r30
     1cc:	ff 1f       	adc	r31, r31
     1ce:	ee 0f       	add	r30, r30
     1d0:	ff 1f       	adc	r31, r31
     1d2:	ee 59       	subi	r30, 0x9E	; 158
     1d4:	ff 4f       	sbci	r31, 0xFF	; 255
     1d6:	80 81       	ld	r24, Z
     1d8:	08 95       	ret
		if(KP5() == 0) return keypad_matrix[1 + 4*i];
     1da:	9d 99       	sbic	0x13, 5	; 19
     1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <keypad_read+0xa6>
     1de:	f0 e0       	ldi	r31, 0x00	; 0
     1e0:	ee 0f       	add	r30, r30
     1e2:	ff 1f       	adc	r31, r31
     1e4:	ee 0f       	add	r30, r30
     1e6:	ff 1f       	adc	r31, r31
     1e8:	ed 59       	subi	r30, 0x9D	; 157
     1ea:	ff 4f       	sbci	r31, 0xFF	; 255
     1ec:	80 81       	ld	r24, Z
     1ee:	08 95       	ret
		if(KP6() == 0) return keypad_matrix[2 + 4*i];
     1f0:	9e 99       	sbic	0x13, 6	; 19
     1f2:	09 c0       	rjmp	.+18     	; 0x206 <keypad_read+0xbc>
     1f4:	f0 e0       	ldi	r31, 0x00	; 0
     1f6:	ee 0f       	add	r30, r30
     1f8:	ff 1f       	adc	r31, r31
     1fa:	ee 0f       	add	r30, r30
     1fc:	ff 1f       	adc	r31, r31
     1fe:	ec 59       	subi	r30, 0x9C	; 156
     200:	ff 4f       	sbci	r31, 0xFF	; 255
     202:	80 81       	ld	r24, Z
     204:	08 95       	ret
		if(KP7() == 0) return keypad_matrix[3 + 4*i];
     206:	9f 99       	sbic	0x13, 7	; 19
     208:	09 c0       	rjmp	.+18     	; 0x21c <keypad_read+0xd2>
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	ee 0f       	add	r30, r30
     20e:	ff 1f       	adc	r31, r31
     210:	ee 0f       	add	r30, r30
     212:	ff 1f       	adc	r31, r31
     214:	eb 59       	subi	r30, 0x9B	; 155
     216:	ff 4f       	sbci	r31, 0xFF	; 255
     218:	80 81       	ld	r24, Z
     21a:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21c:	8f e9       	ldi	r24, 0x9F	; 159
     21e:	9f e0       	ldi	r25, 0x0F	; 15
     220:	01 97       	sbiw	r24, 0x01	; 1
     222:	f1 f7       	brne	.-4      	; 0x220 <keypad_read+0xd6>
     224:	00 c0       	rjmp	.+0      	; 0x226 <keypad_read+0xdc>
     226:	00 00       	nop


int8_t keypad_read(void)
{
	uint8_t i ;
	for(i = 0 ; i < 4 ; i++ )
     228:	ef 5f       	subi	r30, 0xFF	; 255
     22a:	e4 30       	cpi	r30, 0x04	; 4
     22c:	08 f4       	brcc	.+2      	; 0x230 <keypad_read+0xe6>
     22e:	8f cf       	rjmp	.-226    	; 0x14e <keypad_read+0x4>
		
		_delay_ms(1);
	}
	
	// if not pressed return -1 
	return -1;	
     230:	8f ef       	ldi	r24, 0xFF	; 255
}
     232:	08 95       	ret

00000234 <LCD_write_command>:
}

void LCD_write_command(uint8_t cmd)
{
	// Sending Command
	RS(0);
     234:	9b b3       	in	r25, 0x1b	; 27
     236:	97 7f       	andi	r25, 0xF7	; 247
     238:	9b bb       	out	0x1b, r25	; 27
	
	// Send Most Significant Nibble of command
	D7(READBIT(cmd,7));
     23a:	88 23       	and	r24, r24
     23c:	24 f0       	brlt	.+8      	; 0x246 <LCD_write_command+0x12>
     23e:	9b b3       	in	r25, 0x1b	; 27
     240:	9f 77       	andi	r25, 0x7F	; 127
     242:	9b bb       	out	0x1b, r25	; 27
     244:	03 c0       	rjmp	.+6      	; 0x24c <LCD_write_command+0x18>
     246:	9b b3       	in	r25, 0x1b	; 27
     248:	90 68       	ori	r25, 0x80	; 128
     24a:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(cmd,6));
     24c:	86 fd       	sbrc	r24, 6
     24e:	04 c0       	rjmp	.+8      	; 0x258 <LCD_write_command+0x24>
     250:	9b b3       	in	r25, 0x1b	; 27
     252:	9f 7b       	andi	r25, 0xBF	; 191
     254:	9b bb       	out	0x1b, r25	; 27
     256:	03 c0       	rjmp	.+6      	; 0x25e <LCD_write_command+0x2a>
     258:	9b b3       	in	r25, 0x1b	; 27
     25a:	90 64       	ori	r25, 0x40	; 64
     25c:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(cmd,5));
     25e:	85 fd       	sbrc	r24, 5
     260:	04 c0       	rjmp	.+8      	; 0x26a <LCD_write_command+0x36>
     262:	9b b3       	in	r25, 0x1b	; 27
     264:	9f 7d       	andi	r25, 0xDF	; 223
     266:	9b bb       	out	0x1b, r25	; 27
     268:	03 c0       	rjmp	.+6      	; 0x270 <LCD_write_command+0x3c>
     26a:	9b b3       	in	r25, 0x1b	; 27
     26c:	90 62       	ori	r25, 0x20	; 32
     26e:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(cmd,4));
     270:	84 fd       	sbrc	r24, 4
     272:	04 c0       	rjmp	.+8      	; 0x27c <LCD_write_command+0x48>
     274:	9b b3       	in	r25, 0x1b	; 27
     276:	9f 7e       	andi	r25, 0xEF	; 239
     278:	9b bb       	out	0x1b, r25	; 27
     27a:	03 c0       	rjmp	.+6      	; 0x282 <LCD_write_command+0x4e>
     27c:	9b b3       	in	r25, 0x1b	; 27
     27e:	90 61       	ori	r25, 0x10	; 16
     280:	9b bb       	out	0x1b, r25	; 27
	
	TRIGGER_LCD();
     282:	9b b3       	in	r25, 0x1b	; 27
     284:	94 60       	ori	r25, 0x04	; 4
     286:	9b bb       	out	0x1b, r25	; 27
     288:	ef e9       	ldi	r30, 0x9F	; 159
     28a:	ff e0       	ldi	r31, 0x0F	; 15
     28c:	31 97       	sbiw	r30, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_write_command+0x58>
     290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_write_command+0x5e>
     292:	00 00       	nop
     294:	9b b3       	in	r25, 0x1b	; 27
     296:	9b 7f       	andi	r25, 0xFB	; 251
     298:	9b bb       	out	0x1b, r25	; 27
     29a:	ef e9       	ldi	r30, 0x9F	; 159
     29c:	ff e0       	ldi	r31, 0x0F	; 15
     29e:	31 97       	sbiw	r30, 0x01	; 1
     2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_write_command+0x6a>
     2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_write_command+0x70>
     2a4:	00 00       	nop
	
	// Send Least Significant Nibble of command
	D7(READBIT(cmd,3));
     2a6:	83 fd       	sbrc	r24, 3
     2a8:	04 c0       	rjmp	.+8      	; 0x2b2 <LCD_write_command+0x7e>
     2aa:	9b b3       	in	r25, 0x1b	; 27
     2ac:	9f 77       	andi	r25, 0x7F	; 127
     2ae:	9b bb       	out	0x1b, r25	; 27
     2b0:	03 c0       	rjmp	.+6      	; 0x2b8 <LCD_write_command+0x84>
     2b2:	9b b3       	in	r25, 0x1b	; 27
     2b4:	90 68       	ori	r25, 0x80	; 128
     2b6:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(cmd,2));
     2b8:	82 fd       	sbrc	r24, 2
     2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <LCD_write_command+0x90>
     2bc:	9b b3       	in	r25, 0x1b	; 27
     2be:	9f 7b       	andi	r25, 0xBF	; 191
     2c0:	9b bb       	out	0x1b, r25	; 27
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <LCD_write_command+0x96>
     2c4:	9b b3       	in	r25, 0x1b	; 27
     2c6:	90 64       	ori	r25, 0x40	; 64
     2c8:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(cmd,1));
     2ca:	81 fd       	sbrc	r24, 1
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <LCD_write_command+0xa2>
     2ce:	9b b3       	in	r25, 0x1b	; 27
     2d0:	9f 7d       	andi	r25, 0xDF	; 223
     2d2:	9b bb       	out	0x1b, r25	; 27
     2d4:	03 c0       	rjmp	.+6      	; 0x2dc <LCD_write_command+0xa8>
     2d6:	9b b3       	in	r25, 0x1b	; 27
     2d8:	90 62       	ori	r25, 0x20	; 32
     2da:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(cmd,0));
     2dc:	80 fd       	sbrc	r24, 0
     2de:	04 c0       	rjmp	.+8      	; 0x2e8 <LCD_write_command+0xb4>
     2e0:	8b b3       	in	r24, 0x1b	; 27
     2e2:	8f 7e       	andi	r24, 0xEF	; 239
     2e4:	8b bb       	out	0x1b, r24	; 27
     2e6:	03 c0       	rjmp	.+6      	; 0x2ee <LCD_write_command+0xba>
     2e8:	8b b3       	in	r24, 0x1b	; 27
     2ea:	80 61       	ori	r24, 0x10	; 16
     2ec:	8b bb       	out	0x1b, r24	; 27
		
	TRIGGER_LCD();
     2ee:	8b b3       	in	r24, 0x1b	; 27
     2f0:	84 60       	ori	r24, 0x04	; 4
     2f2:	8b bb       	out	0x1b, r24	; 27
     2f4:	8f e9       	ldi	r24, 0x9F	; 159
     2f6:	9f e0       	ldi	r25, 0x0F	; 15
     2f8:	01 97       	sbiw	r24, 0x01	; 1
     2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_write_command+0xc4>
     2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_write_command+0xca>
     2fe:	00 00       	nop
     300:	8b b3       	in	r24, 0x1b	; 27
     302:	8b 7f       	andi	r24, 0xFB	; 251
     304:	8b bb       	out	0x1b, r24	; 27
     306:	ef e9       	ldi	r30, 0x9F	; 159
     308:	ff e0       	ldi	r31, 0x0F	; 15
     30a:	31 97       	sbiw	r30, 0x01	; 1
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_write_command+0xd6>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_write_command+0xdc>
     310:	00 00       	nop
     312:	08 95       	ret

00000314 <LCD_init>:
#include "include/LCD.h"

void LCD_init(void)
{
	// Step 1 : initialize all pins as output (D7,D6,D5,D4,RS,EN)
	INIT_LCD_PINS();
     314:	8a b3       	in	r24, 0x1a	; 26
     316:	8c 6f       	ori	r24, 0xFC	; 252
     318:	8a bb       	out	0x1a, r24	; 26
     31a:	8b b3       	in	r24, 0x1b	; 27
     31c:	83 70       	andi	r24, 0x03	; 3
     31e:	8b bb       	out	0x1b, r24	; 27
	// Send command 0x3 and wait for 4 mSec (repeat this process 3  times)
	LCD_write_command(0x3);
     320:	83 e0       	ldi	r24, 0x03	; 3
     322:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
     326:	8f e7       	ldi	r24, 0x7F	; 127
     328:	9e e3       	ldi	r25, 0x3E	; 62
     32a:	01 97       	sbiw	r24, 0x01	; 1
     32c:	f1 f7       	brne	.-4      	; 0x32a <LCD_init+0x16>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <LCD_init+0x1c>
     330:	00 00       	nop
	DELAY_MS(4);
	LCD_write_command(0x3);
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
     338:	8f e7       	ldi	r24, 0x7F	; 127
     33a:	9e e3       	ldi	r25, 0x3E	; 62
     33c:	01 97       	sbiw	r24, 0x01	; 1
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_init+0x28>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_init+0x2e>
     342:	00 00       	nop
	DELAY_MS(4);
	LCD_write_command(0x3);
     344:	83 e0       	ldi	r24, 0x03	; 3
     346:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
     34a:	8f e7       	ldi	r24, 0x7F	; 127
     34c:	9e e3       	ldi	r25, 0x3E	; 62
     34e:	01 97       	sbiw	r24, 0x01	; 1
     350:	f1 f7       	brne	.-4      	; 0x34e <LCD_init+0x3a>
     352:	00 c0       	rjmp	.+0      	; 0x354 <LCD_init+0x40>
     354:	00 00       	nop
	DELAY_MS(4);
	// Send command 0x2 to enable 4 bit mode
	LCD_write_command(0x2);
     356:	82 e0       	ldi	r24, 0x02	; 2
     358:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	// Send command 0x28 to enable both lines to write on
	LCD_write_command(0x28);
     35c:	88 e2       	ldi	r24, 0x28	; 40
     35e:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	// Send command 0x08 to disable cursor display (Optional)
	LCD_write_command(0x08);
     362:	88 e0       	ldi	r24, 0x08	; 8
     364:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	// Send command 0x01 to clear LCD
	LCD_write_command(0x01);
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	// Send command 0x06 to to make cursor increment to right
	LCD_write_command(0x06);
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	LCD_write_command(0x01);
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
	// Send command 0x0C to turn on display
	LCD_write_command(0x0C);
     37a:	8c e0       	ldi	r24, 0x0C	; 12
     37c:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
     380:	9f ef       	ldi	r25, 0xFF	; 255
     382:	29 ef       	ldi	r18, 0xF9	; 249
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	91 50       	subi	r25, 0x01	; 1
     388:	20 40       	sbci	r18, 0x00	; 0
     38a:	80 40       	sbci	r24, 0x00	; 0
     38c:	e1 f7       	brne	.-8      	; 0x386 <LCD_init+0x72>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCD_init+0x7c>
     390:	00 00       	nop
     392:	08 95       	ret

00000394 <LCD_write_char>:
}

void LCD_write_char(uint8_t data)
{
	// Sending Data Mode
	RS(1);
     394:	9b b3       	in	r25, 0x1b	; 27
     396:	98 60       	ori	r25, 0x08	; 8
     398:	9b bb       	out	0x1b, r25	; 27

	// Send Most Significant Nibble of Data
	D7(READBIT(data,7));
     39a:	88 23       	and	r24, r24
     39c:	24 f0       	brlt	.+8      	; 0x3a6 <LCD_write_char+0x12>
     39e:	9b b3       	in	r25, 0x1b	; 27
     3a0:	9f 77       	andi	r25, 0x7F	; 127
     3a2:	9b bb       	out	0x1b, r25	; 27
     3a4:	03 c0       	rjmp	.+6      	; 0x3ac <LCD_write_char+0x18>
     3a6:	9b b3       	in	r25, 0x1b	; 27
     3a8:	90 68       	ori	r25, 0x80	; 128
     3aa:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,6));
     3ac:	86 fd       	sbrc	r24, 6
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <LCD_write_char+0x24>
     3b0:	9b b3       	in	r25, 0x1b	; 27
     3b2:	9f 7b       	andi	r25, 0xBF	; 191
     3b4:	9b bb       	out	0x1b, r25	; 27
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <LCD_write_char+0x2a>
     3b8:	9b b3       	in	r25, 0x1b	; 27
     3ba:	90 64       	ori	r25, 0x40	; 64
     3bc:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,5));
     3be:	85 fd       	sbrc	r24, 5
     3c0:	04 c0       	rjmp	.+8      	; 0x3ca <LCD_write_char+0x36>
     3c2:	9b b3       	in	r25, 0x1b	; 27
     3c4:	9f 7d       	andi	r25, 0xDF	; 223
     3c6:	9b bb       	out	0x1b, r25	; 27
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <LCD_write_char+0x3c>
     3ca:	9b b3       	in	r25, 0x1b	; 27
     3cc:	90 62       	ori	r25, 0x20	; 32
     3ce:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,4));
     3d0:	84 fd       	sbrc	r24, 4
     3d2:	04 c0       	rjmp	.+8      	; 0x3dc <LCD_write_char+0x48>
     3d4:	9b b3       	in	r25, 0x1b	; 27
     3d6:	9f 7e       	andi	r25, 0xEF	; 239
     3d8:	9b bb       	out	0x1b, r25	; 27
     3da:	03 c0       	rjmp	.+6      	; 0x3e2 <LCD_write_char+0x4e>
     3dc:	9b b3       	in	r25, 0x1b	; 27
     3de:	90 61       	ori	r25, 0x10	; 16
     3e0:	9b bb       	out	0x1b, r25	; 27
		
	TRIGGER_LCD();
     3e2:	9b b3       	in	r25, 0x1b	; 27
     3e4:	94 60       	ori	r25, 0x04	; 4
     3e6:	9b bb       	out	0x1b, r25	; 27
     3e8:	ef e9       	ldi	r30, 0x9F	; 159
     3ea:	ff e0       	ldi	r31, 0x0F	; 15
     3ec:	31 97       	sbiw	r30, 0x01	; 1
     3ee:	f1 f7       	brne	.-4      	; 0x3ec <LCD_write_char+0x58>
     3f0:	00 c0       	rjmp	.+0      	; 0x3f2 <LCD_write_char+0x5e>
     3f2:	00 00       	nop
     3f4:	9b b3       	in	r25, 0x1b	; 27
     3f6:	9b 7f       	andi	r25, 0xFB	; 251
     3f8:	9b bb       	out	0x1b, r25	; 27
     3fa:	ef e9       	ldi	r30, 0x9F	; 159
     3fc:	ff e0       	ldi	r31, 0x0F	; 15
     3fe:	31 97       	sbiw	r30, 0x01	; 1
     400:	f1 f7       	brne	.-4      	; 0x3fe <LCD_write_char+0x6a>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop

	// Send Least Significant Nibble of Data
	D7(READBIT(data,3));
     406:	83 fd       	sbrc	r24, 3
     408:	04 c0       	rjmp	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
     40a:	9b b3       	in	r25, 0x1b	; 27
     40c:	9f 77       	andi	r25, 0x7F	; 127
     40e:	9b bb       	out	0x1b, r25	; 27
     410:	03 c0       	rjmp	.+6      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     412:	9b b3       	in	r25, 0x1b	; 27
     414:	90 68       	ori	r25, 0x80	; 128
     416:	9b bb       	out	0x1b, r25	; 27
	D6(READBIT(data,2));
     418:	82 fd       	sbrc	r24, 2
     41a:	04 c0       	rjmp	.+8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     41c:	9b b3       	in	r25, 0x1b	; 27
     41e:	9f 7b       	andi	r25, 0xBF	; 191
     420:	9b bb       	out	0x1b, r25	; 27
     422:	03 c0       	rjmp	.+6      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
     424:	9b b3       	in	r25, 0x1b	; 27
     426:	90 64       	ori	r25, 0x40	; 64
     428:	9b bb       	out	0x1b, r25	; 27
	D5(READBIT(data,1));
     42a:	81 fd       	sbrc	r24, 1
     42c:	04 c0       	rjmp	.+8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     42e:	9b b3       	in	r25, 0x1b	; 27
     430:	9f 7d       	andi	r25, 0xDF	; 223
     432:	9b bb       	out	0x1b, r25	; 27
     434:	03 c0       	rjmp	.+6      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     436:	9b b3       	in	r25, 0x1b	; 27
     438:	90 62       	ori	r25, 0x20	; 32
     43a:	9b bb       	out	0x1b, r25	; 27
	D4(READBIT(data,0));
     43c:	80 fd       	sbrc	r24, 0
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     440:	8b b3       	in	r24, 0x1b	; 27
     442:	8f 7e       	andi	r24, 0xEF	; 239
     444:	8b bb       	out	0x1b, r24	; 27
     446:	03 c0       	rjmp	.+6      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
     448:	8b b3       	in	r24, 0x1b	; 27
     44a:	80 61       	ori	r24, 0x10	; 16
     44c:	8b bb       	out	0x1b, r24	; 27
		
	TRIGGER_LCD();
     44e:	8b b3       	in	r24, 0x1b	; 27
     450:	84 60       	ori	r24, 0x04	; 4
     452:	8b bb       	out	0x1b, r24	; 27
     454:	8f e9       	ldi	r24, 0x9F	; 159
     456:	9f e0       	ldi	r25, 0x0F	; 15
     458:	01 97       	sbiw	r24, 0x01	; 1
     45a:	f1 f7       	brne	.-4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     45c:	00 c0       	rjmp	.+0      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
     45e:	00 00       	nop
     460:	8b b3       	in	r24, 0x1b	; 27
     462:	8b 7f       	andi	r24, 0xFB	; 251
     464:	8b bb       	out	0x1b, r24	; 27
     466:	ef e9       	ldi	r30, 0x9F	; 159
     468:	ff e0       	ldi	r31, 0x0F	; 15
     46a:	31 97       	sbiw	r30, 0x01	; 1
     46c:	f1 f7       	brne	.-4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     46e:	00 c0       	rjmp	.+0      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
     470:	00 00       	nop
     472:	08 95       	ret

00000474 <LCD_write_string>:
}

void LCD_write_string(uint8_t* txt)
{
     474:	0f 93       	push	r16
     476:	1f 93       	push	r17
     478:	cf 93       	push	r28
     47a:	8c 01       	movw	r16, r24
	uint8_t i = 0;
     47c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(txt[i] != '\0')
     47e:	03 c0       	rjmp	.+6      	; 0x486 <LCD_write_string+0x12>
	{
		LCD_write_char(txt[i]);
     480:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_char>
		i++;
     484:	cf 5f       	subi	r28, 0xFF	; 255

void LCD_write_string(uint8_t* txt)
{
	uint8_t i = 0;
	
	while(txt[i] != '\0')
     486:	f8 01       	movw	r30, r16
     488:	ec 0f       	add	r30, r28
     48a:	f1 1d       	adc	r31, r1
     48c:	80 81       	ld	r24, Z
     48e:	81 11       	cpse	r24, r1
     490:	f7 cf       	rjmp	.-18     	; 0x480 <LCD_write_string+0xc>
	{
		LCD_write_char(txt[i]);
		i++;
	}
}
     492:	cf 91       	pop	r28
     494:	1f 91       	pop	r17
     496:	0f 91       	pop	r16
     498:	08 95       	ret

0000049a <LCD_write_num>:

void LCD_write_num(uint32_t num)
{
     49a:	cf 92       	push	r12
     49c:	df 92       	push	r13
     49e:	ef 92       	push	r14
     4a0:	ff 92       	push	r15
     4a2:	1f 93       	push	r17
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	cd b7       	in	r28, 0x3d	; 61
     4aa:	de b7       	in	r29, 0x3e	; 62
     4ac:	2a 97       	sbiw	r28, 0x0a	; 10
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	6b 01       	movw	r12, r22
     4ba:	7c 01       	movw	r14, r24
    0
*/
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
     4bc:	67 2b       	or	r22, r23
     4be:	68 2b       	or	r22, r24
     4c0:	69 2b       	or	r22, r25
     4c2:	19 f4       	brne	.+6      	; 0x4ca <LCD_write_num+0x30>
     4c4:	80 e3       	ldi	r24, 0x30	; 48
     4c6:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_char>
		i++;
	}
}

void LCD_write_num(uint32_t num)
{
     4ca:	10 e0       	ldi	r17, 0x00	; 0
     4cc:	17 c0       	rjmp	.+46     	; 0x4fc <LCD_write_num+0x62>
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
	{
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
     4ce:	c7 01       	movw	r24, r14
     4d0:	b6 01       	movw	r22, r12
     4d2:	2a e0       	ldi	r18, 0x0A	; 10
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	50 e0       	ldi	r21, 0x00	; 0
     4da:	0e 94 c7 16 	call	0x2d8e	; 0x2d8e <__udivmodsi4>
     4de:	e1 e0       	ldi	r30, 0x01	; 1
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	ec 0f       	add	r30, r28
     4e4:	fd 1f       	adc	r31, r29
     4e6:	e1 0f       	add	r30, r17
     4e8:	f1 1d       	adc	r31, r1
     4ea:	17 fd       	sbrc	r17, 7
     4ec:	fa 95       	dec	r31
     4ee:	60 5d       	subi	r22, 0xD0	; 208
     4f0:	60 83       	st	Z, r22
		num /= 10;
     4f2:	c2 2e       	mov	r12, r18
     4f4:	d3 2e       	mov	r13, r19
     4f6:	e4 2e       	mov	r14, r20
     4f8:	f5 2e       	mov	r15, r21
	int8_t i = 0;
	uint8_t num_arr[10];
	
	if(num == 0) LCD_write_char('0');
	
	for(i = 0; num != 0 ;i++)
     4fa:	1f 5f       	subi	r17, 0xFF	; 255
     4fc:	c1 14       	cp	r12, r1
     4fe:	d1 04       	cpc	r13, r1
     500:	e1 04       	cpc	r14, r1
     502:	f1 04       	cpc	r15, r1
     504:	21 f7       	brne	.-56     	; 0x4ce <LCD_write_num+0x34>
		// + 48  to convert decimal number into ASCII
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
     506:	11 50       	subi	r17, 0x01	; 1
	while (i >= 0)
     508:	0c c0       	rjmp	.+24     	; 0x522 <LCD_write_num+0x88>
	{
		LCD_write_char(num_arr[i]);
     50a:	e1 e0       	ldi	r30, 0x01	; 1
     50c:	f0 e0       	ldi	r31, 0x00	; 0
     50e:	ec 0f       	add	r30, r28
     510:	fd 1f       	adc	r31, r29
     512:	e1 0f       	add	r30, r17
     514:	f1 1d       	adc	r31, r1
     516:	17 fd       	sbrc	r17, 7
     518:	fa 95       	dec	r31
     51a:	80 81       	ld	r24, Z
     51c:	0e 94 ca 01 	call	0x394	; 0x394 <LCD_write_char>
		i--;
     520:	11 50       	subi	r17, 0x01	; 1
		num_arr[i] = num % 10 + 48;
		num /= 10;
	}
	
	i--;
	while (i >= 0)
     522:	11 23       	and	r17, r17
     524:	94 f7       	brge	.-28     	; 0x50a <LCD_write_num+0x70>
	{
		LCD_write_char(num_arr[i]);
		i--;
	}
     526:	2a 96       	adiw	r28, 0x0a	; 10
     528:	0f b6       	in	r0, 0x3f	; 63
     52a:	f8 94       	cli
     52c:	de bf       	out	0x3e, r29	; 62
     52e:	0f be       	out	0x3f, r0	; 63
     530:	cd bf       	out	0x3d, r28	; 61
     532:	df 91       	pop	r29
     534:	cf 91       	pop	r28
     536:	1f 91       	pop	r17
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	08 95       	ret

00000542 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     542:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     544:	03 96       	adiw	r24, 0x03	; 3
     546:	92 83       	std	Z+2, r25	; 0x02
     548:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	3f ef       	ldi	r19, 0xFF	; 255
     54e:	34 83       	std	Z+4, r19	; 0x04
     550:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     552:	96 83       	std	Z+6, r25	; 0x06
     554:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     556:	90 87       	std	Z+8, r25	; 0x08
     558:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     55a:	10 82       	st	Z, r1
     55c:	08 95       	ret

0000055e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
     55e:	fc 01       	movw	r30, r24
     560:	11 86       	std	Z+9, r1	; 0x09
     562:	10 86       	std	Z+8, r1	; 0x08
     564:	08 95       	ret

00000566 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
     566:	cf 93       	push	r28
     568:	df 93       	push	r29
     56a:	9c 01       	movw	r18, r24
     56c:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
     56e:	dc 01       	movw	r26, r24
     570:	11 96       	adiw	r26, 0x01	; 1
     572:	cd 91       	ld	r28, X+
     574:	dc 91       	ld	r29, X
     576:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
     578:	d3 83       	std	Z+3, r29	; 0x03
     57a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     57c:	8c 81       	ldd	r24, Y+4	; 0x04
     57e:	9d 81       	ldd	r25, Y+5	; 0x05
     580:	95 83       	std	Z+5, r25	; 0x05
     582:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
     584:	8c 81       	ldd	r24, Y+4	; 0x04
     586:	9d 81       	ldd	r25, Y+5	; 0x05
     588:	dc 01       	movw	r26, r24
     58a:	13 96       	adiw	r26, 0x03	; 3
     58c:	7c 93       	st	X, r23
     58e:	6e 93       	st	-X, r22
     590:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
     592:	7d 83       	std	Y+5, r23	; 0x05
     594:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
     596:	31 87       	std	Z+9, r19	; 0x09
     598:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
     59a:	f9 01       	movw	r30, r18
     59c:	80 81       	ld	r24, Z
     59e:	8f 5f       	subi	r24, 0xFF	; 255
     5a0:	80 83       	st	Z, r24
}
     5a2:	df 91       	pop	r29
     5a4:	cf 91       	pop	r28
     5a6:	08 95       	ret

000005a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     5a8:	cf 93       	push	r28
     5aa:	df 93       	push	r29
     5ac:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     5ae:	48 81       	ld	r20, Y
     5b0:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     5b2:	4f 3f       	cpi	r20, 0xFF	; 255
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	52 07       	cpc	r21, r18
     5b8:	21 f4       	brne	.+8      	; 0x5c2 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     5ba:	fc 01       	movw	r30, r24
     5bc:	a7 81       	ldd	r26, Z+7	; 0x07
     5be:	b0 85       	ldd	r27, Z+8	; 0x08
     5c0:	0d c0       	rjmp	.+26     	; 0x5dc <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     5c2:	dc 01       	movw	r26, r24
     5c4:	13 96       	adiw	r26, 0x03	; 3
     5c6:	01 c0       	rjmp	.+2      	; 0x5ca <vListInsert+0x22>
     5c8:	df 01       	movw	r26, r30
     5ca:	12 96       	adiw	r26, 0x02	; 2
     5cc:	ed 91       	ld	r30, X+
     5ce:	fc 91       	ld	r31, X
     5d0:	13 97       	sbiw	r26, 0x03	; 3
     5d2:	20 81       	ld	r18, Z
     5d4:	31 81       	ldd	r19, Z+1	; 0x01
     5d6:	42 17       	cp	r20, r18
     5d8:	53 07       	cpc	r21, r19
     5da:	b0 f7       	brcc	.-20     	; 0x5c8 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     5dc:	12 96       	adiw	r26, 0x02	; 2
     5de:	ed 91       	ld	r30, X+
     5e0:	fc 91       	ld	r31, X
     5e2:	13 97       	sbiw	r26, 0x03	; 3
     5e4:	fb 83       	std	Y+3, r31	; 0x03
     5e6:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     5e8:	d5 83       	std	Z+5, r29	; 0x05
     5ea:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     5ec:	bd 83       	std	Y+5, r27	; 0x05
     5ee:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     5f0:	13 96       	adiw	r26, 0x03	; 3
     5f2:	dc 93       	st	X, r29
     5f4:	ce 93       	st	-X, r28
     5f6:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     5f8:	99 87       	std	Y+9, r25	; 0x09
     5fa:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     5fc:	fc 01       	movw	r30, r24
     5fe:	20 81       	ld	r18, Z
     600:	2f 5f       	subi	r18, 0xFF	; 255
     602:	20 83       	st	Z, r18
}
     604:	df 91       	pop	r29
     606:	cf 91       	pop	r28
     608:	08 95       	ret

0000060a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     610:	a0 85       	ldd	r26, Z+8	; 0x08
     612:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     614:	c2 81       	ldd	r28, Z+2	; 0x02
     616:	d3 81       	ldd	r29, Z+3	; 0x03
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	9d 83       	std	Y+5, r25	; 0x05
     61e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     620:	c4 81       	ldd	r28, Z+4	; 0x04
     622:	d5 81       	ldd	r29, Z+5	; 0x05
     624:	82 81       	ldd	r24, Z+2	; 0x02
     626:	93 81       	ldd	r25, Z+3	; 0x03
     628:	9b 83       	std	Y+3, r25	; 0x03
     62a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     62c:	11 96       	adiw	r26, 0x01	; 1
     62e:	8d 91       	ld	r24, X+
     630:	9c 91       	ld	r25, X
     632:	12 97       	sbiw	r26, 0x02	; 2
     634:	e8 17       	cp	r30, r24
     636:	f9 07       	cpc	r31, r25
     638:	31 f4       	brne	.+12     	; 0x646 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     63a:	84 81       	ldd	r24, Z+4	; 0x04
     63c:	95 81       	ldd	r25, Z+5	; 0x05
     63e:	12 96       	adiw	r26, 0x02	; 2
     640:	9c 93       	st	X, r25
     642:	8e 93       	st	-X, r24
     644:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     646:	11 86       	std	Z+9, r1	; 0x09
     648:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     64a:	8c 91       	ld	r24, X
     64c:	81 50       	subi	r24, 0x01	; 1
     64e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     650:	8c 91       	ld	r24, X
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <modeA>:
	uint16_t temperature;
	
	while(1)
	{
		// read ADC channel 0
		temperature = ADC_read(0);
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
     65e:	ec 01       	movw	r28, r24
		
		// if ADC0 > 100 buzzer duty = 20 led duty = 100
		if((temperature > 100) && (temperature <300))
     660:	85 56       	subi	r24, 0x65	; 101
     662:	91 09       	sbc	r25, r1
     664:	87 3c       	cpi	r24, 0xC7	; 199
     666:	91 05       	cpc	r25, r1
     668:	38 f4       	brcc	.+14     	; 0x678 <modeA+0x20>
		{
			PWM_OC1A_set_duty(100);
     66a:	84 e6       	ldi	r24, 0x64	; 100
     66c:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
			PWM_OC0_set_duty(20);
     670:	84 e1       	ldi	r24, 0x14	; 20
     672:	0e 94 b2 06 	call	0xd64	; 0xd64 <PWM_OC0_set_duty>
     676:	2b c0       	rjmp	.+86     	; 0x6ce <modeA+0x76>
		}
		// if ADC0 > 300 buzzer duty = 40 led duty = 70
		else if((temperature > 300) && (temperature <600))
     678:	ce 01       	movw	r24, r28
     67a:	8d 52       	subi	r24, 0x2D	; 45
     67c:	91 40       	sbci	r25, 0x01	; 1
     67e:	8b 32       	cpi	r24, 0x2B	; 43
     680:	91 40       	sbci	r25, 0x01	; 1
     682:	38 f4       	brcc	.+14     	; 0x692 <modeA+0x3a>
		{
			PWM_OC1A_set_duty(70);
     684:	86 e4       	ldi	r24, 0x46	; 70
     686:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
			PWM_OC0_set_duty(40);
     68a:	88 e2       	ldi	r24, 0x28	; 40
     68c:	0e 94 b2 06 	call	0xd64	; 0xd64 <PWM_OC0_set_duty>
     690:	1e c0       	rjmp	.+60     	; 0x6ce <modeA+0x76>
		}
		// if ADC0 > 600 buzzer duty = 60 led duty = 30
		else if((temperature > 600) && (temperature <900))
     692:	ce 01       	movw	r24, r28
     694:	89 55       	subi	r24, 0x59	; 89
     696:	92 40       	sbci	r25, 0x02	; 2
     698:	8b 32       	cpi	r24, 0x2B	; 43
     69a:	91 40       	sbci	r25, 0x01	; 1
     69c:	38 f4       	brcc	.+14     	; 0x6ac <modeA+0x54>
		{
			PWM_OC1A_set_duty(30);
     69e:	8e e1       	ldi	r24, 0x1E	; 30
     6a0:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
			PWM_OC0_set_duty(60);
     6a4:	8c e3       	ldi	r24, 0x3C	; 60
     6a6:	0e 94 b2 06 	call	0xd64	; 0xd64 <PWM_OC0_set_duty>
     6aa:	11 c0       	rjmp	.+34     	; 0x6ce <modeA+0x76>
		}
		// if ADC0 > 900 buzzer duty = 80 led duty = 10
		else if(temperature > 900)
     6ac:	c5 38       	cpi	r28, 0x85	; 133
     6ae:	83 e0       	ldi	r24, 0x03	; 3
     6b0:	d8 07       	cpc	r29, r24
     6b2:	38 f0       	brcs	.+14     	; 0x6c2 <modeA+0x6a>
		{
			PWM_OC1A_set_duty(10);
     6b4:	8a e0       	ldi	r24, 0x0A	; 10
     6b6:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
			PWM_OC0_set_duty(80);
     6ba:	80 e5       	ldi	r24, 0x50	; 80
     6bc:	0e 94 b2 06 	call	0xd64	; 0xd64 <PWM_OC0_set_duty>
     6c0:	06 c0       	rjmp	.+12     	; 0x6ce <modeA+0x76>
		}
		// if ADC0 < 100 buzzer duty = 0 led duty = 0
		else
		{
			PWM_OC1A_set_duty(0);
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
			PWM_OC0_set_duty(0);
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	0e 94 b2 06 	call	0xd64	; 0xd64 <PWM_OC0_set_duty>
		}
		
		if(xSemaphoreTake(LCD_Flag,50))
     6ce:	62 e3       	ldi	r22, 0x32	; 50
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     6d6:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     6da:	0e 94 80 09 	call	0x1300	; 0x1300 <xQueueSemaphoreTake>
     6de:	88 23       	and	r24, r24
     6e0:	61 f1       	breq	.+88     	; 0x73a <modeA+0xe2>
		{
			// Display current mode A
			LCD_write_command(0x1);
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_command(0x80);
     6e8:	80 e8       	ldi	r24, 0x80	; 128
     6ea:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_string(( uint8_t*)" Mode A Active");
     6ee:	82 e7       	ldi	r24, 0x72	; 114
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			LCD_write_command(0xC0);
     6f6:	80 ec       	ldi	r24, 0xC0	; 192
     6f8:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_string("M");
     6fc:	81 e8       	ldi	r24, 0x81	; 129
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			LCD_write_num(mode_state);
     704:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_write_num>
			
			LCD_write_string((uint8_t*)" Temp = ");
     712:	83 e8       	ldi	r24, 0x83	; 131
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			LCD_write_num(temperature);
     71a:	be 01       	movw	r22, r28
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_write_num>
			xSemaphoreGive(LCD_Flag);
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	40 e0       	ldi	r20, 0x00	; 0
     728:	50 e0       	ldi	r21, 0x00	; 0
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     732:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     736:	0e 94 5f 08 	call	0x10be	; 0x10be <xQueueGenericSend>
			
		}
		vTaskDelay(1);
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <vTaskDelay>
	}
     742:	8a cf       	rjmp	.-236    	; 0x658 <modeA>

00000744 <modeB>:
	uint8_t duty;

	while(1)
	{
		// read ADC channel 1
		Light = ADC_read(1);
     744:	81 e0       	ldi	r24, 0x01	; 1
     746:	0e 94 59 00 	call	0xb2	; 0xb2 <ADC_read>
		duty = ((Light-93)/251.0)*100;
     74a:	bc 01       	movw	r22, r24
     74c:	77 27       	eor	r23, r23
     74e:	6d 55       	subi	r22, 0x5D	; 93
     750:	71 09       	sbc	r23, r1
     752:	07 2e       	mov	r0, r23
     754:	00 0c       	add	r0, r0
     756:	88 0b       	sbc	r24, r24
     758:	99 0b       	sbc	r25, r25
     75a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	4b e7       	ldi	r20, 0x7B	; 123
     764:	53 e4       	ldi	r21, 0x43	; 67
     766:	0e 94 0b 15 	call	0x2a16	; 0x2a16 <__divsf3>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	48 ec       	ldi	r20, 0xC8	; 200
     770:	52 e4       	ldi	r21, 0x42	; 66
     772:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__mulsf3>
     776:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__fixunssfsi>
     77a:	c6 2f       	mov	r28, r22
		
		// set duty cycle
		PWM_OC1A_set_duty(duty);
     77c:	86 2f       	mov	r24, r22
     77e:	0e 94 c2 06 	call	0xd84	; 0xd84 <PWM_OC1A_set_duty>
		
	
		if(xSemaphoreTake(LCD_Flag,50))
     782:	62 e3       	ldi	r22, 0x32	; 50
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     78a:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     78e:	0e 94 80 09 	call	0x1300	; 0x1300 <xQueueSemaphoreTake>
     792:	88 23       	and	r24, r24
     794:	49 f1       	breq	.+82     	; 0x7e8 <modeB+0xa4>
		{
			// Display current mode B
			LCD_write_command(0x1);
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_command(0x80);
     79c:	80 e8       	ldi	r24, 0x80	; 128
     79e:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_string(( uint8_t*)" Mode B Active");
     7a2:	8c e8       	ldi	r24, 0x8C	; 140
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			LCD_write_command(0xC0);
     7aa:	80 ec       	ldi	r24, 0xC0	; 192
     7ac:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_num(mode_state);
     7b0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_write_num>

			LCD_write_string((uint8_t*)"   duty = ");
     7be:	8b e9       	ldi	r24, 0x9B	; 155
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			LCD_write_num(duty);
     7c6:	6c 2f       	mov	r22, r28
     7c8:	70 e0       	ldi	r23, 0x00	; 0
     7ca:	80 e0       	ldi	r24, 0x00	; 0
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_write_num>
			xSemaphoreGive(LCD_Flag);
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	50 e0       	ldi	r21, 0x00	; 0
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	70 e0       	ldi	r23, 0x00	; 0
     7dc:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     7e0:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     7e4:	0e 94 5f 08 	call	0x10be	; 0x10be <xQueueGenericSend>
		}
		vTaskDelay(1);
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <vTaskDelay>
	}
     7f0:	a9 cf       	rjmp	.-174    	; 0x744 <modeB>

000007f2 <modeC>:
{
	uint8_t num1;
	uint8_t num2;
	uint8_t op;
	uint8_t result;
	uint8_t step = 0;
     7f2:	c0 e0       	ldi	r28, 0x00	; 0

    while(1)
    {

		if (xSemaphoreTake(LCD_Flag, 50)) 
     7f4:	62 e3       	ldi	r22, 0x32	; 50
     7f6:	70 e0       	ldi	r23, 0x00	; 0
     7f8:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     7fc:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     800:	0e 94 80 09 	call	0x1300	; 0x1300 <xQueueSemaphoreTake>
     804:	88 23       	and	r24, r24
     806:	a9 f0       	breq	.+42     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
		{
			LCD_write_command(0x1);
     808:	81 e0       	ldi	r24, 0x01	; 1
     80a:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_command(0x80);
     80e:	80 e8       	ldi	r24, 0x80	; 128
     810:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
			LCD_write_string(( uint8_t*)" Mode C Active");
     814:	86 ea       	ldi	r24, 0xA6	; 166
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
			xSemaphoreGive(LCD_Flag);
     81c:	20 e0       	ldi	r18, 0x00	; 0
     81e:	40 e0       	ldi	r20, 0x00	; 0
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	60 e0       	ldi	r22, 0x00	; 0
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 91 63 05 	lds	r24, 0x0563	; 0x800563 <LCD_Flag>
     82a:	90 91 64 05 	lds	r25, 0x0564	; 0x800564 <LCD_Flag+0x1>
     82e:	0e 94 5f 08 	call	0x10be	; 0x10be <xQueueGenericSend>
		}
		
		uint8_t key = keypad_read();
     832:	0e 94 a5 00 	call	0x14a	; 0x14a <keypad_read>
		
		// Check for a valid key press
		if (key != -1)
		{
			if (step == 0)
     836:	c1 11       	cpse	r28, r1
     838:	03 c0       	rjmp	.+6      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
			{
				num1 = key;
				step++;
     83a:	cf 5f       	subi	r28, 0xFF	; 255
		// Check for a valid key press
		if (key != -1)
		{
			if (step == 0)
			{
				num1 = key;
     83c:	d8 2f       	mov	r29, r24
     83e:	4c c0       	rjmp	.+152    	; 0x8d8 <__stack+0x79>
				step++;
			}
			else if (step == 1)
     840:	c1 30       	cpi	r28, 0x01	; 1
     842:	19 f4       	brne	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
			{
				op = key;
				step++;
     844:	cf 5f       	subi	r28, 0xFF	; 255
				num1 = key;
				step++;
			}
			else if (step == 1)
			{
				op = key;
     846:	18 2f       	mov	r17, r24
     848:	47 c0       	rjmp	.+142    	; 0x8d8 <__stack+0x79>
				step++;
			}
			else if (step == 2)
     84a:	c2 30       	cpi	r28, 0x02	; 2
     84c:	19 f4       	brne	.+6      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
			{
				num2 = key;
				step++;
     84e:	cf 5f       	subi	r28, 0xFF	; 255
				op = key;
				step++;
			}
			else if (step == 2)
			{
				num2 = key;
     850:	08 2f       	mov	r16, r24
     852:	42 c0       	rjmp	.+132    	; 0x8d8 <__stack+0x79>
				step++;
			}
			else if (step == 3)
     854:	c3 30       	cpi	r28, 0x03	; 3
     856:	09 f0       	breq	.+2      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     858:	3f c0       	rjmp	.+126    	; 0x8d8 <__stack+0x79>
			{
				if (key == '=')
     85a:	8d 33       	cpi	r24, 0x3D	; 61
     85c:	11 f5       	brne	.+68     	; 0x8a2 <__stack+0x43>
				{
					if (op == '+')
     85e:	1b 32       	cpi	r17, 0x2B	; 43
     860:	21 f4       	brne	.+8      	; 0x86a <__stack+0xb>
					{
						result = num1 + num2;
     862:	fd 2e       	mov	r15, r29
     864:	f0 0e       	add	r15, r16
						else
						{
							result = 0; // Handle division by zero
						}
					}
					step = 0;
     866:	c0 e0       	ldi	r28, 0x00	; 0
     868:	1c c0       	rjmp	.+56     	; 0x8a2 <__stack+0x43>
				{
					if (op == '+')
					{
						result = num1 + num2;
					}
					else if (op == '-')
     86a:	1d 32       	cpi	r17, 0x2D	; 45
     86c:	21 f4       	brne	.+8      	; 0x876 <__stack+0x17>
					{
						result = num1 - num2;
     86e:	fd 2e       	mov	r15, r29
     870:	f0 1a       	sub	r15, r16
						else
						{
							result = 0; // Handle division by zero
						}
					}
					step = 0;
     872:	c0 e0       	ldi	r28, 0x00	; 0
     874:	16 c0       	rjmp	.+44     	; 0x8a2 <__stack+0x43>
					}
					else if (op == '-')
					{
						result = num1 - num2;
					}
					else if (op == '*')
     876:	1a 32       	cpi	r17, 0x2A	; 42
     878:	29 f4       	brne	.+10     	; 0x884 <__stack+0x25>
					{
						result = num1 * num2;
     87a:	d0 9f       	mul	r29, r16
     87c:	f0 2c       	mov	r15, r0
     87e:	11 24       	eor	r1, r1
						else
						{
							result = 0; // Handle division by zero
						}
					}
					step = 0;
     880:	c0 e0       	ldi	r28, 0x00	; 0
     882:	0f c0       	rjmp	.+30     	; 0x8a2 <__stack+0x43>
					}
					else if (op == '*')
					{
						result = num1 * num2;
					}
					else if (op == '/')
     884:	1f 32       	cpi	r17, 0x2F	; 47
     886:	49 f4       	brne	.+18     	; 0x89a <__stack+0x3b>
					{
						if (num2 != 0)
     888:	00 23       	and	r16, r16
     88a:	49 f0       	breq	.+18     	; 0x89e <__stack+0x3f>
						{
							result = num1 / num2;
     88c:	8d 2f       	mov	r24, r29
     88e:	60 2f       	mov	r22, r16
     890:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodqi4>
     894:	f8 2e       	mov	r15, r24
						else
						{
							result = 0; // Handle division by zero
						}
					}
					step = 0;
     896:	c0 e0       	ldi	r28, 0x00	; 0
     898:	04 c0       	rjmp	.+8      	; 0x8a2 <__stack+0x43>
     89a:	c0 e0       	ldi	r28, 0x00	; 0
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	c0 e0       	ldi	r28, 0x00	; 0
						{
							result = num1 / num2;
						}
						else
						{
							result = 0; // Handle division by zero
     8a0:	f1 2c       	mov	r15, r1
						}
					}
					step = 0;
				}
				
				 LCD_write_command(0xC0);
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
				 LCD_write_string(num1 + '0');
     8a8:	8d 2f       	mov	r24, r29
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	c0 96       	adiw	r24, 0x30	; 48
     8ae:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
				 LCD_write_string(op);
     8b2:	81 2f       	mov	r24, r17
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
				 LCD_write_string(num2 + '0');
     8ba:	80 2f       	mov	r24, r16
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	c0 96       	adiw	r24, 0x30	; 48
     8c0:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
				 LCD_write_string('=');
     8c4:	8d e3       	ldi	r24, 0x3D	; 61
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 3a 02 	call	0x474	; 0x474 <LCD_write_string>
				 LCD_write_num(result);
     8cc:	6f 2d       	mov	r22, r15
     8ce:	70 e0       	ldi	r23, 0x00	; 0
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	0e 94 4d 02 	call	0x49a	; 0x49a <LCD_write_num>
				
				
			}
			
			vTaskDelay(1);
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <vTaskDelay>
		}
    }
     8e0:	89 cf       	rjmp	.-238    	; 0x7f4 <modeC+0x2>

000008e2 <main>:
}



int main(void)
{
     8e2:	ef 92       	push	r14
     8e4:	ff 92       	push	r15
     8e6:	0f 93       	push	r16
	LCD_Flag = xSemaphoreCreateBinary();
     8e8:	43 e0       	ldi	r20, 0x03	; 3
     8ea:	60 e0       	ldi	r22, 0x00	; 0
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 1e 08 	call	0x103c	; 0x103c <xQueueGenericCreate>
     8f2:	90 93 64 05 	sts	0x0564, r25	; 0x800564 <LCD_Flag+0x1>
     8f6:	80 93 63 05 	sts	0x0563, r24	; 0x800563 <LCD_Flag>
	xSemaphoreGive(LCD_Flag);
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	0e 94 5f 08 	call	0x10be	; 0x10be <xQueueGenericSend>
		
	// initialize LCD display
	LCD_init();
     908:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_init>
	
	// initialize ADC
	ADC_init();
     90c:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_init>
	
	// PD2 Input pin (pull up)
	PORTD = 1<<2;
     910:	84 e0       	ldi	r24, 0x04	; 4
     912:	82 bb       	out	0x12, r24	; 18
	// GICR general interrupt control register
	// enables masked interrupts INT0 INT1 INT2
	// BIT6 External interrupt request 0 enable
	GICR |= 1<<INT0;
     914:	8b b7       	in	r24, 0x3b	; 59
     916:	80 64       	ori	r24, 0x40	; 64
     918:	8b bf       	out	0x3b, r24	; 59
	// SREG : Status Register (Non Memory Mapped Register)
	// Note : SREG has a virtual address
	// Global interrupt flag enabled
	SREG |= 1<<7;
     91a:	8f b7       	in	r24, 0x3f	; 63
     91c:	80 68       	ori	r24, 0x80	; 128
     91e:	8f bf       	out	0x3f, r24	; 63
	
	// Initialize Timer 0 (Fast PWM)
	PWM_OC0_init();
     920:	0e 94 ab 06 	call	0xd56	; 0xd56 <PWM_OC0_init>
	// Initialize Timer 1 (Fast PWM)
	PWM_OC1A_init();
     924:	0e 94 a1 06 	call	0xd42	; 0xd42 <PWM_OC1A_init>
	
	// Initialize keypad
	keypad_init();
     928:	0e 94 a0 00 	call	0x140	; 0x140 <keypad_init>
	
	// create a task for each mode of operation
    xTaskCreate(modeA, "mode_A", 128, NULL, 1, &modeA_H);
     92c:	0f 2e       	mov	r0, r31
     92e:	f1 e6       	ldi	r31, 0x61	; 97
     930:	ef 2e       	mov	r14, r31
     932:	f5 e0       	ldi	r31, 0x05	; 5
     934:	ff 2e       	mov	r15, r31
     936:	f0 2d       	mov	r31, r0
     938:	01 e0       	ldi	r16, 0x01	; 1
     93a:	20 e0       	ldi	r18, 0x00	; 0
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	40 e8       	ldi	r20, 0x80	; 128
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	65 eb       	ldi	r22, 0xB5	; 181
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	8c e2       	ldi	r24, 0x2C	; 44
     948:	93 e0       	ldi	r25, 0x03	; 3
     94a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskCreate>
    xTaskCreate(modeB, "mode_B", 128, NULL, 1, &modeB_H);
     94e:	0f 2e       	mov	r0, r31
     950:	ff e5       	ldi	r31, 0x5F	; 95
     952:	ef 2e       	mov	r14, r31
     954:	f5 e0       	ldi	r31, 0x05	; 5
     956:	ff 2e       	mov	r15, r31
     958:	f0 2d       	mov	r31, r0
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	40 e8       	ldi	r20, 0x80	; 128
     960:	50 e0       	ldi	r21, 0x00	; 0
     962:	6c eb       	ldi	r22, 0xBC	; 188
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	82 ea       	ldi	r24, 0xA2	; 162
     968:	93 e0       	ldi	r25, 0x03	; 3
     96a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskCreate>
    xTaskCreate(modeC, "mode_C", 128, NULL, 4, &modeC_H);
     96e:	0f 2e       	mov	r0, r31
     970:	f5 e6       	ldi	r31, 0x65	; 101
     972:	ef 2e       	mov	r14, r31
     974:	f5 e0       	ldi	r31, 0x05	; 5
     976:	ff 2e       	mov	r15, r31
     978:	f0 2d       	mov	r31, r0
     97a:	04 e0       	ldi	r16, 0x04	; 4
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e8       	ldi	r20, 0x80	; 128
     982:	50 e0       	ldi	r21, 0x00	; 0
     984:	63 ec       	ldi	r22, 0xC3	; 195
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	89 ef       	ldi	r24, 0xF9	; 249
     98a:	93 e0       	ldi	r25, 0x03	; 3
     98c:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskCreate>
 
	// enable scheduler
    vTaskStartScheduler();
     990:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <vTaskStartScheduler>
    
}
     994:	80 e0       	ldi	r24, 0x00	; 0
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	0f 91       	pop	r16
     99a:	ff 90       	pop	r15
     99c:	ef 90       	pop	r14
     99e:	08 95       	ret

000009a0 <__vector_1>:




ISR(INT0_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	2f 93       	push	r18
     9ac:	3f 93       	push	r19
     9ae:	4f 93       	push	r20
     9b0:	5f 93       	push	r21
     9b2:	6f 93       	push	r22
     9b4:	7f 93       	push	r23
     9b6:	8f 93       	push	r24
     9b8:	9f 93       	push	r25
     9ba:	af 93       	push	r26
     9bc:	bf 93       	push	r27
     9be:	ef 93       	push	r30
     9c0:	ff 93       	push	r31
				1 for mode A
				2 for mode B
				3 for mode C

	*/
	if (mode_state==1)
     9c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9c6:	81 30       	cpi	r24, 0x01	; 1
     9c8:	a9 f4       	brne	.+42     	; 0x9f4 <__vector_1+0x54>
	{
		LCD_write_command(0x1);
     9ca:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
		vTaskSuspend(modeB_H);
     9ce:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <modeB_H>
     9d2:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <modeB_H+0x1>
     9d6:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskSuspend(modeC_H);
     9da:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <modeC_H>
     9de:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <modeC_H+0x1>
     9e2:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskResume(modeA_H);
     9e6:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <modeA_H>
     9ea:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <modeA_H+0x1>
     9ee:	0e 94 b5 0c 	call	0x196a	; 0x196a <vTaskResume>
     9f2:	2f c0       	rjmp	.+94     	; 0xa52 <__vector_1+0xb2>
		
	}
	else if (mode_state==2)
     9f4:	82 30       	cpi	r24, 0x02	; 2
     9f6:	b1 f4       	brne	.+44     	; 0xa24 <__vector_1+0x84>
	{
		LCD_write_command(0x1);
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
		vTaskSuspend(modeA_H);
     9fe:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <modeA_H>
     a02:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <modeA_H+0x1>
     a06:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskSuspend(modeC_H);
     a0a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <modeC_H>
     a0e:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <modeC_H+0x1>
     a12:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskResume(modeB_H);
     a16:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <modeB_H>
     a1a:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <modeB_H+0x1>
     a1e:	0e 94 b5 0c 	call	0x196a	; 0x196a <vTaskResume>
     a22:	17 c0       	rjmp	.+46     	; 0xa52 <__vector_1+0xb2>
	}
	else if (mode_state==3)
     a24:	83 30       	cpi	r24, 0x03	; 3
     a26:	a9 f4       	brne	.+42     	; 0xa52 <__vector_1+0xb2>
	{
		LCD_write_command(0x1);
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_write_command>
		vTaskSuspend(modeA_H);
     a2e:	80 91 61 05 	lds	r24, 0x0561	; 0x800561 <modeA_H>
     a32:	90 91 62 05 	lds	r25, 0x0562	; 0x800562 <modeA_H+0x1>
     a36:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskSuspend(modeB_H);
     a3a:	80 91 5f 05 	lds	r24, 0x055F	; 0x80055f <modeB_H>
     a3e:	90 91 60 05 	lds	r25, 0x0560	; 0x800560 <modeB_H+0x1>
     a42:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <vTaskSuspend>
		vTaskResume(modeC_H);
     a46:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <modeC_H>
     a4a:	90 91 66 05 	lds	r25, 0x0566	; 0x800566 <modeC_H+0x1>
     a4e:	0e 94 b5 0c 	call	0x196a	; 0x196a <vTaskResume>
	}

	if(mode_state==3)
     a52:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	21 f4       	brne	.+8      	; 0xa62 <__vector_1+0xc2>
	{
		mode_state = 1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     a60:	03 c0       	rjmp	.+6      	; 0xa68 <__vector_1+0xc8>
	}
	else
	{
		mode_state++;
     a62:	8f 5f       	subi	r24, 0xFF	; 255
     a64:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

00000a8a <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     a8a:	1b bc       	out	0x2b, r1	; 43
     a8c:	89 ef       	ldi	r24, 0xF9	; 249
     a8e:	8a bd       	out	0x2a, r24	; 42
     a90:	8b e0       	ldi	r24, 0x0B	; 11
     a92:	8e bd       	out	0x2e, r24	; 46
     a94:	89 b7       	in	r24, 0x39	; 57
     a96:	80 61       	ori	r24, 0x10	; 16
     a98:	89 bf       	out	0x39, r24	; 57
     a9a:	08 95       	ret

00000a9c <pxPortInitialiseStack>:
     a9c:	31 e1       	ldi	r19, 0x11	; 17
     a9e:	fc 01       	movw	r30, r24
     aa0:	30 83       	st	Z, r19
     aa2:	31 97       	sbiw	r30, 0x01	; 1
     aa4:	22 e2       	ldi	r18, 0x22	; 34
     aa6:	20 83       	st	Z, r18
     aa8:	31 97       	sbiw	r30, 0x01	; 1
     aaa:	a3 e3       	ldi	r26, 0x33	; 51
     aac:	a0 83       	st	Z, r26
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	60 83       	st	Z, r22
     ab2:	31 97       	sbiw	r30, 0x01	; 1
     ab4:	70 83       	st	Z, r23
     ab6:	31 97       	sbiw	r30, 0x01	; 1
     ab8:	10 82       	st	Z, r1
     aba:	31 97       	sbiw	r30, 0x01	; 1
     abc:	60 e8       	ldi	r22, 0x80	; 128
     abe:	60 83       	st	Z, r22
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	10 82       	st	Z, r1
     ac4:	31 97       	sbiw	r30, 0x01	; 1
     ac6:	62 e0       	ldi	r22, 0x02	; 2
     ac8:	60 83       	st	Z, r22
     aca:	31 97       	sbiw	r30, 0x01	; 1
     acc:	63 e0       	ldi	r22, 0x03	; 3
     ace:	60 83       	st	Z, r22
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	64 e0       	ldi	r22, 0x04	; 4
     ad4:	60 83       	st	Z, r22
     ad6:	31 97       	sbiw	r30, 0x01	; 1
     ad8:	65 e0       	ldi	r22, 0x05	; 5
     ada:	60 83       	st	Z, r22
     adc:	31 97       	sbiw	r30, 0x01	; 1
     ade:	66 e0       	ldi	r22, 0x06	; 6
     ae0:	60 83       	st	Z, r22
     ae2:	31 97       	sbiw	r30, 0x01	; 1
     ae4:	67 e0       	ldi	r22, 0x07	; 7
     ae6:	60 83       	st	Z, r22
     ae8:	31 97       	sbiw	r30, 0x01	; 1
     aea:	68 e0       	ldi	r22, 0x08	; 8
     aec:	60 83       	st	Z, r22
     aee:	31 97       	sbiw	r30, 0x01	; 1
     af0:	69 e0       	ldi	r22, 0x09	; 9
     af2:	60 83       	st	Z, r22
     af4:	31 97       	sbiw	r30, 0x01	; 1
     af6:	60 e1       	ldi	r22, 0x10	; 16
     af8:	60 83       	st	Z, r22
     afa:	31 97       	sbiw	r30, 0x01	; 1
     afc:	30 83       	st	Z, r19
     afe:	31 97       	sbiw	r30, 0x01	; 1
     b00:	32 e1       	ldi	r19, 0x12	; 18
     b02:	30 83       	st	Z, r19
     b04:	31 97       	sbiw	r30, 0x01	; 1
     b06:	33 e1       	ldi	r19, 0x13	; 19
     b08:	30 83       	st	Z, r19
     b0a:	31 97       	sbiw	r30, 0x01	; 1
     b0c:	34 e1       	ldi	r19, 0x14	; 20
     b0e:	30 83       	st	Z, r19
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	35 e1       	ldi	r19, 0x15	; 21
     b14:	30 83       	st	Z, r19
     b16:	31 97       	sbiw	r30, 0x01	; 1
     b18:	36 e1       	ldi	r19, 0x16	; 22
     b1a:	30 83       	st	Z, r19
     b1c:	31 97       	sbiw	r30, 0x01	; 1
     b1e:	37 e1       	ldi	r19, 0x17	; 23
     b20:	30 83       	st	Z, r19
     b22:	31 97       	sbiw	r30, 0x01	; 1
     b24:	38 e1       	ldi	r19, 0x18	; 24
     b26:	30 83       	st	Z, r19
     b28:	31 97       	sbiw	r30, 0x01	; 1
     b2a:	39 e1       	ldi	r19, 0x19	; 25
     b2c:	30 83       	st	Z, r19
     b2e:	31 97       	sbiw	r30, 0x01	; 1
     b30:	30 e2       	ldi	r19, 0x20	; 32
     b32:	30 83       	st	Z, r19
     b34:	31 97       	sbiw	r30, 0x01	; 1
     b36:	31 e2       	ldi	r19, 0x21	; 33
     b38:	30 83       	st	Z, r19
     b3a:	31 97       	sbiw	r30, 0x01	; 1
     b3c:	20 83       	st	Z, r18
     b3e:	31 97       	sbiw	r30, 0x01	; 1
     b40:	23 e2       	ldi	r18, 0x23	; 35
     b42:	20 83       	st	Z, r18
     b44:	31 97       	sbiw	r30, 0x01	; 1
     b46:	40 83       	st	Z, r20
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	50 83       	st	Z, r21
     b4c:	31 97       	sbiw	r30, 0x01	; 1
     b4e:	26 e2       	ldi	r18, 0x26	; 38
     b50:	20 83       	st	Z, r18
     b52:	31 97       	sbiw	r30, 0x01	; 1
     b54:	27 e2       	ldi	r18, 0x27	; 39
     b56:	20 83       	st	Z, r18
     b58:	31 97       	sbiw	r30, 0x01	; 1
     b5a:	28 e2       	ldi	r18, 0x28	; 40
     b5c:	20 83       	st	Z, r18
     b5e:	31 97       	sbiw	r30, 0x01	; 1
     b60:	29 e2       	ldi	r18, 0x29	; 41
     b62:	20 83       	st	Z, r18
     b64:	31 97       	sbiw	r30, 0x01	; 1
     b66:	20 e3       	ldi	r18, 0x30	; 48
     b68:	20 83       	st	Z, r18
     b6a:	31 97       	sbiw	r30, 0x01	; 1
     b6c:	21 e3       	ldi	r18, 0x31	; 49
     b6e:	20 83       	st	Z, r18
     b70:	86 97       	sbiw	r24, 0x26	; 38
     b72:	08 95       	ret

00000b74 <xPortStartScheduler>:
     b74:	0e 94 45 05 	call	0xa8a	; 0xa8a <prvSetupTimerInterrupt>
     b78:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
     b7c:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
     b80:	cd 91       	ld	r28, X+
     b82:	cd bf       	out	0x3d, r28	; 61
     b84:	dd 91       	ld	r29, X+
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	ff 91       	pop	r31
     b8a:	ef 91       	pop	r30
     b8c:	df 91       	pop	r29
     b8e:	cf 91       	pop	r28
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	7f 91       	pop	r23
     b9a:	6f 91       	pop	r22
     b9c:	5f 91       	pop	r21
     b9e:	4f 91       	pop	r20
     ba0:	3f 91       	pop	r19
     ba2:	2f 91       	pop	r18
     ba4:	1f 91       	pop	r17
     ba6:	0f 91       	pop	r16
     ba8:	ff 90       	pop	r15
     baa:	ef 90       	pop	r14
     bac:	df 90       	pop	r13
     bae:	cf 90       	pop	r12
     bb0:	bf 90       	pop	r11
     bb2:	af 90       	pop	r10
     bb4:	9f 90       	pop	r9
     bb6:	8f 90       	pop	r8
     bb8:	7f 90       	pop	r7
     bba:	6f 90       	pop	r6
     bbc:	5f 90       	pop	r5
     bbe:	4f 90       	pop	r4
     bc0:	3f 90       	pop	r3
     bc2:	2f 90       	pop	r2
     bc4:	1f 90       	pop	r1
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	08 95       	ret
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	08 95       	ret

00000bd2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	f8 94       	cli
     bd8:	0f 92       	push	r0
     bda:	1f 92       	push	r1
     bdc:	11 24       	eor	r1, r1
     bde:	2f 92       	push	r2
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
     c1e:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
     c22:	0d b6       	in	r0, 0x3d	; 61
     c24:	0d 92       	st	X+, r0
     c26:	0e b6       	in	r0, 0x3e	; 62
     c28:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     c2a:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     c2e:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
     c32:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
     c36:	cd 91       	ld	r28, X+
     c38:	cd bf       	out	0x3d, r28	; 61
     c3a:	dd 91       	ld	r29, X+
     c3c:	de bf       	out	0x3e, r29	; 62
     c3e:	ff 91       	pop	r31
     c40:	ef 91       	pop	r30
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	bf 91       	pop	r27
     c48:	af 91       	pop	r26
     c4a:	9f 91       	pop	r25
     c4c:	8f 91       	pop	r24
     c4e:	7f 91       	pop	r23
     c50:	6f 91       	pop	r22
     c52:	5f 91       	pop	r21
     c54:	4f 91       	pop	r20
     c56:	3f 91       	pop	r19
     c58:	2f 91       	pop	r18
     c5a:	1f 91       	pop	r17
     c5c:	0f 91       	pop	r16
     c5e:	ff 90       	pop	r15
     c60:	ef 90       	pop	r14
     c62:	df 90       	pop	r13
     c64:	cf 90       	pop	r12
     c66:	bf 90       	pop	r11
     c68:	af 90       	pop	r10
     c6a:	9f 90       	pop	r9
     c6c:	8f 90       	pop	r8
     c6e:	7f 90       	pop	r7
     c70:	6f 90       	pop	r6
     c72:	5f 90       	pop	r5
     c74:	4f 90       	pop	r4
     c76:	3f 90       	pop	r3
     c78:	2f 90       	pop	r2
     c7a:	1f 90       	pop	r1
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0

	asm volatile ( "ret" );
     c82:	08 95       	ret

00000c84 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     c84:	0f 92       	push	r0
     c86:	0f b6       	in	r0, 0x3f	; 63
     c88:	f8 94       	cli
     c8a:	0f 92       	push	r0
     c8c:	1f 92       	push	r1
     c8e:	11 24       	eor	r1, r1
     c90:	2f 92       	push	r2
     c92:	3f 92       	push	r3
     c94:	4f 92       	push	r4
     c96:	5f 92       	push	r5
     c98:	6f 92       	push	r6
     c9a:	7f 92       	push	r7
     c9c:	8f 92       	push	r8
     c9e:	9f 92       	push	r9
     ca0:	af 92       	push	r10
     ca2:	bf 92       	push	r11
     ca4:	cf 92       	push	r12
     ca6:	df 92       	push	r13
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	cf 93       	push	r28
     cc6:	df 93       	push	r29
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
     cd0:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
     cd4:	0d b6       	in	r0, 0x3d	; 61
     cd6:	0d 92       	st	X+, r0
     cd8:	0e b6       	in	r0, 0x3e	; 62
     cda:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     cdc:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <xTaskIncrementTick>
     ce0:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     ce2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ce6:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
     cea:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
     cee:	cd 91       	ld	r28, X+
     cf0:	cd bf       	out	0x3d, r28	; 61
     cf2:	dd 91       	ld	r29, X+
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	9f 90       	pop	r9
     d24:	8f 90       	pop	r8
     d26:	7f 90       	pop	r7
     d28:	6f 90       	pop	r6
     d2a:	5f 90       	pop	r5
     d2c:	4f 90       	pop	r4
     d2e:	3f 90       	pop	r3
     d30:	2f 90       	pop	r2
     d32:	1f 90       	pop	r1
     d34:	0f 90       	pop	r0
     d36:	0f be       	out	0x3f, r0	; 63
     d38:	0f 90       	pop	r0

	asm volatile ( "ret" );
     d3a:	08 95       	ret

00000d3c <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     d3c:	0e 94 42 06 	call	0xc84	; 0xc84 <vPortYieldFromTick>
		asm volatile ( "reti" );
     d40:	18 95       	reti

00000d42 <PWM_OC1A_init>:


void PWM_OC1A_init(void)
{
	// OC1A output
	SETBIT(DDRD,5); 
     d42:	81 b3       	in	r24, 0x11	; 17
     d44:	80 62       	ori	r24, 0x20	; 32
     d46:	81 bb       	out	0x11, r24	; 17
	// (non-inverting mode)		COM1A1 = 1    COM1A0 = 0			
	// (Fast PWM, 10-bit)		WGM10 = 1	  WGM11 = 1		 WGM12 = 1		 WGM13 = 0		
	// (no pre-scaler)			CS10 = 1	  CS11 = 0		 CS12 = 0
	TCCR1A |= (1 << COM1A1) | (1 << WGM10) | (1 << WGM11)  ;
     d48:	8f b5       	in	r24, 0x2f	; 47
     d4a:	83 68       	ori	r24, 0x83	; 131
     d4c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1 << WGM12) | (1<<CS10);
     d4e:	8e b5       	in	r24, 0x2e	; 46
     d50:	89 60       	ori	r24, 0x09	; 9
     d52:	8e bd       	out	0x2e, r24	; 46
     d54:	08 95       	ret

00000d56 <PWM_OC0_init>:


void PWM_OC0_init(void)
{
	// OC0 output
	TCCR0 |= (1 << WGM00) | (1 << WGM01) | (1 << COM01) | (1 << CS00) ;
     d56:	83 b7       	in	r24, 0x33	; 51
     d58:	89 66       	ori	r24, 0x69	; 105
     d5a:	83 bf       	out	0x33, r24	; 51
	SETBIT(DDRB,3);
     d5c:	87 b3       	in	r24, 0x17	; 23
     d5e:	88 60       	ori	r24, 0x08	; 8
     d60:	87 bb       	out	0x17, r24	; 23
     d62:	08 95       	ret

00000d64 <PWM_OC0_set_duty>:
duty = OCR1A / 255 * 100
OCR1A = duty * 2.55
*/
void PWM_OC0_set_duty(uint8_t duty)
{
	OCR0 = duty * 2.55;
     d64:	68 2f       	mov	r22, r24
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__floatsisf>
     d70:	23 e3       	ldi	r18, 0x33	; 51
     d72:	33 e3       	ldi	r19, 0x33	; 51
     d74:	43 e2       	ldi	r20, 0x23	; 35
     d76:	50 e4       	ldi	r21, 0x40	; 64
     d78:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__mulsf3>
     d7c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__fixunssfsi>
     d80:	6c bf       	out	0x3c, r22	; 60
     d82:	08 95       	ret

00000d84 <PWM_OC1A_set_duty>:
OCR1A = duty * 10.23
*/
void PWM_OC1A_set_duty(uint8_t duty)
{
	// set output on pin OCR1A (PD5)
	OCR1A = duty * 10.23;
     d84:	68 2f       	mov	r22, r24
     d86:	70 e0       	ldi	r23, 0x00	; 0
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <__floatsisf>
     d90:	24 e1       	ldi	r18, 0x14	; 20
     d92:	3e ea       	ldi	r19, 0xAE	; 174
     d94:	43 e2       	ldi	r20, 0x23	; 35
     d96:	51 e4       	ldi	r21, 0x41	; 65
     d98:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__mulsf3>
     d9c:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__fixunssfsi>
     da0:	7b bd       	out	0x2b, r23	; 43
     da2:	6a bd       	out	0x2a, r22	; 42
     da4:	08 95       	ret

00000da6 <prvGetDisinheritPriorityAfterTimeout>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     da6:	dc 01       	movw	r26, r24
     da8:	51 96       	adiw	r26, 0x11	; 17
     daa:	2c 91       	ld	r18, X
     dac:	51 97       	sbiw	r26, 0x11	; 17
     dae:	22 23       	and	r18, r18
     db0:	41 f0       	breq	.+16     	; 0xdc2 <prvGetDisinheritPriorityAfterTimeout+0x1c>
     db2:	56 96       	adiw	r26, 0x16	; 22
     db4:	ed 91       	ld	r30, X+
     db6:	fc 91       	ld	r31, X
     db8:	57 97       	sbiw	r26, 0x17	; 23
     dba:	90 81       	ld	r25, Z
     dbc:	84 e0       	ldi	r24, 0x04	; 4
     dbe:	89 1b       	sub	r24, r25
     dc0:	08 95       	ret
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	08 95       	ret

00000dc6 <prvIsQueueEmpty>:
     dc6:	0f b6       	in	r0, 0x3f	; 63
     dc8:	f8 94       	cli
     dca:	0f 92       	push	r0
     dcc:	fc 01       	movw	r30, r24
     dce:	82 8d       	ldd	r24, Z+26	; 0x1a
     dd0:	81 11       	cpse	r24, r1
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <prvIsQueueEmpty+0x12>
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	01 c0       	rjmp	.+2      	; 0xdda <prvIsQueueEmpty+0x14>
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	0f 90       	pop	r0
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	08 95       	ret

00000de0 <prvIsQueueFull>:
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	0f 92       	push	r0
     de6:	fc 01       	movw	r30, r24
     de8:	22 8d       	ldd	r18, Z+26	; 0x1a
     dea:	83 8d       	ldd	r24, Z+27	; 0x1b
     dec:	28 13       	cpse	r18, r24
     dee:	02 c0       	rjmp	.+4      	; 0xdf4 <prvIsQueueFull+0x14>
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <prvIsQueueFull+0x16>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	08 95       	ret

00000dfc <prvCopyDataToQueue>:
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
     e06:	04 2f       	mov	r16, r20
     e08:	1a 8d       	ldd	r17, Y+26	; 0x1a
     e0a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     e0c:	41 11       	cpse	r20, r1
     e0e:	0c c0       	rjmp	.+24     	; 0xe28 <prvCopyDataToQueue+0x2c>
     e10:	88 81       	ld	r24, Y
     e12:	99 81       	ldd	r25, Y+1	; 0x01
     e14:	89 2b       	or	r24, r25
     e16:	09 f0       	breq	.+2      	; 0xe1a <prvCopyDataToQueue+0x1e>
     e18:	42 c0       	rjmp	.+132    	; 0xe9e <prvCopyDataToQueue+0xa2>
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	9d 81       	ldd	r25, Y+5	; 0x05
     e1e:	0e 94 0f 12 	call	0x241e	; 0x241e <xTaskPriorityDisinherit>
     e22:	1d 82       	std	Y+5, r1	; 0x05
     e24:	1c 82       	std	Y+4, r1	; 0x04
     e26:	42 c0       	rjmp	.+132    	; 0xeac <prvCopyDataToQueue+0xb0>
     e28:	01 11       	cpse	r16, r1
     e2a:	17 c0       	rjmp	.+46     	; 0xe5a <prvCopyDataToQueue+0x5e>
     e2c:	50 e0       	ldi	r21, 0x00	; 0
     e2e:	8a 81       	ldd	r24, Y+2	; 0x02
     e30:	9b 81       	ldd	r25, Y+3	; 0x03
     e32:	0e 94 ef 16 	call	0x2dde	; 0x2dde <memcpy>
     e36:	2c 8d       	ldd	r18, Y+28	; 0x1c
     e38:	8a 81       	ldd	r24, Y+2	; 0x02
     e3a:	9b 81       	ldd	r25, Y+3	; 0x03
     e3c:	82 0f       	add	r24, r18
     e3e:	91 1d       	adc	r25, r1
     e40:	9b 83       	std	Y+3, r25	; 0x03
     e42:	8a 83       	std	Y+2, r24	; 0x02
     e44:	2c 81       	ldd	r18, Y+4	; 0x04
     e46:	3d 81       	ldd	r19, Y+5	; 0x05
     e48:	82 17       	cp	r24, r18
     e4a:	93 07       	cpc	r25, r19
     e4c:	50 f1       	brcs	.+84     	; 0xea2 <prvCopyDataToQueue+0xa6>
     e4e:	88 81       	ld	r24, Y
     e50:	99 81       	ldd	r25, Y+1	; 0x01
     e52:	9b 83       	std	Y+3, r25	; 0x03
     e54:	8a 83       	std	Y+2, r24	; 0x02
     e56:	80 e0       	ldi	r24, 0x00	; 0
     e58:	29 c0       	rjmp	.+82     	; 0xeac <prvCopyDataToQueue+0xb0>
     e5a:	50 e0       	ldi	r21, 0x00	; 0
     e5c:	8e 81       	ldd	r24, Y+6	; 0x06
     e5e:	9f 81       	ldd	r25, Y+7	; 0x07
     e60:	0e 94 ef 16 	call	0x2dde	; 0x2dde <memcpy>
     e64:	8c 8d       	ldd	r24, Y+28	; 0x1c
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	91 95       	neg	r25
     e6a:	81 95       	neg	r24
     e6c:	91 09       	sbc	r25, r1
     e6e:	2e 81       	ldd	r18, Y+6	; 0x06
     e70:	3f 81       	ldd	r19, Y+7	; 0x07
     e72:	28 0f       	add	r18, r24
     e74:	39 1f       	adc	r19, r25
     e76:	3f 83       	std	Y+7, r19	; 0x07
     e78:	2e 83       	std	Y+6, r18	; 0x06
     e7a:	48 81       	ld	r20, Y
     e7c:	59 81       	ldd	r21, Y+1	; 0x01
     e7e:	24 17       	cp	r18, r20
     e80:	35 07       	cpc	r19, r21
     e82:	30 f4       	brcc	.+12     	; 0xe90 <prvCopyDataToQueue+0x94>
     e84:	2c 81       	ldd	r18, Y+4	; 0x04
     e86:	3d 81       	ldd	r19, Y+5	; 0x05
     e88:	82 0f       	add	r24, r18
     e8a:	93 1f       	adc	r25, r19
     e8c:	9f 83       	std	Y+7, r25	; 0x07
     e8e:	8e 83       	std	Y+6, r24	; 0x06
     e90:	02 30       	cpi	r16, 0x02	; 2
     e92:	49 f4       	brne	.+18     	; 0xea6 <prvCopyDataToQueue+0xaa>
     e94:	11 23       	and	r17, r17
     e96:	49 f0       	breq	.+18     	; 0xeaa <prvCopyDataToQueue+0xae>
     e98:	11 50       	subi	r17, 0x01	; 1
     e9a:	80 e0       	ldi	r24, 0x00	; 0
     e9c:	07 c0       	rjmp	.+14     	; 0xeac <prvCopyDataToQueue+0xb0>
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	05 c0       	rjmp	.+10     	; 0xeac <prvCopyDataToQueue+0xb0>
     ea2:	80 e0       	ldi	r24, 0x00	; 0
     ea4:	03 c0       	rjmp	.+6      	; 0xeac <prvCopyDataToQueue+0xb0>
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <prvCopyDataToQueue+0xb0>
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	1f 5f       	subi	r17, 0xFF	; 255
     eae:	1a 8f       	std	Y+26, r17	; 0x1a
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	08 95       	ret

00000eba <prvCopyDataFromQueue>:
     eba:	fc 01       	movw	r30, r24
     ebc:	44 8d       	ldd	r20, Z+28	; 0x1c
     ebe:	44 23       	and	r20, r20
     ec0:	a9 f0       	breq	.+42     	; 0xeec <prvCopyDataFromQueue+0x32>
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	26 81       	ldd	r18, Z+6	; 0x06
     ec6:	37 81       	ldd	r19, Z+7	; 0x07
     ec8:	24 0f       	add	r18, r20
     eca:	35 1f       	adc	r19, r21
     ecc:	37 83       	std	Z+7, r19	; 0x07
     ece:	26 83       	std	Z+6, r18	; 0x06
     ed0:	84 81       	ldd	r24, Z+4	; 0x04
     ed2:	95 81       	ldd	r25, Z+5	; 0x05
     ed4:	28 17       	cp	r18, r24
     ed6:	39 07       	cpc	r19, r25
     ed8:	20 f0       	brcs	.+8      	; 0xee2 <prvCopyDataFromQueue+0x28>
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	97 83       	std	Z+7, r25	; 0x07
     ee0:	86 83       	std	Z+6, r24	; 0x06
     ee2:	cb 01       	movw	r24, r22
     ee4:	66 81       	ldd	r22, Z+6	; 0x06
     ee6:	77 81       	ldd	r23, Z+7	; 0x07
     ee8:	0e 94 ef 16 	call	0x2dde	; 0x2dde <memcpy>
     eec:	08 95       	ret

00000eee <prvUnlockQueue>:
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	ec 01       	movw	r28, r24
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	f8 94       	cli
     efa:	0f 92       	push	r0
     efc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     efe:	0b c0       	rjmp	.+22     	; 0xf16 <prvUnlockQueue+0x28>
     f00:	89 89       	ldd	r24, Y+17	; 0x11
     f02:	88 23       	and	r24, r24
     f04:	51 f0       	breq	.+20     	; 0xf1a <prvUnlockQueue+0x2c>
     f06:	ce 01       	movw	r24, r28
     f08:	41 96       	adiw	r24, 0x11	; 17
     f0a:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
     f0e:	81 11       	cpse	r24, r1
     f10:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskMissedYield>
     f14:	11 50       	subi	r17, 0x01	; 1
     f16:	11 16       	cp	r1, r17
     f18:	9c f3       	brlt	.-26     	; 0xf00 <prvUnlockQueue+0x12>
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	8e 8f       	std	Y+30, r24	; 0x1e
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	0f 92       	push	r0
     f28:	1d 8d       	ldd	r17, Y+29	; 0x1d
     f2a:	0b c0       	rjmp	.+22     	; 0xf42 <prvUnlockQueue+0x54>
     f2c:	88 85       	ldd	r24, Y+8	; 0x08
     f2e:	88 23       	and	r24, r24
     f30:	51 f0       	breq	.+20     	; 0xf46 <prvUnlockQueue+0x58>
     f32:	ce 01       	movw	r24, r28
     f34:	08 96       	adiw	r24, 0x08	; 8
     f36:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
     f3a:	81 11       	cpse	r24, r1
     f3c:	0e 94 77 11 	call	0x22ee	; 0x22ee <vTaskMissedYield>
     f40:	11 50       	subi	r17, 0x01	; 1
     f42:	11 16       	cp	r1, r17
     f44:	9c f3       	brlt	.-26     	; 0xf2c <prvUnlockQueue+0x3e>
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	8d 8f       	std	Y+29, r24	; 0x1d
     f4a:	0f 90       	pop	r0
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	df 91       	pop	r29
     f50:	cf 91       	pop	r28
     f52:	1f 91       	pop	r17
     f54:	08 95       	ret

00000f56 <xQueueGenericReset>:
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
     f5e:	fc 01       	movw	r30, r24
     f60:	36 2f       	mov	r19, r22
     f62:	89 2b       	or	r24, r25
     f64:	09 f4       	brne	.+2      	; 0xf68 <xQueueGenericReset+0x12>
     f66:	4d c0       	rjmp	.+154    	; 0x1002 <xQueueGenericReset+0xac>
     f68:	23 8d       	ldd	r18, Z+27	; 0x1b
     f6a:	22 23       	and	r18, r18
     f6c:	09 f4       	brne	.+2      	; 0xf70 <xQueueGenericReset+0x1a>
     f6e:	4b c0       	rjmp	.+150    	; 0x1006 <xQueueGenericReset+0xb0>
     f70:	02 2f       	mov	r16, r18
     f72:	10 e0       	ldi	r17, 0x00	; 0
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	b8 01       	movw	r22, r16
     f7a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__udivmodhi4>
     f7e:	44 8d       	ldd	r20, Z+28	; 0x1c
     f80:	84 2f       	mov	r24, r20
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	68 17       	cp	r22, r24
     f86:	79 07       	cpc	r23, r25
     f88:	08 f4       	brcc	.+2      	; 0xf8c <xQueueGenericReset+0x36>
     f8a:	3f c0       	rjmp	.+126    	; 0x100a <xQueueGenericReset+0xb4>
     f8c:	ef 01       	movw	r28, r30
     f8e:	0f b6       	in	r0, 0x3f	; 63
     f90:	f8 94       	cli
     f92:	0f 92       	push	r0
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	fb 01       	movw	r30, r22
     f9a:	24 9f       	mul	r18, r20
     f9c:	e0 0d       	add	r30, r0
     f9e:	f1 1d       	adc	r31, r1
     fa0:	11 24       	eor	r1, r1
     fa2:	fd 83       	std	Y+5, r31	; 0x05
     fa4:	ec 83       	std	Y+4, r30	; 0x04
     fa6:	1a 8e       	std	Y+26, r1	; 0x1a
     fa8:	7b 83       	std	Y+3, r23	; 0x03
     faa:	6a 83       	std	Y+2, r22	; 0x02
     fac:	01 50       	subi	r16, 0x01	; 1
     fae:	11 09       	sbc	r17, r1
     fb0:	80 9f       	mul	r24, r16
     fb2:	a0 01       	movw	r20, r0
     fb4:	81 9f       	mul	r24, r17
     fb6:	50 0d       	add	r21, r0
     fb8:	90 9f       	mul	r25, r16
     fba:	50 0d       	add	r21, r0
     fbc:	11 24       	eor	r1, r1
     fbe:	cb 01       	movw	r24, r22
     fc0:	84 0f       	add	r24, r20
     fc2:	95 1f       	adc	r25, r21
     fc4:	9f 83       	std	Y+7, r25	; 0x07
     fc6:	8e 83       	std	Y+6, r24	; 0x06
     fc8:	8f ef       	ldi	r24, 0xFF	; 255
     fca:	8d 8f       	std	Y+29, r24	; 0x1d
     fcc:	8e 8f       	std	Y+30, r24	; 0x1e
     fce:	31 11       	cpse	r19, r1
     fd0:	0c c0       	rjmp	.+24     	; 0xfea <xQueueGenericReset+0x94>
     fd2:	88 85       	ldd	r24, Y+8	; 0x08
     fd4:	88 23       	and	r24, r24
     fd6:	89 f0       	breq	.+34     	; 0xffa <xQueueGenericReset+0xa4>
     fd8:	ce 01       	movw	r24, r28
     fda:	08 96       	adiw	r24, 0x08	; 8
     fdc:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
     fe0:	88 23       	and	r24, r24
     fe2:	59 f0       	breq	.+22     	; 0xffa <xQueueGenericReset+0xa4>
     fe4:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <xQueueGenericReset+0xa4>
     fea:	ce 01       	movw	r24, r28
     fec:	08 96       	adiw	r24, 0x08	; 8
     fee:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     ff2:	ce 01       	movw	r24, r28
     ff4:	41 96       	adiw	r24, 0x11	; 17
     ff6:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
     ffa:	0f 90       	pop	r0
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	05 c0       	rjmp	.+10     	; 0x100c <xQueueGenericReset+0xb6>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	03 c0       	rjmp	.+6      	; 0x100c <xQueueGenericReset+0xb6>
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	01 c0       	rjmp	.+2      	; 0x100c <xQueueGenericReset+0xb6>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <prvInitialiseNewQueue>:
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	f8 01       	movw	r30, r16
    101c:	61 11       	cpse	r22, r1
    101e:	03 c0       	rjmp	.+6      	; 0x1026 <prvInitialiseNewQueue+0x10>
    1020:	11 83       	std	Z+1, r17	; 0x01
    1022:	00 83       	st	Z, r16
    1024:	02 c0       	rjmp	.+4      	; 0x102a <prvInitialiseNewQueue+0x14>
    1026:	51 83       	std	Z+1, r21	; 0x01
    1028:	40 83       	st	Z, r20
    102a:	83 8f       	std	Z+27, r24	; 0x1b
    102c:	64 8f       	std	Z+28, r22	; 0x1c
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	cf 01       	movw	r24, r30
    1032:	0e 94 ab 07 	call	0xf56	; 0xf56 <xQueueGenericReset>
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	08 95       	ret

0000103c <xQueueGenericCreate>:
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
    104a:	38 2f       	mov	r19, r24
    104c:	e6 2f       	mov	r30, r22
    104e:	88 23       	and	r24, r24
    1050:	29 f1       	breq	.+74     	; 0x109c <xQueueGenericCreate+0x60>
    1052:	68 2f       	mov	r22, r24
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	8f ef       	ldi	r24, 0xFF	; 255
    1058:	9f ef       	ldi	r25, 0xFF	; 255
    105a:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <__udivmodhi4>
    105e:	8e 2f       	mov	r24, r30
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	68 17       	cp	r22, r24
    1064:	79 07       	cpc	r23, r25
    1066:	e8 f0       	brcs	.+58     	; 0x10a2 <xQueueGenericCreate+0x66>
    1068:	3e 9f       	mul	r19, r30
    106a:	c0 01       	movw	r24, r0
    106c:	11 24       	eor	r1, r1
    106e:	81 3e       	cpi	r24, 0xE1	; 225
    1070:	2f ef       	ldi	r18, 0xFF	; 255
    1072:	92 07       	cpc	r25, r18
    1074:	c8 f4       	brcc	.+50     	; 0x10a8 <xQueueGenericCreate+0x6c>
    1076:	d4 2e       	mov	r13, r20
    1078:	de 2f       	mov	r29, r30
    107a:	c3 2f       	mov	r28, r19
    107c:	4f 96       	adiw	r24, 0x1f	; 31
    107e:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    1082:	7c 01       	movw	r14, r24
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	91 f0       	breq	.+36     	; 0x10ac <xQueueGenericCreate+0x70>
    1088:	8c 01       	movw	r16, r24
    108a:	2d 2d       	mov	r18, r13
    108c:	ac 01       	movw	r20, r24
    108e:	41 5e       	subi	r20, 0xE1	; 225
    1090:	5f 4f       	sbci	r21, 0xFF	; 255
    1092:	6d 2f       	mov	r22, r29
    1094:	8c 2f       	mov	r24, r28
    1096:	0e 94 0b 08 	call	0x1016	; 0x1016 <prvInitialiseNewQueue>
    109a:	08 c0       	rjmp	.+16     	; 0x10ac <xQueueGenericCreate+0x70>
    109c:	e1 2c       	mov	r14, r1
    109e:	f1 2c       	mov	r15, r1
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <xQueueGenericCreate+0x70>
    10a2:	e1 2c       	mov	r14, r1
    10a4:	f1 2c       	mov	r15, r1
    10a6:	02 c0       	rjmp	.+4      	; 0x10ac <xQueueGenericCreate+0x70>
    10a8:	e1 2c       	mov	r14, r1
    10aa:	f1 2c       	mov	r15, r1
    10ac:	c7 01       	movw	r24, r14
    10ae:	df 91       	pop	r29
    10b0:	cf 91       	pop	r28
    10b2:	1f 91       	pop	r17
    10b4:	0f 91       	pop	r16
    10b6:	ff 90       	pop	r15
    10b8:	ef 90       	pop	r14
    10ba:	df 90       	pop	r13
    10bc:	08 95       	ret

000010be <xQueueGenericSend>:
    10be:	cf 92       	push	r12
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 d0       	rcall	.+0      	; 0x10d0 <xQueueGenericSend+0x12>
    10d0:	00 d0       	rcall	.+0      	; 0x10d2 <xQueueGenericSend+0x14>
    10d2:	1f 92       	push	r1
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	8c 01       	movw	r16, r24
    10da:	7b 01       	movw	r14, r22
    10dc:	5d 83       	std	Y+5, r21	; 0x05
    10de:	4c 83       	std	Y+4, r20	; 0x04
    10e0:	c2 2e       	mov	r12, r18
    10e2:	d1 2c       	mov	r13, r1
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	0f 92       	push	r0
    10ea:	f8 01       	movw	r30, r16
    10ec:	92 8d       	ldd	r25, Z+26	; 0x1a
    10ee:	83 8d       	ldd	r24, Z+27	; 0x1b
    10f0:	98 17       	cp	r25, r24
    10f2:	18 f0       	brcs	.+6      	; 0x10fa <xQueueGenericSend+0x3c>
    10f4:	f2 e0       	ldi	r31, 0x02	; 2
    10f6:	cf 12       	cpse	r12, r31
    10f8:	19 c0       	rjmp	.+50     	; 0x112c <xQueueGenericSend+0x6e>
    10fa:	4c 2d       	mov	r20, r12
    10fc:	b7 01       	movw	r22, r14
    10fe:	c8 01       	movw	r24, r16
    1100:	0e 94 fe 06 	call	0xdfc	; 0xdfc <prvCopyDataToQueue>
    1104:	f8 01       	movw	r30, r16
    1106:	91 89       	ldd	r25, Z+17	; 0x11
    1108:	99 23       	and	r25, r25
    110a:	49 f0       	breq	.+18     	; 0x111e <xQueueGenericSend+0x60>
    110c:	c8 01       	movw	r24, r16
    110e:	41 96       	adiw	r24, 0x11	; 17
    1110:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
    1114:	88 23       	and	r24, r24
    1116:	31 f0       	breq	.+12     	; 0x1124 <xQueueGenericSend+0x66>
    1118:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    111c:	03 c0       	rjmp	.+6      	; 0x1124 <xQueueGenericSend+0x66>
    111e:	81 11       	cpse	r24, r1
    1120:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1124:	0f 90       	pop	r0
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	4d c0       	rjmp	.+154    	; 0x11c6 <xQueueGenericSend+0x108>
    112c:	8c 81       	ldd	r24, Y+4	; 0x04
    112e:	9d 81       	ldd	r25, Y+5	; 0x05
    1130:	89 2b       	or	r24, r25
    1132:	21 f4       	brne	.+8      	; 0x113c <xQueueGenericSend+0x7e>
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	80 e0       	ldi	r24, 0x00	; 0
    113a:	45 c0       	rjmp	.+138    	; 0x11c6 <xQueueGenericSend+0x108>
    113c:	d1 10       	cpse	r13, r1
    113e:	06 c0       	rjmp	.+12     	; 0x114c <xQueueGenericSend+0x8e>
    1140:	ce 01       	movw	r24, r28
    1142:	01 96       	adiw	r24, 0x01	; 1
    1144:	0e 94 2d 11 	call	0x225a	; 0x225a <vTaskInternalSetTimeOutState>
    1148:	dd 24       	eor	r13, r13
    114a:	d3 94       	inc	r13
    114c:	0f 90       	pop	r0
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	f8 94       	cli
    1158:	0f 92       	push	r0
    115a:	f8 01       	movw	r30, r16
    115c:	85 8d       	ldd	r24, Z+29	; 0x1d
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	09 f4       	brne	.+2      	; 0x1164 <xQueueGenericSend+0xa6>
    1162:	15 8e       	std	Z+29, r1	; 0x1d
    1164:	f8 01       	movw	r30, r16
    1166:	86 8d       	ldd	r24, Z+30	; 0x1e
    1168:	8f 3f       	cpi	r24, 0xFF	; 255
    116a:	09 f4       	brne	.+2      	; 0x116e <xQueueGenericSend+0xb0>
    116c:	16 8e       	std	Z+30, r1	; 0x1e
    116e:	0f 90       	pop	r0
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	be 01       	movw	r22, r28
    1174:	6c 5f       	subi	r22, 0xFC	; 252
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	ce 01       	movw	r24, r28
    117a:	01 96       	adiw	r24, 0x01	; 1
    117c:	0e 94 38 11 	call	0x2270	; 0x2270 <xTaskCheckForTimeOut>
    1180:	81 11       	cpse	r24, r1
    1182:	1b c0       	rjmp	.+54     	; 0x11ba <xQueueGenericSend+0xfc>
    1184:	c8 01       	movw	r24, r16
    1186:	0e 94 f0 06 	call	0xde0	; 0xde0 <prvIsQueueFull>
    118a:	88 23       	and	r24, r24
    118c:	81 f0       	breq	.+32     	; 0x11ae <xQueueGenericSend+0xf0>
    118e:	6c 81       	ldd	r22, Y+4	; 0x04
    1190:	7d 81       	ldd	r23, Y+5	; 0x05
    1192:	c8 01       	movw	r24, r16
    1194:	08 96       	adiw	r24, 0x08	; 8
    1196:	0e 94 15 10 	call	0x202a	; 0x202a <vTaskPlaceOnEventList>
    119a:	c8 01       	movw	r24, r16
    119c:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    11a0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    11a4:	81 11       	cpse	r24, r1
    11a6:	9e cf       	rjmp	.-196    	; 0x10e4 <xQueueGenericSend+0x26>
    11a8:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    11ac:	9b cf       	rjmp	.-202    	; 0x10e4 <xQueueGenericSend+0x26>
    11ae:	c8 01       	movw	r24, r16
    11b0:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    11b4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    11b8:	95 cf       	rjmp	.-214    	; 0x10e4 <xQueueGenericSend+0x26>
    11ba:	c8 01       	movw	r24, r16
    11bc:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    11c0:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    11c4:	80 e0       	ldi	r24, 0x00	; 0
    11c6:	0f 90       	pop	r0
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	08 95       	ret

000011e2 <xQueueReceive>:
    11e2:	cf 92       	push	r12
    11e4:	df 92       	push	r13
    11e6:	ef 92       	push	r14
    11e8:	ff 92       	push	r15
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	cf 93       	push	r28
    11f0:	df 93       	push	r29
    11f2:	00 d0       	rcall	.+0      	; 0x11f4 <xQueueReceive+0x12>
    11f4:	00 d0       	rcall	.+0      	; 0x11f6 <xQueueReceive+0x14>
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	8c 01       	movw	r16, r24
    11fe:	6b 01       	movw	r12, r22
    1200:	5d 83       	std	Y+5, r21	; 0x05
    1202:	4c 83       	std	Y+4, r20	; 0x04
    1204:	e1 2c       	mov	r14, r1
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	0f 92       	push	r0
    120c:	f8 01       	movw	r30, r16
    120e:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1210:	ff 20       	and	r15, r15
    1212:	a9 f0       	breq	.+42     	; 0x123e <xQueueReceive+0x5c>
    1214:	b6 01       	movw	r22, r12
    1216:	c8 01       	movw	r24, r16
    1218:	0e 94 5d 07 	call	0xeba	; 0xeba <prvCopyDataFromQueue>
    121c:	fa 94       	dec	r15
    121e:	f8 01       	movw	r30, r16
    1220:	f2 8e       	std	Z+26, r15	; 0x1a
    1222:	80 85       	ldd	r24, Z+8	; 0x08
    1224:	88 23       	and	r24, r24
    1226:	39 f0       	breq	.+14     	; 0x1236 <xQueueReceive+0x54>
    1228:	c8 01       	movw	r24, r16
    122a:	08 96       	adiw	r24, 0x08	; 8
    122c:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
    1230:	81 11       	cpse	r24, r1
    1232:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	53 c0       	rjmp	.+166    	; 0x12e4 <xQueueReceive+0x102>
    123e:	8c 81       	ldd	r24, Y+4	; 0x04
    1240:	9d 81       	ldd	r25, Y+5	; 0x05
    1242:	89 2b       	or	r24, r25
    1244:	21 f4       	brne	.+8      	; 0x124e <xQueueReceive+0x6c>
    1246:	0f 90       	pop	r0
    1248:	0f be       	out	0x3f, r0	; 63
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	4b c0       	rjmp	.+150    	; 0x12e4 <xQueueReceive+0x102>
    124e:	e1 10       	cpse	r14, r1
    1250:	06 c0       	rjmp	.+12     	; 0x125e <xQueueReceive+0x7c>
    1252:	ce 01       	movw	r24, r28
    1254:	01 96       	adiw	r24, 0x01	; 1
    1256:	0e 94 2d 11 	call	0x225a	; 0x225a <vTaskInternalSetTimeOutState>
    125a:	ee 24       	eor	r14, r14
    125c:	e3 94       	inc	r14
    125e:	0f 90       	pop	r0
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	0f 92       	push	r0
    126c:	f8 01       	movw	r30, r16
    126e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1270:	8f 3f       	cpi	r24, 0xFF	; 255
    1272:	09 f4       	brne	.+2      	; 0x1276 <xQueueReceive+0x94>
    1274:	15 8e       	std	Z+29, r1	; 0x1d
    1276:	f8 01       	movw	r30, r16
    1278:	86 8d       	ldd	r24, Z+30	; 0x1e
    127a:	8f 3f       	cpi	r24, 0xFF	; 255
    127c:	09 f4       	brne	.+2      	; 0x1280 <xQueueReceive+0x9e>
    127e:	16 8e       	std	Z+30, r1	; 0x1e
    1280:	0f 90       	pop	r0
    1282:	0f be       	out	0x3f, r0	; 63
    1284:	be 01       	movw	r22, r28
    1286:	6c 5f       	subi	r22, 0xFC	; 252
    1288:	7f 4f       	sbci	r23, 0xFF	; 255
    128a:	ce 01       	movw	r24, r28
    128c:	01 96       	adiw	r24, 0x01	; 1
    128e:	0e 94 38 11 	call	0x2270	; 0x2270 <xTaskCheckForTimeOut>
    1292:	81 11       	cpse	r24, r1
    1294:	1b c0       	rjmp	.+54     	; 0x12cc <xQueueReceive+0xea>
    1296:	c8 01       	movw	r24, r16
    1298:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <prvIsQueueEmpty>
    129c:	88 23       	and	r24, r24
    129e:	81 f0       	breq	.+32     	; 0x12c0 <xQueueReceive+0xde>
    12a0:	6c 81       	ldd	r22, Y+4	; 0x04
    12a2:	7d 81       	ldd	r23, Y+5	; 0x05
    12a4:	c8 01       	movw	r24, r16
    12a6:	41 96       	adiw	r24, 0x11	; 17
    12a8:	0e 94 15 10 	call	0x202a	; 0x202a <vTaskPlaceOnEventList>
    12ac:	c8 01       	movw	r24, r16
    12ae:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    12b2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    12b6:	81 11       	cpse	r24, r1
    12b8:	a6 cf       	rjmp	.-180    	; 0x1206 <xQueueReceive+0x24>
    12ba:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    12be:	a3 cf       	rjmp	.-186    	; 0x1206 <xQueueReceive+0x24>
    12c0:	c8 01       	movw	r24, r16
    12c2:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    12c6:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    12ca:	9d cf       	rjmp	.-198    	; 0x1206 <xQueueReceive+0x24>
    12cc:	c8 01       	movw	r24, r16
    12ce:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    12d2:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    12d6:	c8 01       	movw	r24, r16
    12d8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <prvIsQueueEmpty>
    12dc:	88 23       	and	r24, r24
    12de:	09 f4       	brne	.+2      	; 0x12e2 <xQueueReceive+0x100>
    12e0:	92 cf       	rjmp	.-220    	; 0x1206 <xQueueReceive+0x24>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	0f 90       	pop	r0
    12e6:	0f 90       	pop	r0
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	0f 91       	pop	r16
    12f6:	ff 90       	pop	r15
    12f8:	ef 90       	pop	r14
    12fa:	df 90       	pop	r13
    12fc:	cf 90       	pop	r12
    12fe:	08 95       	ret

00001300 <xQueueSemaphoreTake>:
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	00 d0       	rcall	.+0      	; 0x130e <xQueueSemaphoreTake+0xe>
    130e:	00 d0       	rcall	.+0      	; 0x1310 <xQueueSemaphoreTake+0x10>
    1310:	1f 92       	push	r1
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    1316:	8c 01       	movw	r16, r24
    1318:	7d 83       	std	Y+5, r23	; 0x05
    131a:	6c 83       	std	Y+4, r22	; 0x04
    131c:	e1 2c       	mov	r14, r1
    131e:	f1 2c       	mov	r15, r1
    1320:	0f b6       	in	r0, 0x3f	; 63
    1322:	f8 94       	cli
    1324:	0f 92       	push	r0
    1326:	f8 01       	movw	r30, r16
    1328:	82 8d       	ldd	r24, Z+26	; 0x1a
    132a:	88 23       	and	r24, r24
    132c:	d1 f0       	breq	.+52     	; 0x1362 <xQueueSemaphoreTake+0x62>
    132e:	81 50       	subi	r24, 0x01	; 1
    1330:	82 8f       	std	Z+26, r24	; 0x1a
    1332:	80 81       	ld	r24, Z
    1334:	91 81       	ldd	r25, Z+1	; 0x01
    1336:	89 2b       	or	r24, r25
    1338:	29 f4       	brne	.+10     	; 0x1344 <xQueueSemaphoreTake+0x44>
    133a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <pvTaskIncrementMutexHeldCount>
    133e:	f8 01       	movw	r30, r16
    1340:	95 83       	std	Z+5, r25	; 0x05
    1342:	84 83       	std	Z+4, r24	; 0x04
    1344:	f8 01       	movw	r30, r16
    1346:	80 85       	ldd	r24, Z+8	; 0x08
    1348:	88 23       	and	r24, r24
    134a:	39 f0       	breq	.+14     	; 0x135a <xQueueSemaphoreTake+0x5a>
    134c:	c8 01       	movw	r24, r16
    134e:	08 96       	adiw	r24, 0x08	; 8
    1350:	0e 94 70 10 	call	0x20e0	; 0x20e0 <xTaskRemoveFromEventList>
    1354:	81 11       	cpse	r24, r1
    1356:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    135a:	0f 90       	pop	r0
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	74 c0       	rjmp	.+232    	; 0x144a <xQueueSemaphoreTake+0x14a>
    1362:	8c 81       	ldd	r24, Y+4	; 0x04
    1364:	9d 81       	ldd	r25, Y+5	; 0x05
    1366:	89 2b       	or	r24, r25
    1368:	21 f4       	brne	.+8      	; 0x1372 <xQueueSemaphoreTake+0x72>
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	6c c0       	rjmp	.+216    	; 0x144a <xQueueSemaphoreTake+0x14a>
    1372:	f1 10       	cpse	r15, r1
    1374:	06 c0       	rjmp	.+12     	; 0x1382 <xQueueSemaphoreTake+0x82>
    1376:	ce 01       	movw	r24, r28
    1378:	01 96       	adiw	r24, 0x01	; 1
    137a:	0e 94 2d 11 	call	0x225a	; 0x225a <vTaskInternalSetTimeOutState>
    137e:	ff 24       	eor	r15, r15
    1380:	f3 94       	inc	r15
    1382:	0f 90       	pop	r0
    1384:	0f be       	out	0x3f, r0	; 63
    1386:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	0f 92       	push	r0
    1390:	f8 01       	movw	r30, r16
    1392:	85 8d       	ldd	r24, Z+29	; 0x1d
    1394:	8f 3f       	cpi	r24, 0xFF	; 255
    1396:	09 f4       	brne	.+2      	; 0x139a <xQueueSemaphoreTake+0x9a>
    1398:	15 8e       	std	Z+29, r1	; 0x1d
    139a:	f8 01       	movw	r30, r16
    139c:	86 8d       	ldd	r24, Z+30	; 0x1e
    139e:	8f 3f       	cpi	r24, 0xFF	; 255
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <xQueueSemaphoreTake+0xa4>
    13a2:	16 8e       	std	Z+30, r1	; 0x1e
    13a4:	0f 90       	pop	r0
    13a6:	0f be       	out	0x3f, r0	; 63
    13a8:	be 01       	movw	r22, r28
    13aa:	6c 5f       	subi	r22, 0xFC	; 252
    13ac:	7f 4f       	sbci	r23, 0xFF	; 255
    13ae:	ce 01       	movw	r24, r28
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	0e 94 38 11 	call	0x2270	; 0x2270 <xTaskCheckForTimeOut>
    13b6:	81 11       	cpse	r24, r1
    13b8:	2a c0       	rjmp	.+84     	; 0x140e <xQueueSemaphoreTake+0x10e>
    13ba:	c8 01       	movw	r24, r16
    13bc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <prvIsQueueEmpty>
    13c0:	88 23       	and	r24, r24
    13c2:	f9 f0       	breq	.+62     	; 0x1402 <xQueueSemaphoreTake+0x102>
    13c4:	f8 01       	movw	r30, r16
    13c6:	80 81       	ld	r24, Z
    13c8:	91 81       	ldd	r25, Z+1	; 0x01
    13ca:	89 2b       	or	r24, r25
    13cc:	51 f4       	brne	.+20     	; 0x13e2 <xQueueSemaphoreTake+0xe2>
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	0f 92       	push	r0
    13d4:	84 81       	ldd	r24, Z+4	; 0x04
    13d6:	95 81       	ldd	r25, Z+5	; 0x05
    13d8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <xTaskPriorityInherit>
    13dc:	e8 2e       	mov	r14, r24
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	6c 81       	ldd	r22, Y+4	; 0x04
    13e4:	7d 81       	ldd	r23, Y+5	; 0x05
    13e6:	c8 01       	movw	r24, r16
    13e8:	41 96       	adiw	r24, 0x11	; 17
    13ea:	0e 94 15 10 	call	0x202a	; 0x202a <vTaskPlaceOnEventList>
    13ee:	c8 01       	movw	r24, r16
    13f0:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    13f4:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    13f8:	81 11       	cpse	r24, r1
    13fa:	92 cf       	rjmp	.-220    	; 0x1320 <xQueueSemaphoreTake+0x20>
    13fc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1400:	8f cf       	rjmp	.-226    	; 0x1320 <xQueueSemaphoreTake+0x20>
    1402:	c8 01       	movw	r24, r16
    1404:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    1408:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    140c:	89 cf       	rjmp	.-238    	; 0x1320 <xQueueSemaphoreTake+0x20>
    140e:	c8 01       	movw	r24, r16
    1410:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    1414:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    1418:	c8 01       	movw	r24, r16
    141a:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <prvIsQueueEmpty>
    141e:	88 23       	and	r24, r24
    1420:	09 f4       	brne	.+2      	; 0x1424 <xQueueSemaphoreTake+0x124>
    1422:	7e cf       	rjmp	.-260    	; 0x1320 <xQueueSemaphoreTake+0x20>
    1424:	ee 20       	and	r14, r14
    1426:	81 f0       	breq	.+32     	; 0x1448 <xQueueSemaphoreTake+0x148>
    1428:	0f b6       	in	r0, 0x3f	; 63
    142a:	f8 94       	cli
    142c:	0f 92       	push	r0
    142e:	c8 01       	movw	r24, r16
    1430:	0e 94 d3 06 	call	0xda6	; 0xda6 <prvGetDisinheritPriorityAfterTimeout>
    1434:	68 2f       	mov	r22, r24
    1436:	f8 01       	movw	r30, r16
    1438:	84 81       	ldd	r24, Z+4	; 0x04
    143a:	95 81       	ldd	r25, Z+5	; 0x05
    143c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <vTaskPriorityDisinheritAfterTimeout>
    1440:	0f 90       	pop	r0
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	80 e0       	ldi	r24, 0x00	; 0
    1446:	01 c0       	rjmp	.+2      	; 0x144a <xQueueSemaphoreTake+0x14a>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	08 95       	ret

00001462 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1462:	cf 93       	push	r28
    1464:	df 93       	push	r29
    1466:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	0f 92       	push	r0
    146e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1470:	8f 3f       	cpi	r24, 0xFF	; 255
    1472:	09 f4       	brne	.+2      	; 0x1476 <vQueueWaitForMessageRestricted+0x14>
    1474:	1d 8e       	std	Y+29, r1	; 0x1d
    1476:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1478:	8f 3f       	cpi	r24, 0xFF	; 255
    147a:	09 f4       	brne	.+2      	; 0x147e <vQueueWaitForMessageRestricted+0x1c>
    147c:	1e 8e       	std	Y+30, r1	; 0x1e
    147e:	0f 90       	pop	r0
    1480:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1482:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1484:	81 11       	cpse	r24, r1
    1486:	04 c0       	rjmp	.+8      	; 0x1490 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1488:	ce 01       	movw	r24, r28
    148a:	41 96       	adiw	r24, 0x11	; 17
    148c:	0e 94 27 10 	call	0x204e	; 0x204e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1490:	ce 01       	movw	r24, r28
    1492:	0e 94 77 07 	call	0xeee	; 0xeee <prvUnlockQueue>
    }
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <prvTaskIsTaskSuspended>:
    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

    return uxReturn;
}
    149c:	fc 01       	movw	r30, r24
    149e:	22 85       	ldd	r18, Z+10	; 0x0a
    14a0:	33 85       	ldd	r19, Z+11	; 0x0b
    14a2:	2b 5e       	subi	r18, 0xEB	; 235
    14a4:	34 40       	sbci	r19, 0x04	; 4
    14a6:	59 f4       	brne	.+22     	; 0x14be <prvTaskIsTaskSuspended+0x22>
    14a8:	fc 01       	movw	r30, r24
    14aa:	84 89       	ldd	r24, Z+20	; 0x14
    14ac:	95 89       	ldd	r25, Z+21	; 0x15
    14ae:	f4 e0       	ldi	r31, 0x04	; 4
    14b0:	8e 3f       	cpi	r24, 0xFE	; 254
    14b2:	9f 07       	cpc	r25, r31
    14b4:	31 f0       	breq	.+12     	; 0x14c2 <prvTaskIsTaskSuspended+0x26>
    14b6:	89 2b       	or	r24, r25
    14b8:	31 f0       	breq	.+12     	; 0x14c6 <prvTaskIsTaskSuspended+0x2a>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	08 95       	ret
    14be:	80 e0       	ldi	r24, 0x00	; 0
    14c0:	08 95       	ret
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	08 95       	ret
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	08 95       	ret

000014ca <prvResetNextTaskUnblockTime>:
    14ca:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <pxDelayedTaskList>
    14ce:	f0 91 0a 05 	lds	r31, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    14d2:	80 81       	ld	r24, Z
    14d4:	81 11       	cpse	r24, r1
    14d6:	07 c0       	rjmp	.+14     	; 0x14e6 <prvResetNextTaskUnblockTime+0x1c>
    14d8:	8f ef       	ldi	r24, 0xFF	; 255
    14da:	9f ef       	ldi	r25, 0xFF	; 255
    14dc:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    14e0:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <xNextTaskUnblockTime>
    14e4:	08 95       	ret
    14e6:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <pxDelayedTaskList>
    14ea:	f0 91 0a 05 	lds	r31, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    14ee:	05 80       	ldd	r0, Z+5	; 0x05
    14f0:	f6 81       	ldd	r31, Z+6	; 0x06
    14f2:	e0 2d       	mov	r30, r0
    14f4:	80 81       	ld	r24, Z
    14f6:	91 81       	ldd	r25, Z+1	; 0x01
    14f8:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    14fc:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <xNextTaskUnblockTime>
    1500:	08 95       	ret

00001502 <prvDeleteTCB>:
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	ec 01       	movw	r28, r24
    1508:	8f 89       	ldd	r24, Y+23	; 0x17
    150a:	98 8d       	ldd	r25, Y+24	; 0x18
    150c:	0e 94 9f 00 	call	0x13e	; 0x13e <vPortFree>
    1510:	ce 01       	movw	r24, r28
    1512:	0e 94 9f 00 	call	0x13e	; 0x13e <vPortFree>
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <prvInitialiseNewTask>:
    151c:	6f 92       	push	r6
    151e:	7f 92       	push	r7
    1520:	8f 92       	push	r8
    1522:	9f 92       	push	r9
    1524:	af 92       	push	r10
    1526:	bf 92       	push	r11
    1528:	cf 92       	push	r12
    152a:	df 92       	push	r13
    152c:	ef 92       	push	r14
    152e:	0f 93       	push	r16
    1530:	1f 93       	push	r17
    1532:	cf 93       	push	r28
    1534:	df 93       	push	r29
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	4c 01       	movw	r8, r24
    153c:	f5 01       	movw	r30, r10
    153e:	87 89       	ldd	r24, Z+23	; 0x17
    1540:	90 8d       	ldd	r25, Z+24	; 0x18
    1542:	21 50       	subi	r18, 0x01	; 1
    1544:	31 09       	sbc	r19, r1
    1546:	3c 01       	movw	r6, r24
    1548:	62 0e       	add	r6, r18
    154a:	73 1e       	adc	r7, r19
    154c:	61 15       	cp	r22, r1
    154e:	71 05       	cpc	r23, r1
    1550:	89 f4       	brne	.+34     	; 0x1574 <prvInitialiseNewTask+0x58>
    1552:	15 c0       	rjmp	.+42     	; 0x157e <prvInitialiseNewTask+0x62>
    1554:	82 2f       	mov	r24, r18
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	fb 01       	movw	r30, r22
    155a:	e8 0f       	add	r30, r24
    155c:	f9 1f       	adc	r31, r25
    155e:	30 81       	ld	r19, Z
    1560:	d5 01       	movw	r26, r10
    1562:	a8 0f       	add	r26, r24
    1564:	b9 1f       	adc	r27, r25
    1566:	59 96       	adiw	r26, 0x19	; 25
    1568:	3c 93       	st	X, r19
    156a:	80 81       	ld	r24, Z
    156c:	88 23       	and	r24, r24
    156e:	29 f0       	breq	.+10     	; 0x157a <prvInitialiseNewTask+0x5e>
    1570:	2f 5f       	subi	r18, 0xFF	; 255
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <prvInitialiseNewTask+0x5a>
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	28 30       	cpi	r18, 0x08	; 8
    1578:	68 f3       	brcs	.-38     	; 0x1554 <prvInitialiseNewTask+0x38>
    157a:	f5 01       	movw	r30, r10
    157c:	10 a2       	std	Z+32, r1	; 0x20
    157e:	f3 e0       	ldi	r31, 0x03	; 3
    1580:	fe 15       	cp	r31, r14
    1582:	20 f4       	brcc	.+8      	; 0x158c <prvInitialiseNewTask+0x70>
    1584:	0f 2e       	mov	r0, r31
    1586:	f3 e0       	ldi	r31, 0x03	; 3
    1588:	ef 2e       	mov	r14, r31
    158a:	f0 2d       	mov	r31, r0
    158c:	f5 01       	movw	r30, r10
    158e:	e6 8a       	std	Z+22, r14	; 0x16
    1590:	e1 a2       	std	Z+33, r14	; 0x21
    1592:	c5 01       	movw	r24, r10
    1594:	02 96       	adiw	r24, 0x02	; 2
    1596:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialiseItem>
    159a:	c5 01       	movw	r24, r10
    159c:	0c 96       	adiw	r24, 0x0c	; 12
    159e:	0e 94 af 02 	call	0x55e	; 0x55e <vListInitialiseItem>
    15a2:	f5 01       	movw	r30, r10
    15a4:	b1 86       	std	Z+9, r11	; 0x09
    15a6:	a0 86       	std	Z+8, r10	; 0x08
    15a8:	84 e0       	ldi	r24, 0x04	; 4
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	8e 19       	sub	r24, r14
    15ae:	91 09       	sbc	r25, r1
    15b0:	95 87       	std	Z+13, r25	; 0x0d
    15b2:	84 87       	std	Z+12, r24	; 0x0c
    15b4:	b3 8a       	std	Z+19, r11	; 0x13
    15b6:	a2 8a       	std	Z+18, r10	; 0x12
    15b8:	a8 01       	movw	r20, r16
    15ba:	b4 01       	movw	r22, r8
    15bc:	c3 01       	movw	r24, r6
    15be:	0e 94 4e 05 	call	0xa9c	; 0xa9c <pxPortInitialiseStack>
    15c2:	f5 01       	movw	r30, r10
    15c4:	91 83       	std	Z+1, r25	; 0x01
    15c6:	80 83       	st	Z, r24
    15c8:	c1 14       	cp	r12, r1
    15ca:	d1 04       	cpc	r13, r1
    15cc:	19 f0       	breq	.+6      	; 0x15d4 <prvInitialiseNewTask+0xb8>
    15ce:	f6 01       	movw	r30, r12
    15d0:	b1 82       	std	Z+1, r11	; 0x01
    15d2:	a0 82       	st	Z, r10
    15d4:	df 91       	pop	r29
    15d6:	cf 91       	pop	r28
    15d8:	1f 91       	pop	r17
    15da:	0f 91       	pop	r16
    15dc:	ef 90       	pop	r14
    15de:	df 90       	pop	r13
    15e0:	cf 90       	pop	r12
    15e2:	bf 90       	pop	r11
    15e4:	af 90       	pop	r10
    15e6:	9f 90       	pop	r9
    15e8:	8f 90       	pop	r8
    15ea:	7f 90       	pop	r7
    15ec:	6f 90       	pop	r6
    15ee:	08 95       	ret

000015f0 <prvInitialiseTaskLists>:
    15f0:	cf 93       	push	r28
    15f2:	c0 e0       	ldi	r28, 0x00	; 0
    15f4:	10 c0       	rjmp	.+32     	; 0x1616 <prvInitialiseTaskLists+0x26>
    15f6:	8c 2f       	mov	r24, r28
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	9c 01       	movw	r18, r24
    15fc:	22 0f       	add	r18, r18
    15fe:	33 1f       	adc	r19, r19
    1600:	22 0f       	add	r18, r18
    1602:	33 1f       	adc	r19, r19
    1604:	22 0f       	add	r18, r18
    1606:	33 1f       	adc	r19, r19
    1608:	82 0f       	add	r24, r18
    160a:	93 1f       	adc	r25, r19
    160c:	83 5e       	subi	r24, 0xE3	; 227
    160e:	9a 4f       	sbci	r25, 0xFA	; 250
    1610:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    1614:	cf 5f       	subi	r28, 0xFF	; 255
    1616:	c4 30       	cpi	r28, 0x04	; 4
    1618:	70 f3       	brcs	.-36     	; 0x15f6 <prvInitialiseTaskLists+0x6>
    161a:	84 e1       	ldi	r24, 0x14	; 20
    161c:	95 e0       	ldi	r25, 0x05	; 5
    161e:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    1622:	8b e0       	ldi	r24, 0x0B	; 11
    1624:	95 e0       	ldi	r25, 0x05	; 5
    1626:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    162a:	8e ef       	ldi	r24, 0xFE	; 254
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    1632:	85 ef       	ldi	r24, 0xF5	; 245
    1634:	94 e0       	ldi	r25, 0x04	; 4
    1636:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    163a:	8b ee       	ldi	r24, 0xEB	; 235
    163c:	94 e0       	ldi	r25, 0x04	; 4
    163e:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    1642:	84 e1       	ldi	r24, 0x14	; 20
    1644:	95 e0       	ldi	r25, 0x05	; 5
    1646:	90 93 0a 05 	sts	0x050A, r25	; 0x80050a <pxDelayedTaskList+0x1>
    164a:	80 93 09 05 	sts	0x0509, r24	; 0x800509 <pxDelayedTaskList>
    164e:	8b e0       	ldi	r24, 0x0B	; 11
    1650:	95 e0       	ldi	r25, 0x05	; 5
    1652:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <pxOverflowDelayedTaskList+0x1>
    1656:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <pxOverflowDelayedTaskList>
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <prvAddNewTaskToReadyList>:
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	0f 92       	push	r0
    166a:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <uxCurrentNumberOfTasks>
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <uxCurrentNumberOfTasks>
    1674:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    1678:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    167c:	89 2b       	or	r24, r25
    167e:	59 f4       	brne	.+22     	; 0x1696 <prvAddNewTaskToReadyList+0x38>
    1680:	d0 93 42 05 	sts	0x0542, r29	; 0x800542 <pxCurrentTCB+0x1>
    1684:	c0 93 41 05 	sts	0x0541, r28	; 0x800541 <pxCurrentTCB>
    1688:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <uxCurrentNumberOfTasks>
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	99 f4       	brne	.+38     	; 0x16b6 <prvAddNewTaskToReadyList+0x58>
    1690:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <prvInitialiseTaskLists>
    1694:	10 c0       	rjmp	.+32     	; 0x16b6 <prvAddNewTaskToReadyList+0x58>
    1696:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSchedulerRunning>
    169a:	81 11       	cpse	r24, r1
    169c:	0c c0       	rjmp	.+24     	; 0x16b6 <prvAddNewTaskToReadyList+0x58>
    169e:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    16a2:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    16a6:	96 89       	ldd	r25, Z+22	; 0x16
    16a8:	8e 89       	ldd	r24, Y+22	; 0x16
    16aa:	89 17       	cp	r24, r25
    16ac:	20 f0       	brcs	.+8      	; 0x16b6 <prvAddNewTaskToReadyList+0x58>
    16ae:	d0 93 42 05 	sts	0x0542, r29	; 0x800542 <pxCurrentTCB+0x1>
    16b2:	c0 93 41 05 	sts	0x0541, r28	; 0x800541 <pxCurrentTCB>
    16b6:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <uxTaskNumber>
    16ba:	8f 5f       	subi	r24, 0xFF	; 255
    16bc:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <uxTaskNumber>
    16c0:	8e 89       	ldd	r24, Y+22	; 0x16
    16c2:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    16c6:	98 17       	cp	r25, r24
    16c8:	10 f4       	brcc	.+4      	; 0x16ce <prvAddNewTaskToReadyList+0x70>
    16ca:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	fc 01       	movw	r30, r24
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	ee 0f       	add	r30, r30
    16d8:	ff 1f       	adc	r31, r31
    16da:	ee 0f       	add	r30, r30
    16dc:	ff 1f       	adc	r31, r31
    16de:	8e 0f       	add	r24, r30
    16e0:	9f 1f       	adc	r25, r31
    16e2:	fc 01       	movw	r30, r24
    16e4:	e3 5e       	subi	r30, 0xE3	; 227
    16e6:	fa 4f       	sbci	r31, 0xFA	; 250
    16e8:	01 80       	ldd	r0, Z+1	; 0x01
    16ea:	f2 81       	ldd	r31, Z+2	; 0x02
    16ec:	e0 2d       	mov	r30, r0
    16ee:	fd 83       	std	Y+5, r31	; 0x05
    16f0:	ec 83       	std	Y+4, r30	; 0x04
    16f2:	84 81       	ldd	r24, Z+4	; 0x04
    16f4:	95 81       	ldd	r25, Z+5	; 0x05
    16f6:	9f 83       	std	Y+7, r25	; 0x07
    16f8:	8e 83       	std	Y+6, r24	; 0x06
    16fa:	a4 81       	ldd	r26, Z+4	; 0x04
    16fc:	b5 81       	ldd	r27, Z+5	; 0x05
    16fe:	ce 01       	movw	r24, r28
    1700:	02 96       	adiw	r24, 0x02	; 2
    1702:	13 96       	adiw	r26, 0x03	; 3
    1704:	9c 93       	st	X, r25
    1706:	8e 93       	st	-X, r24
    1708:	12 97       	sbiw	r26, 0x02	; 2
    170a:	95 83       	std	Z+5, r25	; 0x05
    170c:	84 83       	std	Z+4, r24	; 0x04
    170e:	ee 89       	ldd	r30, Y+22	; 0x16
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	cf 01       	movw	r24, r30
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	e8 0f       	add	r30, r24
    1722:	f9 1f       	adc	r31, r25
    1724:	e3 5e       	subi	r30, 0xE3	; 227
    1726:	fa 4f       	sbci	r31, 0xFA	; 250
    1728:	fb 87       	std	Y+11, r31	; 0x0b
    172a:	ea 87       	std	Y+10, r30	; 0x0a
    172c:	80 81       	ld	r24, Z
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 83       	st	Z, r24
    1732:	0f 90       	pop	r0
    1734:	0f be       	out	0x3f, r0	; 63
    1736:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSchedulerRunning>
    173a:	88 23       	and	r24, r24
    173c:	51 f0       	breq	.+20     	; 0x1752 <prvAddNewTaskToReadyList+0xf4>
    173e:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    1742:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1746:	96 89       	ldd	r25, Z+22	; 0x16
    1748:	8e 89       	ldd	r24, Y+22	; 0x16
    174a:	98 17       	cp	r25, r24
    174c:	10 f4       	brcc	.+4      	; 0x1752 <prvAddNewTaskToReadyList+0xf4>
    174e:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1752:	df 91       	pop	r29
    1754:	cf 91       	pop	r28
    1756:	08 95       	ret

00001758 <prvCheckTasksWaitingTermination>:
    1758:	cf 93       	push	r28
    175a:	df 93       	push	r29
    175c:	1c c0       	rjmp	.+56     	; 0x1796 <prvCheckTasksWaitingTermination+0x3e>
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	0f 92       	push	r0
    1764:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <xTasksWaitingTermination+0x5>
    1768:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <xTasksWaitingTermination+0x6>
    176c:	c6 81       	ldd	r28, Z+6	; 0x06
    176e:	d7 81       	ldd	r29, Z+7	; 0x07
    1770:	ce 01       	movw	r24, r28
    1772:	02 96       	adiw	r24, 0x02	; 2
    1774:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    1778:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <uxCurrentNumberOfTasks>
    177c:	81 50       	subi	r24, 0x01	; 1
    177e:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <uxCurrentNumberOfTasks>
    1782:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <uxDeletedTasksWaitingCleanUp>
    1786:	81 50       	subi	r24, 0x01	; 1
    1788:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <uxDeletedTasksWaitingCleanUp>
    178c:	0f 90       	pop	r0
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	ce 01       	movw	r24, r28
    1792:	0e 94 81 0a 	call	0x1502	; 0x1502 <prvDeleteTCB>
    1796:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <uxDeletedTasksWaitingCleanUp>
    179a:	81 11       	cpse	r24, r1
    179c:	e0 cf       	rjmp	.-64     	; 0x175e <prvCheckTasksWaitingTermination+0x6>
    179e:	df 91       	pop	r29
    17a0:	cf 91       	pop	r28
    17a2:	08 95       	ret

000017a4 <prvIdleTask>:
    17a4:	0e 94 ac 0b 	call	0x1758	; 0x1758 <prvCheckTasksWaitingTermination>
    17a8:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <pxReadyTasksLists>
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	d0 f3       	brcs	.-12     	; 0x17a4 <prvIdleTask>
    17b0:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    17b4:	f7 cf       	rjmp	.-18     	; 0x17a4 <prvIdleTask>

000017b6 <prvAddCurrentTaskToDelayedList>:
    17b6:	ff 92       	push	r15
    17b8:	0f 93       	push	r16
    17ba:	1f 93       	push	r17
    17bc:	cf 93       	push	r28
    17be:	df 93       	push	r29
    17c0:	ec 01       	movw	r28, r24
    17c2:	f6 2e       	mov	r15, r22
    17c4:	00 91 e8 04 	lds	r16, 0x04E8	; 0x8004e8 <xTickCount>
    17c8:	10 91 e9 04 	lds	r17, 0x04E9	; 0x8004e9 <xTickCount+0x1>
    17cc:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    17d0:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    17d4:	02 96       	adiw	r24, 0x02	; 2
    17d6:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    17da:	cf 3f       	cpi	r28, 0xFF	; 255
    17dc:	8f ef       	ldi	r24, 0xFF	; 255
    17de:	d8 07       	cpc	r29, r24
    17e0:	b1 f5       	brne	.+108    	; 0x184e <prvAddCurrentTaskToDelayedList+0x98>
    17e2:	ff 20       	and	r15, r15
    17e4:	a1 f1       	breq	.+104    	; 0x184e <prvAddCurrentTaskToDelayedList+0x98>
    17e6:	eb ee       	ldi	r30, 0xEB	; 235
    17e8:	f4 e0       	ldi	r31, 0x04	; 4
    17ea:	a1 81       	ldd	r26, Z+1	; 0x01
    17ec:	b2 81       	ldd	r27, Z+2	; 0x02
    17ee:	c0 91 41 05 	lds	r28, 0x0541	; 0x800541 <pxCurrentTCB>
    17f2:	d0 91 42 05 	lds	r29, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    17f6:	bd 83       	std	Y+5, r27	; 0x05
    17f8:	ac 83       	std	Y+4, r26	; 0x04
    17fa:	c0 91 41 05 	lds	r28, 0x0541	; 0x800541 <pxCurrentTCB>
    17fe:	d0 91 42 05 	lds	r29, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1802:	14 96       	adiw	r26, 0x04	; 4
    1804:	8d 91       	ld	r24, X+
    1806:	9c 91       	ld	r25, X
    1808:	15 97       	sbiw	r26, 0x05	; 5
    180a:	9f 83       	std	Y+7, r25	; 0x07
    180c:	8e 83       	std	Y+6, r24	; 0x06
    180e:	14 96       	adiw	r26, 0x04	; 4
    1810:	cd 91       	ld	r28, X+
    1812:	dc 91       	ld	r29, X
    1814:	15 97       	sbiw	r26, 0x05	; 5
    1816:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    181a:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    181e:	02 96       	adiw	r24, 0x02	; 2
    1820:	9b 83       	std	Y+3, r25	; 0x03
    1822:	8a 83       	std	Y+2, r24	; 0x02
    1824:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    1828:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    182c:	02 96       	adiw	r24, 0x02	; 2
    182e:	15 96       	adiw	r26, 0x05	; 5
    1830:	9c 93       	st	X, r25
    1832:	8e 93       	st	-X, r24
    1834:	14 97       	sbiw	r26, 0x04	; 4
    1836:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    183a:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    183e:	1b 96       	adiw	r26, 0x0b	; 11
    1840:	fc 93       	st	X, r31
    1842:	ee 93       	st	-X, r30
    1844:	1a 97       	sbiw	r26, 0x0a	; 10
    1846:	80 81       	ld	r24, Z
    1848:	8f 5f       	subi	r24, 0xFF	; 255
    184a:	80 83       	st	Z, r24
    184c:	2f c0       	rjmp	.+94     	; 0x18ac <prvAddCurrentTaskToDelayedList+0xf6>
    184e:	c0 0f       	add	r28, r16
    1850:	d1 1f       	adc	r29, r17
    1852:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    1856:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    185a:	d3 83       	std	Z+3, r29	; 0x03
    185c:	c2 83       	std	Z+2, r28	; 0x02
    185e:	c0 17       	cp	r28, r16
    1860:	d1 07       	cpc	r29, r17
    1862:	68 f4       	brcc	.+26     	; 0x187e <prvAddCurrentTaskToDelayedList+0xc8>
    1864:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <pxCurrentTCB>
    1868:	70 91 42 05 	lds	r23, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    186c:	80 91 07 05 	lds	r24, 0x0507	; 0x800507 <pxOverflowDelayedTaskList>
    1870:	90 91 08 05 	lds	r25, 0x0508	; 0x800508 <pxOverflowDelayedTaskList+0x1>
    1874:	6e 5f       	subi	r22, 0xFE	; 254
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vListInsert>
    187c:	17 c0       	rjmp	.+46     	; 0x18ac <prvAddCurrentTaskToDelayedList+0xf6>
    187e:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <pxCurrentTCB>
    1882:	70 91 42 05 	lds	r23, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1886:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <pxDelayedTaskList>
    188a:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    188e:	6e 5f       	subi	r22, 0xFE	; 254
    1890:	7f 4f       	sbci	r23, 0xFF	; 255
    1892:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vListInsert>
    1896:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xNextTaskUnblockTime>
    189a:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    189e:	c8 17       	cp	r28, r24
    18a0:	d9 07       	cpc	r29, r25
    18a2:	20 f4       	brcc	.+8      	; 0x18ac <prvAddCurrentTaskToDelayedList+0xf6>
    18a4:	d0 93 e0 04 	sts	0x04E0, r29	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    18a8:	c0 93 df 04 	sts	0x04DF, r28	; 0x8004df <xNextTaskUnblockTime>
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	08 95       	ret

000018b8 <xTaskCreate>:
    18b8:	2f 92       	push	r2
    18ba:	3f 92       	push	r3
    18bc:	4f 92       	push	r4
    18be:	5f 92       	push	r5
    18c0:	6f 92       	push	r6
    18c2:	7f 92       	push	r7
    18c4:	8f 92       	push	r8
    18c6:	9f 92       	push	r9
    18c8:	af 92       	push	r10
    18ca:	bf 92       	push	r11
    18cc:	cf 92       	push	r12
    18ce:	df 92       	push	r13
    18d0:	ef 92       	push	r14
    18d2:	ff 92       	push	r15
    18d4:	0f 93       	push	r16
    18d6:	1f 93       	push	r17
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	3c 01       	movw	r6, r24
    18de:	1b 01       	movw	r2, r22
    18e0:	5a 01       	movw	r10, r20
    18e2:	29 01       	movw	r4, r18
    18e4:	ca 01       	movw	r24, r20
    18e6:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    18ea:	6c 01       	movw	r12, r24
    18ec:	89 2b       	or	r24, r25
    18ee:	99 f0       	breq	.+38     	; 0x1916 <xTaskCreate+0x5e>
    18f0:	88 e2       	ldi	r24, 0x28	; 40
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 65 00 	call	0xca	; 0xca <pvPortMalloc>
    18f8:	ec 01       	movw	r28, r24
    18fa:	89 2b       	or	r24, r25
    18fc:	41 f0       	breq	.+16     	; 0x190e <xTaskCreate+0x56>
    18fe:	88 e2       	ldi	r24, 0x28	; 40
    1900:	fe 01       	movw	r30, r28
    1902:	11 92       	st	Z+, r1
    1904:	8a 95       	dec	r24
    1906:	e9 f7       	brne	.-6      	; 0x1902 <xTaskCreate+0x4a>
    1908:	d8 8e       	std	Y+24, r13	; 0x18
    190a:	cf 8a       	std	Y+23, r12	; 0x17
    190c:	06 c0       	rjmp	.+12     	; 0x191a <xTaskCreate+0x62>
    190e:	c6 01       	movw	r24, r12
    1910:	0e 94 9f 00 	call	0x13e	; 0x13e <vPortFree>
    1914:	02 c0       	rjmp	.+4      	; 0x191a <xTaskCreate+0x62>
    1916:	c0 e0       	ldi	r28, 0x00	; 0
    1918:	d0 e0       	ldi	r29, 0x00	; 0
    191a:	20 97       	sbiw	r28, 0x00	; 0
    191c:	91 f0       	breq	.+36     	; 0x1942 <xTaskCreate+0x8a>
    191e:	95 01       	movw	r18, r10
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	50 e0       	ldi	r21, 0x00	; 0
    1924:	81 2c       	mov	r8, r1
    1926:	91 2c       	mov	r9, r1
    1928:	5e 01       	movw	r10, r28
    192a:	67 01       	movw	r12, r14
    192c:	e0 2e       	mov	r14, r16
    192e:	82 01       	movw	r16, r4
    1930:	b1 01       	movw	r22, r2
    1932:	c3 01       	movw	r24, r6
    1934:	0e 94 8e 0a 	call	0x151c	; 0x151c <prvInitialiseNewTask>
    1938:	ce 01       	movw	r24, r28
    193a:	0e 94 2f 0b 	call	0x165e	; 0x165e <prvAddNewTaskToReadyList>
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <xTaskCreate+0x8c>
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	3f 90       	pop	r3
    1966:	2f 90       	pop	r2
    1968:	08 95       	ret

0000196a <vTaskResume>:
    196a:	0f 93       	push	r16
    196c:	1f 93       	push	r17
    196e:	cf 93       	push	r28
    1970:	df 93       	push	r29
    1972:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <pxCurrentTCB>
    1976:	30 91 42 05 	lds	r19, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    197a:	82 17       	cp	r24, r18
    197c:	93 07       	cpc	r25, r19
    197e:	09 f4       	brne	.+2      	; 0x1982 <vTaskResume+0x18>
    1980:	55 c0       	rjmp	.+170    	; 0x1a2c <vTaskResume+0xc2>
    1982:	00 97       	sbiw	r24, 0x00	; 0
    1984:	09 f4       	brne	.+2      	; 0x1988 <vTaskResume+0x1e>
    1986:	52 c0       	rjmp	.+164    	; 0x1a2c <vTaskResume+0xc2>
    1988:	ec 01       	movw	r28, r24
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	0f 92       	push	r0
    1990:	0e 94 4e 0a 	call	0x149c	; 0x149c <prvTaskIsTaskSuspended>
    1994:	88 23       	and	r24, r24
    1996:	09 f4       	brne	.+2      	; 0x199a <vTaskResume+0x30>
    1998:	47 c0       	rjmp	.+142    	; 0x1a28 <vTaskResume+0xbe>
    199a:	8e 01       	movw	r16, r28
    199c:	0e 5f       	subi	r16, 0xFE	; 254
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	c8 01       	movw	r24, r16
    19a2:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    19a6:	8e 89       	ldd	r24, Y+22	; 0x16
    19a8:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    19ac:	98 17       	cp	r25, r24
    19ae:	10 f4       	brcc	.+4      	; 0x19b4 <vTaskResume+0x4a>
    19b0:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	fc 01       	movw	r30, r24
    19b8:	ee 0f       	add	r30, r30
    19ba:	ff 1f       	adc	r31, r31
    19bc:	ee 0f       	add	r30, r30
    19be:	ff 1f       	adc	r31, r31
    19c0:	ee 0f       	add	r30, r30
    19c2:	ff 1f       	adc	r31, r31
    19c4:	8e 0f       	add	r24, r30
    19c6:	9f 1f       	adc	r25, r31
    19c8:	fc 01       	movw	r30, r24
    19ca:	e3 5e       	subi	r30, 0xE3	; 227
    19cc:	fa 4f       	sbci	r31, 0xFA	; 250
    19ce:	01 80       	ldd	r0, Z+1	; 0x01
    19d0:	f2 81       	ldd	r31, Z+2	; 0x02
    19d2:	e0 2d       	mov	r30, r0
    19d4:	fd 83       	std	Y+5, r31	; 0x05
    19d6:	ec 83       	std	Y+4, r30	; 0x04
    19d8:	84 81       	ldd	r24, Z+4	; 0x04
    19da:	95 81       	ldd	r25, Z+5	; 0x05
    19dc:	9f 83       	std	Y+7, r25	; 0x07
    19de:	8e 83       	std	Y+6, r24	; 0x06
    19e0:	a4 81       	ldd	r26, Z+4	; 0x04
    19e2:	b5 81       	ldd	r27, Z+5	; 0x05
    19e4:	13 96       	adiw	r26, 0x03	; 3
    19e6:	1c 93       	st	X, r17
    19e8:	0e 93       	st	-X, r16
    19ea:	12 97       	sbiw	r26, 0x02	; 2
    19ec:	15 83       	std	Z+5, r17	; 0x05
    19ee:	04 83       	std	Z+4, r16	; 0x04
    19f0:	ee 89       	ldd	r30, Y+22	; 0x16
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	cf 01       	movw	r24, r30
    19f6:	88 0f       	add	r24, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	88 0f       	add	r24, r24
    1a00:	99 1f       	adc	r25, r25
    1a02:	e8 0f       	add	r30, r24
    1a04:	f9 1f       	adc	r31, r25
    1a06:	e3 5e       	subi	r30, 0xE3	; 227
    1a08:	fa 4f       	sbci	r31, 0xFA	; 250
    1a0a:	fb 87       	std	Y+11, r31	; 0x0b
    1a0c:	ea 87       	std	Y+10, r30	; 0x0a
    1a0e:	80 81       	ld	r24, Z
    1a10:	8f 5f       	subi	r24, 0xFF	; 255
    1a12:	80 83       	st	Z, r24
    1a14:	9e 89       	ldd	r25, Y+22	; 0x16
    1a16:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    1a1a:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1a1e:	86 89       	ldd	r24, Z+22	; 0x16
    1a20:	98 17       	cp	r25, r24
    1a22:	10 f0       	brcs	.+4      	; 0x1a28 <vTaskResume+0xbe>
    1a24:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1a28:	0f 90       	pop	r0
    1a2a:	0f be       	out	0x3f, r0	; 63
    1a2c:	df 91       	pop	r29
    1a2e:	cf 91       	pop	r28
    1a30:	1f 91       	pop	r17
    1a32:	0f 91       	pop	r16
    1a34:	08 95       	ret

00001a36 <vTaskStartScheduler>:
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	0f 2e       	mov	r0, r31
    1a3e:	fd ed       	ldi	r31, 0xDD	; 221
    1a40:	ef 2e       	mov	r14, r31
    1a42:	f4 e0       	ldi	r31, 0x04	; 4
    1a44:	ff 2e       	mov	r15, r31
    1a46:	f0 2d       	mov	r31, r0
    1a48:	00 e0       	ldi	r16, 0x00	; 0
    1a4a:	20 e0       	ldi	r18, 0x00	; 0
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	40 e8       	ldi	r20, 0x80	; 128
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	6a ec       	ldi	r22, 0xCA	; 202
    1a54:	70 e0       	ldi	r23, 0x00	; 0
    1a56:	82 ed       	ldi	r24, 0xD2	; 210
    1a58:	9b e0       	ldi	r25, 0x0B	; 11
    1a5a:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskCreate>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <vTaskStartScheduler+0x30>
    1a62:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <xTimerCreateTimerTask>
    1a66:	81 30       	cpi	r24, 0x01	; 1
    1a68:	81 f4       	brne	.+32     	; 0x1a8a <vTaskStartScheduler+0x54>
    1a6a:	f8 94       	cli
    1a6c:	8f ef       	ldi	r24, 0xFF	; 255
    1a6e:	9f ef       	ldi	r25, 0xFF	; 255
    1a70:	90 93 e0 04 	sts	0x04E0, r25	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    1a74:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <xNextTaskUnblockTime>
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	80 93 e6 04 	sts	0x04E6, r24	; 0x8004e6 <xSchedulerRunning>
    1a7e:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <xTickCount+0x1>
    1a82:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <xTickCount>
    1a86:	0e 94 ba 05 	call	0xb74	; 0xb74 <xPortStartScheduler>
    1a8a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <uxTopUsedPriority>
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	08 95       	ret

00001a96 <vTaskSuspendAll>:
    1a96:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <uxSchedulerSuspended>
    1aa0:	08 95       	ret

00001aa2 <xTaskGetTickCount>:
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	0f 92       	push	r0
    1aa8:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <xTickCount>
    1aac:	90 91 e9 04 	lds	r25, 0x04E9	; 0x8004e9 <xTickCount+0x1>
    1ab0:	0f 90       	pop	r0
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	08 95       	ret

00001ab6 <xTaskIncrementTick>:
    1ab6:	0f 93       	push	r16
    1ab8:	1f 93       	push	r17
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    1ac2:	81 11       	cpse	r24, r1
    1ac4:	01 c1       	rjmp	.+514    	; 0x1cc8 <xTaskIncrementTick+0x212>
    1ac6:	c0 91 e8 04 	lds	r28, 0x04E8	; 0x8004e8 <xTickCount>
    1aca:	d0 91 e9 04 	lds	r29, 0x04E9	; 0x8004e9 <xTickCount+0x1>
    1ace:	8e 01       	movw	r16, r28
    1ad0:	0f 5f       	subi	r16, 0xFF	; 255
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	10 93 e9 04 	sts	0x04E9, r17	; 0x8004e9 <xTickCount+0x1>
    1ad8:	00 93 e8 04 	sts	0x04E8, r16	; 0x8004e8 <xTickCount>
    1adc:	01 15       	cp	r16, r1
    1ade:	11 05       	cpc	r17, r1
    1ae0:	b9 f4       	brne	.+46     	; 0x1b10 <xTaskIncrementTick+0x5a>
    1ae2:	80 91 09 05 	lds	r24, 0x0509	; 0x800509 <pxDelayedTaskList>
    1ae6:	90 91 0a 05 	lds	r25, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    1aea:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <pxOverflowDelayedTaskList>
    1aee:	30 91 08 05 	lds	r19, 0x0508	; 0x800508 <pxOverflowDelayedTaskList+0x1>
    1af2:	30 93 0a 05 	sts	0x050A, r19	; 0x80050a <pxDelayedTaskList+0x1>
    1af6:	20 93 09 05 	sts	0x0509, r18	; 0x800509 <pxDelayedTaskList>
    1afa:	90 93 08 05 	sts	0x0508, r25	; 0x800508 <pxOverflowDelayedTaskList+0x1>
    1afe:	80 93 07 05 	sts	0x0507, r24	; 0x800507 <pxOverflowDelayedTaskList>
    1b02:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <xNumOfOverflows>
    1b06:	8f 5f       	subi	r24, 0xFF	; 255
    1b08:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <xNumOfOverflows>
    1b0c:	0e 94 65 0a 	call	0x14ca	; 0x14ca <prvResetNextTaskUnblockTime>
    1b10:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <xNextTaskUnblockTime>
    1b14:	90 91 e0 04 	lds	r25, 0x04E0	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    1b18:	08 17       	cp	r16, r24
    1b1a:	19 07       	cpc	r17, r25
    1b1c:	20 f4       	brcc	.+8      	; 0x1b26 <xTaskIncrementTick+0x70>
    1b1e:	80 e0       	ldi	r24, 0x00	; 0
    1b20:	b8 c0       	rjmp	.+368    	; 0x1c92 <xTaskIncrementTick+0x1dc>
    1b22:	81 e0       	ldi	r24, 0x01	; 1
    1b24:	01 c0       	rjmp	.+2      	; 0x1b28 <xTaskIncrementTick+0x72>
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <pxDelayedTaskList>
    1b2c:	f0 91 0a 05 	lds	r31, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    1b30:	90 81       	ld	r25, Z
    1b32:	91 11       	cpse	r25, r1
    1b34:	07 c0       	rjmp	.+14     	; 0x1b44 <xTaskIncrementTick+0x8e>
    1b36:	2f ef       	ldi	r18, 0xFF	; 255
    1b38:	3f ef       	ldi	r19, 0xFF	; 255
    1b3a:	30 93 e0 04 	sts	0x04E0, r19	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    1b3e:	20 93 df 04 	sts	0x04DF, r18	; 0x8004df <xNextTaskUnblockTime>
    1b42:	a7 c0       	rjmp	.+334    	; 0x1c92 <xTaskIncrementTick+0x1dc>
    1b44:	e0 91 09 05 	lds	r30, 0x0509	; 0x800509 <pxDelayedTaskList>
    1b48:	f0 91 0a 05 	lds	r31, 0x050A	; 0x80050a <pxDelayedTaskList+0x1>
    1b4c:	05 80       	ldd	r0, Z+5	; 0x05
    1b4e:	f6 81       	ldd	r31, Z+6	; 0x06
    1b50:	e0 2d       	mov	r30, r0
    1b52:	06 80       	ldd	r0, Z+6	; 0x06
    1b54:	f7 81       	ldd	r31, Z+7	; 0x07
    1b56:	e0 2d       	mov	r30, r0
    1b58:	22 81       	ldd	r18, Z+2	; 0x02
    1b5a:	33 81       	ldd	r19, Z+3	; 0x03
    1b5c:	02 17       	cp	r16, r18
    1b5e:	13 07       	cpc	r17, r19
    1b60:	28 f4       	brcc	.+10     	; 0x1b6c <xTaskIncrementTick+0xb6>
    1b62:	30 93 e0 04 	sts	0x04E0, r19	; 0x8004e0 <xNextTaskUnblockTime+0x1>
    1b66:	20 93 df 04 	sts	0x04DF, r18	; 0x8004df <xNextTaskUnblockTime>
    1b6a:	93 c0       	rjmp	.+294    	; 0x1c92 <xTaskIncrementTick+0x1dc>
    1b6c:	a2 85       	ldd	r26, Z+10	; 0x0a
    1b6e:	b3 85       	ldd	r27, Z+11	; 0x0b
    1b70:	24 81       	ldd	r18, Z+4	; 0x04
    1b72:	35 81       	ldd	r19, Z+5	; 0x05
    1b74:	46 81       	ldd	r20, Z+6	; 0x06
    1b76:	57 81       	ldd	r21, Z+7	; 0x07
    1b78:	e9 01       	movw	r28, r18
    1b7a:	5d 83       	std	Y+5, r21	; 0x05
    1b7c:	4c 83       	std	Y+4, r20	; 0x04
    1b7e:	26 81       	ldd	r18, Z+6	; 0x06
    1b80:	37 81       	ldd	r19, Z+7	; 0x07
    1b82:	44 81       	ldd	r20, Z+4	; 0x04
    1b84:	55 81       	ldd	r21, Z+5	; 0x05
    1b86:	e9 01       	movw	r28, r18
    1b88:	5b 83       	std	Y+3, r21	; 0x03
    1b8a:	4a 83       	std	Y+2, r20	; 0x02
    1b8c:	11 96       	adiw	r26, 0x01	; 1
    1b8e:	2d 91       	ld	r18, X+
    1b90:	3c 91       	ld	r19, X
    1b92:	12 97       	sbiw	r26, 0x02	; 2
    1b94:	af 01       	movw	r20, r30
    1b96:	4e 5f       	subi	r20, 0xFE	; 254
    1b98:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9a:	24 17       	cp	r18, r20
    1b9c:	35 07       	cpc	r19, r21
    1b9e:	31 f4       	brne	.+12     	; 0x1bac <xTaskIncrementTick+0xf6>
    1ba0:	26 81       	ldd	r18, Z+6	; 0x06
    1ba2:	37 81       	ldd	r19, Z+7	; 0x07
    1ba4:	12 96       	adiw	r26, 0x02	; 2
    1ba6:	3c 93       	st	X, r19
    1ba8:	2e 93       	st	-X, r18
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	13 86       	std	Z+11, r1	; 0x0b
    1bae:	12 86       	std	Z+10, r1	; 0x0a
    1bb0:	9c 91       	ld	r25, X
    1bb2:	91 50       	subi	r25, 0x01	; 1
    1bb4:	9c 93       	st	X, r25
    1bb6:	a4 89       	ldd	r26, Z+20	; 0x14
    1bb8:	b5 89       	ldd	r27, Z+21	; 0x15
    1bba:	10 97       	sbiw	r26, 0x00	; 0
    1bbc:	19 f1       	breq	.+70     	; 0x1c04 <xTaskIncrementTick+0x14e>
    1bbe:	26 85       	ldd	r18, Z+14	; 0x0e
    1bc0:	37 85       	ldd	r19, Z+15	; 0x0f
    1bc2:	60 89       	ldd	r22, Z+16	; 0x10
    1bc4:	71 89       	ldd	r23, Z+17	; 0x11
    1bc6:	e9 01       	movw	r28, r18
    1bc8:	7d 83       	std	Y+5, r23	; 0x05
    1bca:	6c 83       	std	Y+4, r22	; 0x04
    1bcc:	20 89       	ldd	r18, Z+16	; 0x10
    1bce:	31 89       	ldd	r19, Z+17	; 0x11
    1bd0:	66 85       	ldd	r22, Z+14	; 0x0e
    1bd2:	77 85       	ldd	r23, Z+15	; 0x0f
    1bd4:	e9 01       	movw	r28, r18
    1bd6:	7b 83       	std	Y+3, r23	; 0x03
    1bd8:	6a 83       	std	Y+2, r22	; 0x02
    1bda:	11 96       	adiw	r26, 0x01	; 1
    1bdc:	6d 91       	ld	r22, X+
    1bde:	7c 91       	ld	r23, X
    1be0:	12 97       	sbiw	r26, 0x02	; 2
    1be2:	9f 01       	movw	r18, r30
    1be4:	24 5f       	subi	r18, 0xF4	; 244
    1be6:	3f 4f       	sbci	r19, 0xFF	; 255
    1be8:	62 17       	cp	r22, r18
    1bea:	73 07       	cpc	r23, r19
    1bec:	31 f4       	brne	.+12     	; 0x1bfa <xTaskIncrementTick+0x144>
    1bee:	20 89       	ldd	r18, Z+16	; 0x10
    1bf0:	31 89       	ldd	r19, Z+17	; 0x11
    1bf2:	12 96       	adiw	r26, 0x02	; 2
    1bf4:	3c 93       	st	X, r19
    1bf6:	2e 93       	st	-X, r18
    1bf8:	11 97       	sbiw	r26, 0x01	; 1
    1bfa:	15 8a       	std	Z+21, r1	; 0x15
    1bfc:	14 8a       	std	Z+20, r1	; 0x14
    1bfe:	9c 91       	ld	r25, X
    1c00:	91 50       	subi	r25, 0x01	; 1
    1c02:	9c 93       	st	X, r25
    1c04:	26 89       	ldd	r18, Z+22	; 0x16
    1c06:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    1c0a:	92 17       	cp	r25, r18
    1c0c:	10 f4       	brcc	.+4      	; 0x1c12 <xTaskIncrementTick+0x15c>
    1c0e:	20 93 e7 04 	sts	0x04E7, r18	; 0x8004e7 <uxTopReadyPriority>
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	d9 01       	movw	r26, r18
    1c16:	aa 0f       	add	r26, r26
    1c18:	bb 1f       	adc	r27, r27
    1c1a:	aa 0f       	add	r26, r26
    1c1c:	bb 1f       	adc	r27, r27
    1c1e:	aa 0f       	add	r26, r26
    1c20:	bb 1f       	adc	r27, r27
    1c22:	2a 0f       	add	r18, r26
    1c24:	3b 1f       	adc	r19, r27
    1c26:	d9 01       	movw	r26, r18
    1c28:	a3 5e       	subi	r26, 0xE3	; 227
    1c2a:	ba 4f       	sbci	r27, 0xFA	; 250
    1c2c:	11 96       	adiw	r26, 0x01	; 1
    1c2e:	0d 90       	ld	r0, X+
    1c30:	bc 91       	ld	r27, X
    1c32:	a0 2d       	mov	r26, r0
    1c34:	b5 83       	std	Z+5, r27	; 0x05
    1c36:	a4 83       	std	Z+4, r26	; 0x04
    1c38:	14 96       	adiw	r26, 0x04	; 4
    1c3a:	2d 91       	ld	r18, X+
    1c3c:	3c 91       	ld	r19, X
    1c3e:	15 97       	sbiw	r26, 0x05	; 5
    1c40:	37 83       	std	Z+7, r19	; 0x07
    1c42:	26 83       	std	Z+6, r18	; 0x06
    1c44:	14 96       	adiw	r26, 0x04	; 4
    1c46:	2d 91       	ld	r18, X+
    1c48:	3c 91       	ld	r19, X
    1c4a:	15 97       	sbiw	r26, 0x05	; 5
    1c4c:	e9 01       	movw	r28, r18
    1c4e:	5b 83       	std	Y+3, r21	; 0x03
    1c50:	4a 83       	std	Y+2, r20	; 0x02
    1c52:	15 96       	adiw	r26, 0x05	; 5
    1c54:	5c 93       	st	X, r21
    1c56:	4e 93       	st	-X, r20
    1c58:	14 97       	sbiw	r26, 0x04	; 4
    1c5a:	a6 89       	ldd	r26, Z+22	; 0x16
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	9d 01       	movw	r18, r26
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	22 0f       	add	r18, r18
    1c6a:	33 1f       	adc	r19, r19
    1c6c:	a2 0f       	add	r26, r18
    1c6e:	b3 1f       	adc	r27, r19
    1c70:	a3 5e       	subi	r26, 0xE3	; 227
    1c72:	ba 4f       	sbci	r27, 0xFA	; 250
    1c74:	b3 87       	std	Z+11, r27	; 0x0b
    1c76:	a2 87       	std	Z+10, r26	; 0x0a
    1c78:	9c 91       	ld	r25, X
    1c7a:	9f 5f       	subi	r25, 0xFF	; 255
    1c7c:	9c 93       	st	X, r25
    1c7e:	26 89       	ldd	r18, Z+22	; 0x16
    1c80:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    1c84:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1c88:	96 89       	ldd	r25, Z+22	; 0x16
    1c8a:	92 17       	cp	r25, r18
    1c8c:	08 f4       	brcc	.+2      	; 0x1c90 <xTaskIncrementTick+0x1da>
    1c8e:	49 cf       	rjmp	.-366    	; 0x1b22 <xTaskIncrementTick+0x6c>
    1c90:	4b cf       	rjmp	.-362    	; 0x1b28 <xTaskIncrementTick+0x72>
    1c92:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    1c96:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1c9a:	26 89       	ldd	r18, Z+22	; 0x16
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	f9 01       	movw	r30, r18
    1ca0:	ee 0f       	add	r30, r30
    1ca2:	ff 1f       	adc	r31, r31
    1ca4:	ee 0f       	add	r30, r30
    1ca6:	ff 1f       	adc	r31, r31
    1ca8:	ee 0f       	add	r30, r30
    1caa:	ff 1f       	adc	r31, r31
    1cac:	2e 0f       	add	r18, r30
    1cae:	3f 1f       	adc	r19, r31
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	e3 5e       	subi	r30, 0xE3	; 227
    1cb4:	fa 4f       	sbci	r31, 0xFA	; 250
    1cb6:	90 81       	ld	r25, Z
    1cb8:	92 30       	cpi	r25, 0x02	; 2
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <xTaskIncrementTick+0x208>
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 91 e3 04 	lds	r25, 0x04E3	; 0x8004e3 <xYieldPending>
    1cc2:	91 11       	cpse	r25, r1
    1cc4:	0c c0       	rjmp	.+24     	; 0x1cde <xTaskIncrementTick+0x228>
    1cc6:	0c c0       	rjmp	.+24     	; 0x1ce0 <xTaskIncrementTick+0x22a>
    1cc8:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <xPendedTicks>
    1ccc:	90 91 e5 04 	lds	r25, 0x04E5	; 0x8004e5 <xPendedTicks+0x1>
    1cd0:	01 96       	adiw	r24, 0x01	; 1
    1cd2:	90 93 e5 04 	sts	0x04E5, r25	; 0x8004e5 <xPendedTicks+0x1>
    1cd6:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <xPendedTicks>
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	01 c0       	rjmp	.+2      	; 0x1ce0 <xTaskIncrementTick+0x22a>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	08 95       	ret

00001cea <xTaskResumeAll>:
    1cea:	cf 93       	push	r28
    1cec:	df 93       	push	r29
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	0f 92       	push	r0
    1cf4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    1cf8:	81 50       	subi	r24, 0x01	; 1
    1cfa:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <uxSchedulerSuspended>
    1cfe:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    1d02:	81 11       	cpse	r24, r1
    1d04:	bf c0       	rjmp	.+382    	; 0x1e84 <xTaskResumeAll+0x19a>
    1d06:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <uxCurrentNumberOfTasks>
    1d0a:	81 11       	cpse	r24, r1
    1d0c:	96 c0       	rjmp	.+300    	; 0x1e3a <xTaskResumeAll+0x150>
    1d0e:	bd c0       	rjmp	.+378    	; 0x1e8a <xTaskResumeAll+0x1a0>
    1d10:	e0 91 03 05 	lds	r30, 0x0503	; 0x800503 <xPendingReadyList+0x5>
    1d14:	f0 91 04 05 	lds	r31, 0x0504	; 0x800504 <xPendingReadyList+0x6>
    1d18:	06 80       	ldd	r0, Z+6	; 0x06
    1d1a:	f7 81       	ldd	r31, Z+7	; 0x07
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	a4 89       	ldd	r26, Z+20	; 0x14
    1d20:	b5 89       	ldd	r27, Z+21	; 0x15
    1d22:	c6 85       	ldd	r28, Z+14	; 0x0e
    1d24:	d7 85       	ldd	r29, Z+15	; 0x0f
    1d26:	80 89       	ldd	r24, Z+16	; 0x10
    1d28:	91 89       	ldd	r25, Z+17	; 0x11
    1d2a:	9d 83       	std	Y+5, r25	; 0x05
    1d2c:	8c 83       	std	Y+4, r24	; 0x04
    1d2e:	c0 89       	ldd	r28, Z+16	; 0x10
    1d30:	d1 89       	ldd	r29, Z+17	; 0x11
    1d32:	86 85       	ldd	r24, Z+14	; 0x0e
    1d34:	97 85       	ldd	r25, Z+15	; 0x0f
    1d36:	9b 83       	std	Y+3, r25	; 0x03
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	2d 91       	ld	r18, X+
    1d3e:	3c 91       	ld	r19, X
    1d40:	12 97       	sbiw	r26, 0x02	; 2
    1d42:	cf 01       	movw	r24, r30
    1d44:	0c 96       	adiw	r24, 0x0c	; 12
    1d46:	28 17       	cp	r18, r24
    1d48:	39 07       	cpc	r19, r25
    1d4a:	31 f4       	brne	.+12     	; 0x1d58 <xTaskResumeAll+0x6e>
    1d4c:	80 89       	ldd	r24, Z+16	; 0x10
    1d4e:	91 89       	ldd	r25, Z+17	; 0x11
    1d50:	12 96       	adiw	r26, 0x02	; 2
    1d52:	9c 93       	st	X, r25
    1d54:	8e 93       	st	-X, r24
    1d56:	11 97       	sbiw	r26, 0x01	; 1
    1d58:	15 8a       	std	Z+21, r1	; 0x15
    1d5a:	14 8a       	std	Z+20, r1	; 0x14
    1d5c:	8c 91       	ld	r24, X
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	8c 93       	st	X, r24
    1d62:	a2 85       	ldd	r26, Z+10	; 0x0a
    1d64:	b3 85       	ldd	r27, Z+11	; 0x0b
    1d66:	c4 81       	ldd	r28, Z+4	; 0x04
    1d68:	d5 81       	ldd	r29, Z+5	; 0x05
    1d6a:	86 81       	ldd	r24, Z+6	; 0x06
    1d6c:	97 81       	ldd	r25, Z+7	; 0x07
    1d6e:	9d 83       	std	Y+5, r25	; 0x05
    1d70:	8c 83       	std	Y+4, r24	; 0x04
    1d72:	c6 81       	ldd	r28, Z+6	; 0x06
    1d74:	d7 81       	ldd	r29, Z+7	; 0x07
    1d76:	84 81       	ldd	r24, Z+4	; 0x04
    1d78:	95 81       	ldd	r25, Z+5	; 0x05
    1d7a:	9b 83       	std	Y+3, r25	; 0x03
    1d7c:	8a 83       	std	Y+2, r24	; 0x02
    1d7e:	11 96       	adiw	r26, 0x01	; 1
    1d80:	8d 91       	ld	r24, X+
    1d82:	9c 91       	ld	r25, X
    1d84:	12 97       	sbiw	r26, 0x02	; 2
    1d86:	9f 01       	movw	r18, r30
    1d88:	2e 5f       	subi	r18, 0xFE	; 254
    1d8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8c:	82 17       	cp	r24, r18
    1d8e:	93 07       	cpc	r25, r19
    1d90:	31 f4       	brne	.+12     	; 0x1d9e <xTaskResumeAll+0xb4>
    1d92:	86 81       	ldd	r24, Z+6	; 0x06
    1d94:	97 81       	ldd	r25, Z+7	; 0x07
    1d96:	12 96       	adiw	r26, 0x02	; 2
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
    1d9c:	11 97       	sbiw	r26, 0x01	; 1
    1d9e:	13 86       	std	Z+11, r1	; 0x0b
    1da0:	12 86       	std	Z+10, r1	; 0x0a
    1da2:	8c 91       	ld	r24, X
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	8c 93       	st	X, r24
    1da8:	86 89       	ldd	r24, Z+22	; 0x16
    1daa:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    1dae:	98 17       	cp	r25, r24
    1db0:	10 f4       	brcc	.+4      	; 0x1db6 <xTaskResumeAll+0xcc>
    1db2:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	dc 01       	movw	r26, r24
    1dba:	aa 0f       	add	r26, r26
    1dbc:	bb 1f       	adc	r27, r27
    1dbe:	aa 0f       	add	r26, r26
    1dc0:	bb 1f       	adc	r27, r27
    1dc2:	aa 0f       	add	r26, r26
    1dc4:	bb 1f       	adc	r27, r27
    1dc6:	8a 0f       	add	r24, r26
    1dc8:	9b 1f       	adc	r25, r27
    1dca:	dc 01       	movw	r26, r24
    1dcc:	a3 5e       	subi	r26, 0xE3	; 227
    1dce:	ba 4f       	sbci	r27, 0xFA	; 250
    1dd0:	11 96       	adiw	r26, 0x01	; 1
    1dd2:	0d 90       	ld	r0, X+
    1dd4:	bc 91       	ld	r27, X
    1dd6:	a0 2d       	mov	r26, r0
    1dd8:	b5 83       	std	Z+5, r27	; 0x05
    1dda:	a4 83       	std	Z+4, r26	; 0x04
    1ddc:	14 96       	adiw	r26, 0x04	; 4
    1dde:	8d 91       	ld	r24, X+
    1de0:	9c 91       	ld	r25, X
    1de2:	15 97       	sbiw	r26, 0x05	; 5
    1de4:	97 83       	std	Z+7, r25	; 0x07
    1de6:	86 83       	std	Z+6, r24	; 0x06
    1de8:	14 96       	adiw	r26, 0x04	; 4
    1dea:	cd 91       	ld	r28, X+
    1dec:	dc 91       	ld	r29, X
    1dee:	15 97       	sbiw	r26, 0x05	; 5
    1df0:	3b 83       	std	Y+3, r19	; 0x03
    1df2:	2a 83       	std	Y+2, r18	; 0x02
    1df4:	15 96       	adiw	r26, 0x05	; 5
    1df6:	3c 93       	st	X, r19
    1df8:	2e 93       	st	-X, r18
    1dfa:	14 97       	sbiw	r26, 0x04	; 4
    1dfc:	a6 89       	ldd	r26, Z+22	; 0x16
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	cd 01       	movw	r24, r26
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	a8 0f       	add	r26, r24
    1e10:	b9 1f       	adc	r27, r25
    1e12:	a3 5e       	subi	r26, 0xE3	; 227
    1e14:	ba 4f       	sbci	r27, 0xFA	; 250
    1e16:	b3 87       	std	Z+11, r27	; 0x0b
    1e18:	a2 87       	std	Z+10, r26	; 0x0a
    1e1a:	8c 91       	ld	r24, X
    1e1c:	8f 5f       	subi	r24, 0xFF	; 255
    1e1e:	8c 93       	st	X, r24
    1e20:	96 89       	ldd	r25, Z+22	; 0x16
    1e22:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    1e26:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1e2a:	56 96       	adiw	r26, 0x16	; 22
    1e2c:	8c 91       	ld	r24, X
    1e2e:	98 17       	cp	r25, r24
    1e30:	30 f0       	brcs	.+12     	; 0x1e3e <xTaskResumeAll+0x154>
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <xYieldPending>
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <xTaskResumeAll+0x154>
    1e3a:	e0 e0       	ldi	r30, 0x00	; 0
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <xPendingReadyList>
    1e42:	81 11       	cpse	r24, r1
    1e44:	65 cf       	rjmp	.-310    	; 0x1d10 <xTaskResumeAll+0x26>
    1e46:	ef 2b       	or	r30, r31
    1e48:	11 f0       	breq	.+4      	; 0x1e4e <xTaskResumeAll+0x164>
    1e4a:	0e 94 65 0a 	call	0x14ca	; 0x14ca <prvResetNextTaskUnblockTime>
    1e4e:	c0 91 e4 04 	lds	r28, 0x04E4	; 0x8004e4 <xPendedTicks>
    1e52:	d0 91 e5 04 	lds	r29, 0x04E5	; 0x8004e5 <xPendedTicks+0x1>
    1e56:	20 97       	sbiw	r28, 0x00	; 0
    1e58:	69 f0       	breq	.+26     	; 0x1e74 <xTaskResumeAll+0x18a>
    1e5a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <xTaskIncrementTick>
    1e5e:	88 23       	and	r24, r24
    1e60:	19 f0       	breq	.+6      	; 0x1e68 <xTaskResumeAll+0x17e>
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <xYieldPending>
    1e68:	21 97       	sbiw	r28, 0x01	; 1
    1e6a:	b9 f7       	brne	.-18     	; 0x1e5a <xTaskResumeAll+0x170>
    1e6c:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <xPendedTicks+0x1>
    1e70:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <xPendedTicks>
    1e74:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <xYieldPending>
    1e78:	88 23       	and	r24, r24
    1e7a:	31 f0       	breq	.+12     	; 0x1e88 <xTaskResumeAll+0x19e>
    1e7c:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	03 c0       	rjmp	.+6      	; 0x1e8a <xTaskResumeAll+0x1a0>
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	01 c0       	rjmp	.+2      	; 0x1e8a <xTaskResumeAll+0x1a0>
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	0f 90       	pop	r0
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
    1e92:	08 95       	ret

00001e94 <vTaskDelay>:
    1e94:	cf 93       	push	r28
    1e96:	df 93       	push	r29
    1e98:	ec 01       	movw	r28, r24
    1e9a:	89 2b       	or	r24, r25
    1e9c:	49 f0       	breq	.+18     	; 0x1eb0 <vTaskDelay+0x1c>
    1e9e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    1ea2:	60 e0       	ldi	r22, 0x00	; 0
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvAddCurrentTaskToDelayedList>
    1eaa:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    1eae:	01 c0       	rjmp	.+2      	; 0x1eb2 <vTaskDelay+0x1e>
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	81 11       	cpse	r24, r1
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <vTaskDelay+0x26>
    1eb6:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    1eba:	df 91       	pop	r29
    1ebc:	cf 91       	pop	r28
    1ebe:	08 95       	ret

00001ec0 <vTaskSwitchContext>:
    1ec0:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    1ec4:	88 23       	and	r24, r24
    1ec6:	21 f0       	breq	.+8      	; 0x1ed0 <vTaskSwitchContext+0x10>
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <xYieldPending>
    1ece:	08 95       	ret
    1ed0:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <xYieldPending>
    1ed4:	20 91 e7 04 	lds	r18, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <vTaskSwitchContext+0x1c>
    1eda:	21 50       	subi	r18, 0x01	; 1
    1edc:	82 2f       	mov	r24, r18
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	ee 0f       	add	r30, r30
    1ee4:	ff 1f       	adc	r31, r31
    1ee6:	ee 0f       	add	r30, r30
    1ee8:	ff 1f       	adc	r31, r31
    1eea:	ee 0f       	add	r30, r30
    1eec:	ff 1f       	adc	r31, r31
    1eee:	e8 0f       	add	r30, r24
    1ef0:	f9 1f       	adc	r31, r25
    1ef2:	e3 5e       	subi	r30, 0xE3	; 227
    1ef4:	fa 4f       	sbci	r31, 0xFA	; 250
    1ef6:	30 81       	ld	r19, Z
    1ef8:	33 23       	and	r19, r19
    1efa:	79 f3       	breq	.-34     	; 0x1eda <vTaskSwitchContext+0x1a>
    1efc:	ac 01       	movw	r20, r24
    1efe:	44 0f       	add	r20, r20
    1f00:	55 1f       	adc	r21, r21
    1f02:	44 0f       	add	r20, r20
    1f04:	55 1f       	adc	r21, r21
    1f06:	44 0f       	add	r20, r20
    1f08:	55 1f       	adc	r21, r21
    1f0a:	48 0f       	add	r20, r24
    1f0c:	59 1f       	adc	r21, r25
    1f0e:	df 01       	movw	r26, r30
    1f10:	01 80       	ldd	r0, Z+1	; 0x01
    1f12:	f2 81       	ldd	r31, Z+2	; 0x02
    1f14:	e0 2d       	mov	r30, r0
    1f16:	02 80       	ldd	r0, Z+2	; 0x02
    1f18:	f3 81       	ldd	r31, Z+3	; 0x03
    1f1a:	e0 2d       	mov	r30, r0
    1f1c:	12 96       	adiw	r26, 0x02	; 2
    1f1e:	fc 93       	st	X, r31
    1f20:	ee 93       	st	-X, r30
    1f22:	11 97       	sbiw	r26, 0x01	; 1
    1f24:	40 5e       	subi	r20, 0xE0	; 224
    1f26:	5a 4f       	sbci	r21, 0xFA	; 250
    1f28:	e4 17       	cp	r30, r20
    1f2a:	f5 07       	cpc	r31, r21
    1f2c:	29 f4       	brne	.+10     	; 0x1f38 <vTaskSwitchContext+0x78>
    1f2e:	42 81       	ldd	r20, Z+2	; 0x02
    1f30:	53 81       	ldd	r21, Z+3	; 0x03
    1f32:	fd 01       	movw	r30, r26
    1f34:	52 83       	std	Z+2, r21	; 0x02
    1f36:	41 83       	std	Z+1, r20	; 0x01
    1f38:	fc 01       	movw	r30, r24
    1f3a:	ee 0f       	add	r30, r30
    1f3c:	ff 1f       	adc	r31, r31
    1f3e:	ee 0f       	add	r30, r30
    1f40:	ff 1f       	adc	r31, r31
    1f42:	ee 0f       	add	r30, r30
    1f44:	ff 1f       	adc	r31, r31
    1f46:	8e 0f       	add	r24, r30
    1f48:	9f 1f       	adc	r25, r31
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e3 5e       	subi	r30, 0xE3	; 227
    1f4e:	fa 4f       	sbci	r31, 0xFA	; 250
    1f50:	01 80       	ldd	r0, Z+1	; 0x01
    1f52:	f2 81       	ldd	r31, Z+2	; 0x02
    1f54:	e0 2d       	mov	r30, r0
    1f56:	86 81       	ldd	r24, Z+6	; 0x06
    1f58:	97 81       	ldd	r25, Z+7	; 0x07
    1f5a:	90 93 42 05 	sts	0x0542, r25	; 0x800542 <pxCurrentTCB+0x1>
    1f5e:	80 93 41 05 	sts	0x0541, r24	; 0x800541 <pxCurrentTCB>
    1f62:	20 93 e7 04 	sts	0x04E7, r18	; 0x8004e7 <uxTopReadyPriority>
    1f66:	08 95       	ret

00001f68 <vTaskSuspend>:
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	ec 01       	movw	r28, r24
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	0f 92       	push	r0
    1f78:	89 2b       	or	r24, r25
    1f7a:	21 f4       	brne	.+8      	; 0x1f84 <vTaskSuspend+0x1c>
    1f7c:	c0 91 41 05 	lds	r28, 0x0541	; 0x800541 <pxCurrentTCB>
    1f80:	d0 91 42 05 	lds	r29, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1f84:	8e 01       	movw	r16, r28
    1f86:	0e 5f       	subi	r16, 0xFE	; 254
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	c8 01       	movw	r24, r16
    1f8c:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    1f90:	8c 89       	ldd	r24, Y+20	; 0x14
    1f92:	9d 89       	ldd	r25, Y+21	; 0x15
    1f94:	89 2b       	or	r24, r25
    1f96:	21 f0       	breq	.+8      	; 0x1fa0 <vTaskSuspend+0x38>
    1f98:	ce 01       	movw	r24, r28
    1f9a:	0c 96       	adiw	r24, 0x0c	; 12
    1f9c:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    1fa0:	b8 01       	movw	r22, r16
    1fa2:	8b ee       	ldi	r24, 0xEB	; 235
    1fa4:	94 e0       	ldi	r25, 0x04	; 4
    1fa6:	0e 94 b3 02 	call	0x566	; 0x566 <vListInsertEnd>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	0f c0       	rjmp	.+30     	; 0x1fcc <vTaskSuspend+0x64>
    1fae:	28 2f       	mov	r18, r24
    1fb0:	08 2e       	mov	r0, r24
    1fb2:	00 0c       	add	r0, r0
    1fb4:	33 0b       	sbc	r19, r19
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
    1fbc:	97 a1       	ldd	r25, Z+39	; 0x27
    1fbe:	91 30       	cpi	r25, 0x01	; 1
    1fc0:	21 f4       	brne	.+8      	; 0x1fca <vTaskSuspend+0x62>
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e2 0f       	add	r30, r18
    1fc6:	f3 1f       	adc	r31, r19
    1fc8:	17 a2       	std	Z+39, r1	; 0x27
    1fca:	8f 5f       	subi	r24, 0xFF	; 255
    1fcc:	18 16       	cp	r1, r24
    1fce:	7c f7       	brge	.-34     	; 0x1fae <vTaskSuspend+0x46>
    1fd0:	0f 90       	pop	r0
    1fd2:	0f be       	out	0x3f, r0	; 63
    1fd4:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSchedulerRunning>
    1fd8:	88 23       	and	r24, r24
    1fda:	39 f0       	breq	.+14     	; 0x1fea <vTaskSuspend+0x82>
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	0f 92       	push	r0
    1fe2:	0e 94 65 0a 	call	0x14ca	; 0x14ca <prvResetNextTaskUnblockTime>
    1fe6:	0f 90       	pop	r0
    1fe8:	0f be       	out	0x3f, r0	; 63
    1fea:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    1fee:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    1ff2:	c8 17       	cp	r28, r24
    1ff4:	d9 07       	cpc	r29, r25
    1ff6:	a1 f4       	brne	.+40     	; 0x2020 <vTaskSuspend+0xb8>
    1ff8:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <xSchedulerRunning>
    1ffc:	88 23       	and	r24, r24
    1ffe:	19 f0       	breq	.+6      	; 0x2006 <vTaskSuspend+0x9e>
    2000:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    2004:	0d c0       	rjmp	.+26     	; 0x2020 <vTaskSuspend+0xb8>
    2006:	90 91 eb 04 	lds	r25, 0x04EB	; 0x8004eb <xSuspendedTaskList>
    200a:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <uxCurrentNumberOfTasks>
    200e:	98 13       	cpse	r25, r24
    2010:	05 c0       	rjmp	.+10     	; 0x201c <vTaskSuspend+0xb4>
    2012:	10 92 42 05 	sts	0x0542, r1	; 0x800542 <pxCurrentTCB+0x1>
    2016:	10 92 41 05 	sts	0x0541, r1	; 0x800541 <pxCurrentTCB>
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <vTaskSuspend+0xb8>
    201c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <vTaskSwitchContext>
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	08 95       	ret

0000202a <vTaskPlaceOnEventList>:
    202a:	cf 93       	push	r28
    202c:	df 93       	push	r29
    202e:	eb 01       	movw	r28, r22
    2030:	60 91 41 05 	lds	r22, 0x0541	; 0x800541 <pxCurrentTCB>
    2034:	70 91 42 05 	lds	r23, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2038:	64 5f       	subi	r22, 0xF4	; 244
    203a:	7f 4f       	sbci	r23, 0xFF	; 255
    203c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vListInsert>
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	ce 01       	movw	r24, r28
    2044:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvAddCurrentTaskToDelayedList>
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	08 95       	ret

0000204e <vTaskPlaceOnEventListRestricted>:
    204e:	0f 93       	push	r16
    2050:	1f 93       	push	r17
    2052:	cf 93       	push	r28
    2054:	df 93       	push	r29
    2056:	fc 01       	movw	r30, r24
    2058:	8b 01       	movw	r16, r22
    205a:	a1 81       	ldd	r26, Z+1	; 0x01
    205c:	b2 81       	ldd	r27, Z+2	; 0x02
    205e:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    2062:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2066:	ec 01       	movw	r28, r24
    2068:	bf 87       	std	Y+15, r27	; 0x0f
    206a:	ae 87       	std	Y+14, r26	; 0x0e
    206c:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    2070:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2074:	14 96       	adiw	r26, 0x04	; 4
    2076:	2d 91       	ld	r18, X+
    2078:	3c 91       	ld	r19, X
    207a:	15 97       	sbiw	r26, 0x05	; 5
    207c:	ec 01       	movw	r28, r24
    207e:	39 8b       	std	Y+17, r19	; 0x11
    2080:	28 8b       	std	Y+16, r18	; 0x10
    2082:	14 96       	adiw	r26, 0x04	; 4
    2084:	8d 91       	ld	r24, X+
    2086:	9c 91       	ld	r25, X
    2088:	15 97       	sbiw	r26, 0x05	; 5
    208a:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <pxCurrentTCB>
    208e:	30 91 42 05 	lds	r19, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2092:	24 5f       	subi	r18, 0xF4	; 244
    2094:	3f 4f       	sbci	r19, 0xFF	; 255
    2096:	ec 01       	movw	r28, r24
    2098:	3b 83       	std	Y+3, r19	; 0x03
    209a:	2a 83       	std	Y+2, r18	; 0x02
    209c:	20 91 41 05 	lds	r18, 0x0541	; 0x800541 <pxCurrentTCB>
    20a0:	30 91 42 05 	lds	r19, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    20a4:	24 5f       	subi	r18, 0xF4	; 244
    20a6:	3f 4f       	sbci	r19, 0xFF	; 255
    20a8:	15 96       	adiw	r26, 0x05	; 5
    20aa:	3c 93       	st	X, r19
    20ac:	2e 93       	st	-X, r18
    20ae:	14 97       	sbiw	r26, 0x04	; 4
    20b0:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    20b4:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    20b8:	55 96       	adiw	r26, 0x15	; 21
    20ba:	fc 93       	st	X, r31
    20bc:	ee 93       	st	-X, r30
    20be:	54 97       	sbiw	r26, 0x14	; 20
    20c0:	90 81       	ld	r25, Z
    20c2:	9f 5f       	subi	r25, 0xFF	; 255
    20c4:	90 83       	st	Z, r25
    20c6:	44 23       	and	r20, r20
    20c8:	11 f0       	breq	.+4      	; 0x20ce <vTaskPlaceOnEventListRestricted+0x80>
    20ca:	0f ef       	ldi	r16, 0xFF	; 255
    20cc:	1f ef       	ldi	r17, 0xFF	; 255
    20ce:	64 2f       	mov	r22, r20
    20d0:	c8 01       	movw	r24, r16
    20d2:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <prvAddCurrentTaskToDelayedList>
    20d6:	df 91       	pop	r29
    20d8:	cf 91       	pop	r28
    20da:	1f 91       	pop	r17
    20dc:	0f 91       	pop	r16
    20de:	08 95       	ret

000020e0 <xTaskRemoveFromEventList>:
    20e0:	cf 93       	push	r28
    20e2:	df 93       	push	r29
    20e4:	dc 01       	movw	r26, r24
    20e6:	15 96       	adiw	r26, 0x05	; 5
    20e8:	ed 91       	ld	r30, X+
    20ea:	fc 91       	ld	r31, X
    20ec:	16 97       	sbiw	r26, 0x06	; 6
    20ee:	06 80       	ldd	r0, Z+6	; 0x06
    20f0:	f7 81       	ldd	r31, Z+7	; 0x07
    20f2:	e0 2d       	mov	r30, r0
    20f4:	a4 89       	ldd	r26, Z+20	; 0x14
    20f6:	b5 89       	ldd	r27, Z+21	; 0x15
    20f8:	c6 85       	ldd	r28, Z+14	; 0x0e
    20fa:	d7 85       	ldd	r29, Z+15	; 0x0f
    20fc:	80 89       	ldd	r24, Z+16	; 0x10
    20fe:	91 89       	ldd	r25, Z+17	; 0x11
    2100:	9d 83       	std	Y+5, r25	; 0x05
    2102:	8c 83       	std	Y+4, r24	; 0x04
    2104:	c0 89       	ldd	r28, Z+16	; 0x10
    2106:	d1 89       	ldd	r29, Z+17	; 0x11
    2108:	86 85       	ldd	r24, Z+14	; 0x0e
    210a:	97 85       	ldd	r25, Z+15	; 0x0f
    210c:	9b 83       	std	Y+3, r25	; 0x03
    210e:	8a 83       	std	Y+2, r24	; 0x02
    2110:	11 96       	adiw	r26, 0x01	; 1
    2112:	8d 91       	ld	r24, X+
    2114:	9c 91       	ld	r25, X
    2116:	12 97       	sbiw	r26, 0x02	; 2
    2118:	9f 01       	movw	r18, r30
    211a:	24 5f       	subi	r18, 0xF4	; 244
    211c:	3f 4f       	sbci	r19, 0xFF	; 255
    211e:	82 17       	cp	r24, r18
    2120:	93 07       	cpc	r25, r19
    2122:	31 f4       	brne	.+12     	; 0x2130 <xTaskRemoveFromEventList+0x50>
    2124:	80 89       	ldd	r24, Z+16	; 0x10
    2126:	91 89       	ldd	r25, Z+17	; 0x11
    2128:	12 96       	adiw	r26, 0x02	; 2
    212a:	9c 93       	st	X, r25
    212c:	8e 93       	st	-X, r24
    212e:	11 97       	sbiw	r26, 0x01	; 1
    2130:	15 8a       	std	Z+21, r1	; 0x15
    2132:	14 8a       	std	Z+20, r1	; 0x14
    2134:	8c 91       	ld	r24, X
    2136:	81 50       	subi	r24, 0x01	; 1
    2138:	8c 93       	st	X, r24
    213a:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <uxSchedulerSuspended>
    213e:	81 11       	cpse	r24, r1
    2140:	60 c0       	rjmp	.+192    	; 0x2202 <xTaskRemoveFromEventList+0x122>
    2142:	a2 85       	ldd	r26, Z+10	; 0x0a
    2144:	b3 85       	ldd	r27, Z+11	; 0x0b
    2146:	c4 81       	ldd	r28, Z+4	; 0x04
    2148:	d5 81       	ldd	r29, Z+5	; 0x05
    214a:	86 81       	ldd	r24, Z+6	; 0x06
    214c:	97 81       	ldd	r25, Z+7	; 0x07
    214e:	9d 83       	std	Y+5, r25	; 0x05
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	c6 81       	ldd	r28, Z+6	; 0x06
    2154:	d7 81       	ldd	r29, Z+7	; 0x07
    2156:	84 81       	ldd	r24, Z+4	; 0x04
    2158:	95 81       	ldd	r25, Z+5	; 0x05
    215a:	9b 83       	std	Y+3, r25	; 0x03
    215c:	8a 83       	std	Y+2, r24	; 0x02
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	8d 91       	ld	r24, X+
    2162:	9c 91       	ld	r25, X
    2164:	12 97       	sbiw	r26, 0x02	; 2
    2166:	9f 01       	movw	r18, r30
    2168:	2e 5f       	subi	r18, 0xFE	; 254
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	82 17       	cp	r24, r18
    216e:	93 07       	cpc	r25, r19
    2170:	31 f4       	brne	.+12     	; 0x217e <xTaskRemoveFromEventList+0x9e>
    2172:	86 81       	ldd	r24, Z+6	; 0x06
    2174:	97 81       	ldd	r25, Z+7	; 0x07
    2176:	12 96       	adiw	r26, 0x02	; 2
    2178:	9c 93       	st	X, r25
    217a:	8e 93       	st	-X, r24
    217c:	11 97       	sbiw	r26, 0x01	; 1
    217e:	13 86       	std	Z+11, r1	; 0x0b
    2180:	12 86       	std	Z+10, r1	; 0x0a
    2182:	8c 91       	ld	r24, X
    2184:	81 50       	subi	r24, 0x01	; 1
    2186:	8c 93       	st	X, r24
    2188:	86 89       	ldd	r24, Z+22	; 0x16
    218a:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    218e:	98 17       	cp	r25, r24
    2190:	10 f4       	brcc	.+4      	; 0x2196 <xTaskRemoveFromEventList+0xb6>
    2192:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	dc 01       	movw	r26, r24
    219a:	aa 0f       	add	r26, r26
    219c:	bb 1f       	adc	r27, r27
    219e:	aa 0f       	add	r26, r26
    21a0:	bb 1f       	adc	r27, r27
    21a2:	aa 0f       	add	r26, r26
    21a4:	bb 1f       	adc	r27, r27
    21a6:	8a 0f       	add	r24, r26
    21a8:	9b 1f       	adc	r25, r27
    21aa:	dc 01       	movw	r26, r24
    21ac:	a3 5e       	subi	r26, 0xE3	; 227
    21ae:	ba 4f       	sbci	r27, 0xFA	; 250
    21b0:	11 96       	adiw	r26, 0x01	; 1
    21b2:	0d 90       	ld	r0, X+
    21b4:	bc 91       	ld	r27, X
    21b6:	a0 2d       	mov	r26, r0
    21b8:	b5 83       	std	Z+5, r27	; 0x05
    21ba:	a4 83       	std	Z+4, r26	; 0x04
    21bc:	14 96       	adiw	r26, 0x04	; 4
    21be:	8d 91       	ld	r24, X+
    21c0:	9c 91       	ld	r25, X
    21c2:	15 97       	sbiw	r26, 0x05	; 5
    21c4:	97 83       	std	Z+7, r25	; 0x07
    21c6:	86 83       	std	Z+6, r24	; 0x06
    21c8:	14 96       	adiw	r26, 0x04	; 4
    21ca:	cd 91       	ld	r28, X+
    21cc:	dc 91       	ld	r29, X
    21ce:	15 97       	sbiw	r26, 0x05	; 5
    21d0:	3b 83       	std	Y+3, r19	; 0x03
    21d2:	2a 83       	std	Y+2, r18	; 0x02
    21d4:	15 96       	adiw	r26, 0x05	; 5
    21d6:	3c 93       	st	X, r19
    21d8:	2e 93       	st	-X, r18
    21da:	14 97       	sbiw	r26, 0x04	; 4
    21dc:	a6 89       	ldd	r26, Z+22	; 0x16
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	cd 01       	movw	r24, r26
    21e2:	88 0f       	add	r24, r24
    21e4:	99 1f       	adc	r25, r25
    21e6:	88 0f       	add	r24, r24
    21e8:	99 1f       	adc	r25, r25
    21ea:	88 0f       	add	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	a8 0f       	add	r26, r24
    21f0:	b9 1f       	adc	r27, r25
    21f2:	a3 5e       	subi	r26, 0xE3	; 227
    21f4:	ba 4f       	sbci	r27, 0xFA	; 250
    21f6:	b3 87       	std	Z+11, r27	; 0x0b
    21f8:	a2 87       	std	Z+10, r26	; 0x0a
    21fa:	8c 91       	ld	r24, X
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	8c 93       	st	X, r24
    2200:	1c c0       	rjmp	.+56     	; 0x223a <xTaskRemoveFromEventList+0x15a>
    2202:	4e ef       	ldi	r20, 0xFE	; 254
    2204:	54 e0       	ldi	r21, 0x04	; 4
    2206:	da 01       	movw	r26, r20
    2208:	11 96       	adiw	r26, 0x01	; 1
    220a:	cd 91       	ld	r28, X+
    220c:	dc 91       	ld	r29, X
    220e:	12 97       	sbiw	r26, 0x02	; 2
    2210:	d7 87       	std	Z+15, r29	; 0x0f
    2212:	c6 87       	std	Z+14, r28	; 0x0e
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	91 8b       	std	Z+17, r25	; 0x11
    221a:	80 8b       	std	Z+16, r24	; 0x10
    221c:	8c 81       	ldd	r24, Y+4	; 0x04
    221e:	9d 81       	ldd	r25, Y+5	; 0x05
    2220:	dc 01       	movw	r26, r24
    2222:	13 96       	adiw	r26, 0x03	; 3
    2224:	3c 93       	st	X, r19
    2226:	2e 93       	st	-X, r18
    2228:	12 97       	sbiw	r26, 0x02	; 2
    222a:	3d 83       	std	Y+5, r19	; 0x05
    222c:	2c 83       	std	Y+4, r18	; 0x04
    222e:	55 8b       	std	Z+21, r21	; 0x15
    2230:	44 8b       	std	Z+20, r20	; 0x14
    2232:	da 01       	movw	r26, r20
    2234:	8c 91       	ld	r24, X
    2236:	8f 5f       	subi	r24, 0xFF	; 255
    2238:	8c 93       	st	X, r24
    223a:	96 89       	ldd	r25, Z+22	; 0x16
    223c:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    2240:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2244:	86 89       	ldd	r24, Z+22	; 0x16
    2246:	89 17       	cp	r24, r25
    2248:	20 f4       	brcc	.+8      	; 0x2252 <xTaskRemoveFromEventList+0x172>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <xYieldPending>
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <xTaskRemoveFromEventList+0x174>
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	08 95       	ret

0000225a <vTaskInternalSetTimeOutState>:
    225a:	20 91 e2 04 	lds	r18, 0x04E2	; 0x8004e2 <xNumOfOverflows>
    225e:	fc 01       	movw	r30, r24
    2260:	20 83       	st	Z, r18
    2262:	20 91 e8 04 	lds	r18, 0x04E8	; 0x8004e8 <xTickCount>
    2266:	30 91 e9 04 	lds	r19, 0x04E9	; 0x8004e9 <xTickCount+0x1>
    226a:	32 83       	std	Z+2, r19	; 0x02
    226c:	21 83       	std	Z+1, r18	; 0x01
    226e:	08 95       	ret

00002270 <xTaskCheckForTimeOut>:
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	0f 92       	push	r0
    227c:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <xTickCount>
    2280:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <xTickCount+0x1>
    2284:	dc 01       	movw	r26, r24
    2286:	11 96       	adiw	r26, 0x01	; 1
    2288:	4d 91       	ld	r20, X+
    228a:	5c 91       	ld	r21, X
    228c:	12 97       	sbiw	r26, 0x02	; 2
    228e:	df 01       	movw	r26, r30
    2290:	a4 1b       	sub	r26, r20
    2292:	b5 0b       	sbc	r27, r21
    2294:	eb 01       	movw	r28, r22
    2296:	28 81       	ld	r18, Y
    2298:	39 81       	ldd	r19, Y+1	; 0x01
    229a:	2f 3f       	cpi	r18, 0xFF	; 255
    229c:	df ef       	ldi	r29, 0xFF	; 255
    229e:	3d 07       	cpc	r19, r29
    22a0:	f9 f0       	breq	.+62     	; 0x22e0 <xTaskCheckForTimeOut+0x70>
    22a2:	ec 01       	movw	r28, r24
    22a4:	18 81       	ld	r17, Y
    22a6:	c0 91 e2 04 	lds	r28, 0x04E2	; 0x8004e2 <xNumOfOverflows>
    22aa:	1c 17       	cp	r17, r28
    22ac:	41 f0       	breq	.+16     	; 0x22be <xTaskCheckForTimeOut+0x4e>
    22ae:	e4 17       	cp	r30, r20
    22b0:	f5 07       	cpc	r31, r21
    22b2:	28 f0       	brcs	.+10     	; 0x22be <xTaskCheckForTimeOut+0x4e>
    22b4:	fb 01       	movw	r30, r22
    22b6:	11 82       	std	Z+1, r1	; 0x01
    22b8:	10 82       	st	Z, r1
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	12 c0       	rjmp	.+36     	; 0x22e2 <xTaskCheckForTimeOut+0x72>
    22be:	a2 17       	cp	r26, r18
    22c0:	b3 07       	cpc	r27, r19
    22c2:	48 f4       	brcc	.+18     	; 0x22d6 <xTaskCheckForTimeOut+0x66>
    22c4:	fb 01       	movw	r30, r22
    22c6:	2a 1b       	sub	r18, r26
    22c8:	3b 0b       	sbc	r19, r27
    22ca:	31 83       	std	Z+1, r19	; 0x01
    22cc:	20 83       	st	Z, r18
    22ce:	0e 94 2d 11 	call	0x225a	; 0x225a <vTaskInternalSetTimeOutState>
    22d2:	80 e0       	ldi	r24, 0x00	; 0
    22d4:	06 c0       	rjmp	.+12     	; 0x22e2 <xTaskCheckForTimeOut+0x72>
    22d6:	db 01       	movw	r26, r22
    22d8:	1d 92       	st	X+, r1
    22da:	1c 92       	st	X, r1
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	01 c0       	rjmp	.+2      	; 0x22e2 <xTaskCheckForTimeOut+0x72>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	0f 90       	pop	r0
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	08 95       	ret

000022ee <vTaskMissedYield>:
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <xYieldPending>
    22f4:	08 95       	ret

000022f6 <xTaskPriorityInherit>:
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	fc 01       	movw	r30, r24
    2300:	89 2b       	or	r24, r25
    2302:	09 f4       	brne	.+2      	; 0x2306 <xTaskPriorityInherit+0x10>
    2304:	84 c0       	rjmp	.+264    	; 0x240e <xTaskPriorityInherit+0x118>
    2306:	26 89       	ldd	r18, Z+22	; 0x16
    2308:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    230c:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2310:	56 96       	adiw	r26, 0x16	; 22
    2312:	8c 91       	ld	r24, X
    2314:	28 17       	cp	r18, r24
    2316:	08 f0       	brcs	.+2      	; 0x231a <xTaskPriorityInherit+0x24>
    2318:	70 c0       	rjmp	.+224    	; 0x23fa <xTaskPriorityInherit+0x104>
    231a:	84 85       	ldd	r24, Z+12	; 0x0c
    231c:	95 85       	ldd	r25, Z+13	; 0x0d
    231e:	99 23       	and	r25, r25
    2320:	64 f0       	brlt	.+24     	; 0x233a <xTaskPriorityInherit+0x44>
    2322:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    2326:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    232a:	56 96       	adiw	r26, 0x16	; 22
    232c:	3c 91       	ld	r19, X
    232e:	84 e0       	ldi	r24, 0x04	; 4
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	83 1b       	sub	r24, r19
    2334:	91 09       	sbc	r25, r1
    2336:	95 87       	std	Z+13, r25	; 0x0d
    2338:	84 87       	std	Z+12, r24	; 0x0c
    233a:	82 85       	ldd	r24, Z+10	; 0x0a
    233c:	93 85       	ldd	r25, Z+11	; 0x0b
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	a9 01       	movw	r20, r18
    2342:	44 0f       	add	r20, r20
    2344:	55 1f       	adc	r21, r21
    2346:	44 0f       	add	r20, r20
    2348:	55 1f       	adc	r21, r21
    234a:	44 0f       	add	r20, r20
    234c:	55 1f       	adc	r21, r21
    234e:	24 0f       	add	r18, r20
    2350:	35 1f       	adc	r19, r21
    2352:	23 5e       	subi	r18, 0xE3	; 227
    2354:	3a 4f       	sbci	r19, 0xFA	; 250
    2356:	82 17       	cp	r24, r18
    2358:	93 07       	cpc	r25, r19
    235a:	09 f0       	breq	.+2      	; 0x235e <xTaskPriorityInherit+0x68>
    235c:	45 c0       	rjmp	.+138    	; 0x23e8 <xTaskPriorityInherit+0xf2>
    235e:	ef 01       	movw	r28, r30
    2360:	8f 01       	movw	r16, r30
    2362:	0e 5f       	subi	r16, 0xFE	; 254
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	c8 01       	movw	r24, r16
    2368:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    236c:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    2370:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2374:	86 89       	ldd	r24, Z+22	; 0x16
    2376:	8e 8b       	std	Y+22, r24	; 0x16
    2378:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    237c:	98 17       	cp	r25, r24
    237e:	10 f4       	brcc	.+4      	; 0x2384 <xTaskPriorityInherit+0x8e>
    2380:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	fc 01       	movw	r30, r24
    2388:	ee 0f       	add	r30, r30
    238a:	ff 1f       	adc	r31, r31
    238c:	ee 0f       	add	r30, r30
    238e:	ff 1f       	adc	r31, r31
    2390:	ee 0f       	add	r30, r30
    2392:	ff 1f       	adc	r31, r31
    2394:	8e 0f       	add	r24, r30
    2396:	9f 1f       	adc	r25, r31
    2398:	fc 01       	movw	r30, r24
    239a:	e3 5e       	subi	r30, 0xE3	; 227
    239c:	fa 4f       	sbci	r31, 0xFA	; 250
    239e:	01 80       	ldd	r0, Z+1	; 0x01
    23a0:	f2 81       	ldd	r31, Z+2	; 0x02
    23a2:	e0 2d       	mov	r30, r0
    23a4:	fd 83       	std	Y+5, r31	; 0x05
    23a6:	ec 83       	std	Y+4, r30	; 0x04
    23a8:	84 81       	ldd	r24, Z+4	; 0x04
    23aa:	95 81       	ldd	r25, Z+5	; 0x05
    23ac:	9f 83       	std	Y+7, r25	; 0x07
    23ae:	8e 83       	std	Y+6, r24	; 0x06
    23b0:	a4 81       	ldd	r26, Z+4	; 0x04
    23b2:	b5 81       	ldd	r27, Z+5	; 0x05
    23b4:	13 96       	adiw	r26, 0x03	; 3
    23b6:	1c 93       	st	X, r17
    23b8:	0e 93       	st	-X, r16
    23ba:	12 97       	sbiw	r26, 0x02	; 2
    23bc:	15 83       	std	Z+5, r17	; 0x05
    23be:	04 83       	std	Z+4, r16	; 0x04
    23c0:	8e 89       	ldd	r24, Y+22	; 0x16
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	fc 01       	movw	r30, r24
    23c6:	ee 0f       	add	r30, r30
    23c8:	ff 1f       	adc	r31, r31
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	e8 0f       	add	r30, r24
    23d4:	f9 1f       	adc	r31, r25
    23d6:	e3 5e       	subi	r30, 0xE3	; 227
    23d8:	fa 4f       	sbci	r31, 0xFA	; 250
    23da:	fb 87       	std	Y+11, r31	; 0x0b
    23dc:	ea 87       	std	Y+10, r30	; 0x0a
    23de:	80 81       	ld	r24, Z
    23e0:	8f 5f       	subi	r24, 0xFF	; 255
    23e2:	80 83       	st	Z, r24
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	16 c0       	rjmp	.+44     	; 0x2414 <xTaskPriorityInherit+0x11e>
    23e8:	a0 91 41 05 	lds	r26, 0x0541	; 0x800541 <pxCurrentTCB>
    23ec:	b0 91 42 05 	lds	r27, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    23f0:	56 96       	adiw	r26, 0x16	; 22
    23f2:	8c 91       	ld	r24, X
    23f4:	86 8b       	std	Z+22, r24	; 0x16
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	0d c0       	rjmp	.+26     	; 0x2414 <xTaskPriorityInherit+0x11e>
    23fa:	91 a1       	ldd	r25, Z+33	; 0x21
    23fc:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    2400:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    2404:	86 89       	ldd	r24, Z+22	; 0x16
    2406:	98 17       	cp	r25, r24
    2408:	20 f0       	brcs	.+8      	; 0x2412 <xTaskPriorityInherit+0x11c>
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	03 c0       	rjmp	.+6      	; 0x2414 <xTaskPriorityInherit+0x11e>
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	01 c0       	rjmp	.+2      	; 0x2414 <xTaskPriorityInherit+0x11e>
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
    2418:	1f 91       	pop	r17
    241a:	0f 91       	pop	r16
    241c:	08 95       	ret

0000241e <xTaskPriorityDisinherit>:
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	fc 01       	movw	r30, r24
    2428:	89 2b       	or	r24, r25
    242a:	09 f4       	brne	.+2      	; 0x242e <xTaskPriorityDisinherit+0x10>
    242c:	51 c0       	rjmp	.+162    	; 0x24d0 <xTaskPriorityDisinherit+0xb2>
    242e:	82 a1       	ldd	r24, Z+34	; 0x22
    2430:	81 50       	subi	r24, 0x01	; 1
    2432:	82 a3       	std	Z+34, r24	; 0x22
    2434:	26 89       	ldd	r18, Z+22	; 0x16
    2436:	91 a1       	ldd	r25, Z+33	; 0x21
    2438:	29 17       	cp	r18, r25
    243a:	09 f4       	brne	.+2      	; 0x243e <xTaskPriorityDisinherit+0x20>
    243c:	4b c0       	rjmp	.+150    	; 0x24d4 <xTaskPriorityDisinherit+0xb6>
    243e:	81 11       	cpse	r24, r1
    2440:	4b c0       	rjmp	.+150    	; 0x24d8 <xTaskPriorityDisinherit+0xba>
    2442:	ef 01       	movw	r28, r30
    2444:	8f 01       	movw	r16, r30
    2446:	0e 5f       	subi	r16, 0xFE	; 254
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	c8 01       	movw	r24, r16
    244c:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    2450:	89 a1       	ldd	r24, Y+33	; 0x21
    2452:	8e 8b       	std	Y+22, r24	; 0x16
    2454:	24 e0       	ldi	r18, 0x04	; 4
    2456:	30 e0       	ldi	r19, 0x00	; 0
    2458:	28 1b       	sub	r18, r24
    245a:	31 09       	sbc	r19, r1
    245c:	3d 87       	std	Y+13, r19	; 0x0d
    245e:	2c 87       	std	Y+12, r18	; 0x0c
    2460:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    2464:	98 17       	cp	r25, r24
    2466:	10 f4       	brcc	.+4      	; 0x246c <xTaskPriorityDisinherit+0x4e>
    2468:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	fc 01       	movw	r30, r24
    2470:	ee 0f       	add	r30, r30
    2472:	ff 1f       	adc	r31, r31
    2474:	ee 0f       	add	r30, r30
    2476:	ff 1f       	adc	r31, r31
    2478:	ee 0f       	add	r30, r30
    247a:	ff 1f       	adc	r31, r31
    247c:	8e 0f       	add	r24, r30
    247e:	9f 1f       	adc	r25, r31
    2480:	fc 01       	movw	r30, r24
    2482:	e3 5e       	subi	r30, 0xE3	; 227
    2484:	fa 4f       	sbci	r31, 0xFA	; 250
    2486:	01 80       	ldd	r0, Z+1	; 0x01
    2488:	f2 81       	ldd	r31, Z+2	; 0x02
    248a:	e0 2d       	mov	r30, r0
    248c:	fd 83       	std	Y+5, r31	; 0x05
    248e:	ec 83       	std	Y+4, r30	; 0x04
    2490:	84 81       	ldd	r24, Z+4	; 0x04
    2492:	95 81       	ldd	r25, Z+5	; 0x05
    2494:	9f 83       	std	Y+7, r25	; 0x07
    2496:	8e 83       	std	Y+6, r24	; 0x06
    2498:	a4 81       	ldd	r26, Z+4	; 0x04
    249a:	b5 81       	ldd	r27, Z+5	; 0x05
    249c:	13 96       	adiw	r26, 0x03	; 3
    249e:	1c 93       	st	X, r17
    24a0:	0e 93       	st	-X, r16
    24a2:	12 97       	sbiw	r26, 0x02	; 2
    24a4:	15 83       	std	Z+5, r17	; 0x05
    24a6:	04 83       	std	Z+4, r16	; 0x04
    24a8:	ee 89       	ldd	r30, Y+22	; 0x16
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	cf 01       	movw	r24, r30
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	88 0f       	add	r24, r24
    24b4:	99 1f       	adc	r25, r25
    24b6:	88 0f       	add	r24, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	e8 0f       	add	r30, r24
    24bc:	f9 1f       	adc	r31, r25
    24be:	e3 5e       	subi	r30, 0xE3	; 227
    24c0:	fa 4f       	sbci	r31, 0xFA	; 250
    24c2:	fb 87       	std	Y+11, r31	; 0x0b
    24c4:	ea 87       	std	Y+10, r30	; 0x0a
    24c6:	80 81       	ld	r24, Z
    24c8:	8f 5f       	subi	r24, 0xFF	; 255
    24ca:	80 83       	st	Z, r24
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	05 c0       	rjmp	.+10     	; 0x24da <xTaskPriorityDisinherit+0xbc>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <xTaskPriorityDisinherit+0xbc>
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	01 c0       	rjmp	.+2      	; 0x24da <xTaskPriorityDisinherit+0xbc>
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	df 91       	pop	r29
    24dc:	cf 91       	pop	r28
    24de:	1f 91       	pop	r17
    24e0:	0f 91       	pop	r16
    24e2:	08 95       	ret

000024e4 <vTaskPriorityDisinheritAfterTimeout>:
    24e4:	0f 93       	push	r16
    24e6:	1f 93       	push	r17
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	fc 01       	movw	r30, r24
    24ee:	89 2b       	or	r24, r25
    24f0:	09 f4       	brne	.+2      	; 0x24f4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    24f2:	66 c0       	rjmp	.+204    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    24f4:	91 a1       	ldd	r25, Z+33	; 0x21
    24f6:	96 17       	cp	r25, r22
    24f8:	08 f4       	brcc	.+2      	; 0x24fc <vTaskPriorityDisinheritAfterTimeout+0x18>
    24fa:	96 2f       	mov	r25, r22
    24fc:	86 89       	ldd	r24, Z+22	; 0x16
    24fe:	98 17       	cp	r25, r24
    2500:	09 f4       	brne	.+2      	; 0x2504 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2502:	5e c0       	rjmp	.+188    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2504:	22 a1       	ldd	r18, Z+34	; 0x22
    2506:	21 30       	cpi	r18, 0x01	; 1
    2508:	09 f0       	breq	.+2      	; 0x250c <vTaskPriorityDisinheritAfterTimeout+0x28>
    250a:	5a c0       	rjmp	.+180    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    250c:	96 8b       	std	Z+22, r25	; 0x16
    250e:	24 85       	ldd	r18, Z+12	; 0x0c
    2510:	35 85       	ldd	r19, Z+13	; 0x0d
    2512:	33 23       	and	r19, r19
    2514:	34 f0       	brlt	.+12     	; 0x2522 <vTaskPriorityDisinheritAfterTimeout+0x3e>
    2516:	24 e0       	ldi	r18, 0x04	; 4
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	29 1b       	sub	r18, r25
    251c:	31 09       	sbc	r19, r1
    251e:	35 87       	std	Z+13, r19	; 0x0d
    2520:	24 87       	std	Z+12, r18	; 0x0c
    2522:	22 85       	ldd	r18, Z+10	; 0x0a
    2524:	33 85       	ldd	r19, Z+11	; 0x0b
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	ac 01       	movw	r20, r24
    252a:	44 0f       	add	r20, r20
    252c:	55 1f       	adc	r21, r21
    252e:	44 0f       	add	r20, r20
    2530:	55 1f       	adc	r21, r21
    2532:	44 0f       	add	r20, r20
    2534:	55 1f       	adc	r21, r21
    2536:	84 0f       	add	r24, r20
    2538:	95 1f       	adc	r25, r21
    253a:	83 5e       	subi	r24, 0xE3	; 227
    253c:	9a 4f       	sbci	r25, 0xFA	; 250
    253e:	28 17       	cp	r18, r24
    2540:	39 07       	cpc	r19, r25
    2542:	f1 f5       	brne	.+124    	; 0x25c0 <vTaskPriorityDisinheritAfterTimeout+0xdc>
    2544:	ef 01       	movw	r28, r30
    2546:	8f 01       	movw	r16, r30
    2548:	0e 5f       	subi	r16, 0xFE	; 254
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	c8 01       	movw	r24, r16
    254e:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    2552:	8e 89       	ldd	r24, Y+22	; 0x16
    2554:	90 91 e7 04 	lds	r25, 0x04E7	; 0x8004e7 <uxTopReadyPriority>
    2558:	98 17       	cp	r25, r24
    255a:	10 f4       	brcc	.+4      	; 0x2560 <vTaskPriorityDisinheritAfterTimeout+0x7c>
    255c:	80 93 e7 04 	sts	0x04E7, r24	; 0x8004e7 <uxTopReadyPriority>
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	fc 01       	movw	r30, r24
    2564:	ee 0f       	add	r30, r30
    2566:	ff 1f       	adc	r31, r31
    2568:	ee 0f       	add	r30, r30
    256a:	ff 1f       	adc	r31, r31
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	8e 0f       	add	r24, r30
    2572:	9f 1f       	adc	r25, r31
    2574:	fc 01       	movw	r30, r24
    2576:	e3 5e       	subi	r30, 0xE3	; 227
    2578:	fa 4f       	sbci	r31, 0xFA	; 250
    257a:	01 80       	ldd	r0, Z+1	; 0x01
    257c:	f2 81       	ldd	r31, Z+2	; 0x02
    257e:	e0 2d       	mov	r30, r0
    2580:	fd 83       	std	Y+5, r31	; 0x05
    2582:	ec 83       	std	Y+4, r30	; 0x04
    2584:	84 81       	ldd	r24, Z+4	; 0x04
    2586:	95 81       	ldd	r25, Z+5	; 0x05
    2588:	9f 83       	std	Y+7, r25	; 0x07
    258a:	8e 83       	std	Y+6, r24	; 0x06
    258c:	a4 81       	ldd	r26, Z+4	; 0x04
    258e:	b5 81       	ldd	r27, Z+5	; 0x05
    2590:	13 96       	adiw	r26, 0x03	; 3
    2592:	1c 93       	st	X, r17
    2594:	0e 93       	st	-X, r16
    2596:	12 97       	sbiw	r26, 0x02	; 2
    2598:	15 83       	std	Z+5, r17	; 0x05
    259a:	04 83       	std	Z+4, r16	; 0x04
    259c:	8e 89       	ldd	r24, Y+22	; 0x16
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	fc 01       	movw	r30, r24
    25a2:	ee 0f       	add	r30, r30
    25a4:	ff 1f       	adc	r31, r31
    25a6:	ee 0f       	add	r30, r30
    25a8:	ff 1f       	adc	r31, r31
    25aa:	ee 0f       	add	r30, r30
    25ac:	ff 1f       	adc	r31, r31
    25ae:	e8 0f       	add	r30, r24
    25b0:	f9 1f       	adc	r31, r25
    25b2:	e3 5e       	subi	r30, 0xE3	; 227
    25b4:	fa 4f       	sbci	r31, 0xFA	; 250
    25b6:	fb 87       	std	Y+11, r31	; 0x0b
    25b8:	ea 87       	std	Y+10, r30	; 0x0a
    25ba:	80 81       	ld	r24, Z
    25bc:	8f 5f       	subi	r24, 0xFF	; 255
    25be:	80 83       	st	Z, r24
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	1f 91       	pop	r17
    25c6:	0f 91       	pop	r16
    25c8:	08 95       	ret

000025ca <pvTaskIncrementMutexHeldCount>:

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
    25ca:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    25ce:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    25d2:	89 2b       	or	r24, r25
    25d4:	39 f0       	breq	.+14     	; 0x25e4 <pvTaskIncrementMutexHeldCount+0x1a>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
    25d6:	e0 91 41 05 	lds	r30, 0x0541	; 0x800541 <pxCurrentTCB>
    25da:	f0 91 42 05 	lds	r31, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    25de:	82 a1       	ldd	r24, Z+34	; 0x22
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	82 a3       	std	Z+34, r24	; 0x22
        }

        return pxCurrentTCB;
    25e4:	80 91 41 05 	lds	r24, 0x0541	; 0x800541 <pxCurrentTCB>
    25e8:	90 91 42 05 	lds	r25, 0x0542	; 0x800542 <pxCurrentTCB+0x1>
    }
    25ec:	08 95       	ret

000025ee <prvGetNextExpireTime>:
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
        }

        traceTIMER_CREATE( pxNewTimer );
    }
    25ee:	dc 01       	movw	r26, r24
    25f0:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxCurrentTimerList>
    25f4:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxCurrentTimerList+0x1>
    25f8:	80 81       	ld	r24, Z
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	81 11       	cpse	r24, r1
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	9c 93       	st	X, r25
    2602:	91 11       	cpse	r25, r1
    2604:	06 c0       	rjmp	.+12     	; 0x2612 <prvGetNextExpireTime+0x24>
    2606:	05 80       	ldd	r0, Z+5	; 0x05
    2608:	f6 81       	ldd	r31, Z+6	; 0x06
    260a:	e0 2d       	mov	r30, r0
    260c:	80 81       	ld	r24, Z
    260e:	91 81       	ldd	r25, Z+1	; 0x01
    2610:	08 95       	ret
    2612:	80 e0       	ldi	r24, 0x00	; 0
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	08 95       	ret

00002618 <prvInsertTimerInActiveList>:
    2618:	fc 01       	movw	r30, r24
    261a:	73 83       	std	Z+3, r23	; 0x03
    261c:	62 83       	std	Z+2, r22	; 0x02
    261e:	91 87       	std	Z+9, r25	; 0x09
    2620:	80 87       	std	Z+8, r24	; 0x08
    2622:	46 17       	cp	r20, r22
    2624:	57 07       	cpc	r21, r23
    2626:	90 f0       	brcs	.+36     	; 0x264c <prvInsertTimerInActiveList+0x34>
    2628:	42 1b       	sub	r20, r18
    262a:	53 0b       	sbc	r21, r19
    262c:	84 85       	ldd	r24, Z+12	; 0x0c
    262e:	95 85       	ldd	r25, Z+13	; 0x0d
    2630:	48 17       	cp	r20, r24
    2632:	59 07       	cpc	r21, r25
    2634:	e0 f4       	brcc	.+56     	; 0x266e <prvInsertTimerInActiveList+0x56>
    2636:	bf 01       	movw	r22, r30
    2638:	6e 5f       	subi	r22, 0xFE	; 254
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxOverflowTimerList>
    2640:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxOverflowTimerList+0x1>
    2644:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vListInsert>
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	08 95       	ret
    264c:	42 17       	cp	r20, r18
    264e:	53 07       	cpc	r21, r19
    2650:	18 f4       	brcc	.+6      	; 0x2658 <prvInsertTimerInActiveList+0x40>
    2652:	62 17       	cp	r22, r18
    2654:	73 07       	cpc	r23, r19
    2656:	68 f4       	brcc	.+26     	; 0x2672 <prvInsertTimerInActiveList+0x5a>
    2658:	bf 01       	movw	r22, r30
    265a:	6e 5f       	subi	r22, 0xFE	; 254
    265c:	7f 4f       	sbci	r23, 0xFF	; 255
    265e:	80 91 4b 05 	lds	r24, 0x054B	; 0x80054b <pxCurrentTimerList>
    2662:	90 91 4c 05 	lds	r25, 0x054C	; 0x80054c <pxCurrentTimerList+0x1>
    2666:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <vListInsert>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	08 95       	ret
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	08 95       	ret
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	08 95       	ret

00002676 <prvReloadTimer>:
    2676:	ef 92       	push	r14
    2678:	ff 92       	push	r15
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
    2684:	8b 01       	movw	r16, r22
    2686:	7a 01       	movw	r14, r20
    2688:	08 c0       	rjmp	.+16     	; 0x269a <prvReloadTimer+0x24>
    268a:	8c 85       	ldd	r24, Y+12	; 0x0c
    268c:	9d 85       	ldd	r25, Y+13	; 0x0d
    268e:	08 0f       	add	r16, r24
    2690:	19 1f       	adc	r17, r25
    2692:	e8 89       	ldd	r30, Y+16	; 0x10
    2694:	f9 89       	ldd	r31, Y+17	; 0x11
    2696:	ce 01       	movw	r24, r28
    2698:	09 95       	icall
    269a:	6c 85       	ldd	r22, Y+12	; 0x0c
    269c:	7d 85       	ldd	r23, Y+13	; 0x0d
    269e:	60 0f       	add	r22, r16
    26a0:	71 1f       	adc	r23, r17
    26a2:	98 01       	movw	r18, r16
    26a4:	a7 01       	movw	r20, r14
    26a6:	ce 01       	movw	r24, r28
    26a8:	0e 94 0c 13 	call	0x2618	; 0x2618 <prvInsertTimerInActiveList>
    26ac:	81 11       	cpse	r24, r1
    26ae:	ed cf       	rjmp	.-38     	; 0x268a <prvReloadTimer+0x14>
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	ff 90       	pop	r15
    26ba:	ef 90       	pop	r14
    26bc:	08 95       	ret

000026be <prvProcessExpiredTimer>:
    26be:	ef 92       	push	r14
    26c0:	ff 92       	push	r15
    26c2:	0f 93       	push	r16
    26c4:	1f 93       	push	r17
    26c6:	cf 93       	push	r28
    26c8:	df 93       	push	r29
    26ca:	8c 01       	movw	r16, r24
    26cc:	7b 01       	movw	r14, r22
    26ce:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxCurrentTimerList>
    26d2:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxCurrentTimerList+0x1>
    26d6:	05 80       	ldd	r0, Z+5	; 0x05
    26d8:	f6 81       	ldd	r31, Z+6	; 0x06
    26da:	e0 2d       	mov	r30, r0
    26dc:	c6 81       	ldd	r28, Z+6	; 0x06
    26de:	d7 81       	ldd	r29, Z+7	; 0x07
    26e0:	ce 01       	movw	r24, r28
    26e2:	02 96       	adiw	r24, 0x02	; 2
    26e4:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    26e8:	8a 89       	ldd	r24, Y+18	; 0x12
    26ea:	82 ff       	sbrs	r24, 2
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <prvProcessExpiredTimer+0x3c>
    26ee:	a7 01       	movw	r20, r14
    26f0:	b8 01       	movw	r22, r16
    26f2:	ce 01       	movw	r24, r28
    26f4:	0e 94 3b 13 	call	0x2676	; 0x2676 <prvReloadTimer>
    26f8:	02 c0       	rjmp	.+4      	; 0x26fe <prvProcessExpiredTimer+0x40>
    26fa:	8e 7f       	andi	r24, 0xFE	; 254
    26fc:	8a 8b       	std	Y+18, r24	; 0x12
    26fe:	e8 89       	ldd	r30, Y+16	; 0x10
    2700:	f9 89       	ldd	r31, Y+17	; 0x11
    2702:	ce 01       	movw	r24, r28
    2704:	09 95       	icall
    2706:	df 91       	pop	r29
    2708:	cf 91       	pop	r28
    270a:	1f 91       	pop	r17
    270c:	0f 91       	pop	r16
    270e:	ff 90       	pop	r15
    2710:	ef 90       	pop	r14
    2712:	08 95       	ret

00002714 <prvSwitchTimerLists>:
    2714:	09 c0       	rjmp	.+18     	; 0x2728 <prvSwitchTimerLists+0x14>
    2716:	05 80       	ldd	r0, Z+5	; 0x05
    2718:	f6 81       	ldd	r31, Z+6	; 0x06
    271a:	e0 2d       	mov	r30, r0
    271c:	6f ef       	ldi	r22, 0xFF	; 255
    271e:	7f ef       	ldi	r23, 0xFF	; 255
    2720:	80 81       	ld	r24, Z
    2722:	91 81       	ldd	r25, Z+1	; 0x01
    2724:	0e 94 5f 13 	call	0x26be	; 0x26be <prvProcessExpiredTimer>
    2728:	e0 91 4b 05 	lds	r30, 0x054B	; 0x80054b <pxCurrentTimerList>
    272c:	f0 91 4c 05 	lds	r31, 0x054C	; 0x80054c <pxCurrentTimerList+0x1>
    2730:	80 81       	ld	r24, Z
    2732:	81 11       	cpse	r24, r1
    2734:	f0 cf       	rjmp	.-32     	; 0x2716 <prvSwitchTimerLists+0x2>
    2736:	80 91 49 05 	lds	r24, 0x0549	; 0x800549 <pxOverflowTimerList>
    273a:	90 91 4a 05 	lds	r25, 0x054A	; 0x80054a <pxOverflowTimerList+0x1>
    273e:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pxCurrentTimerList+0x1>
    2742:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pxCurrentTimerList>
    2746:	f0 93 4a 05 	sts	0x054A, r31	; 0x80054a <pxOverflowTimerList+0x1>
    274a:	e0 93 49 05 	sts	0x0549, r30	; 0x800549 <pxOverflowTimerList>
    274e:	08 95       	ret

00002750 <prvSampleTimeNow>:
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	cf 93       	push	r28
    2756:	df 93       	push	r29
    2758:	8c 01       	movw	r16, r24
    275a:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <xTaskGetTickCount>
    275e:	ec 01       	movw	r28, r24
    2760:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <xLastTime.2429>
    2764:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <xLastTime.2429+0x1>
    2768:	c8 17       	cp	r28, r24
    276a:	d9 07       	cpc	r29, r25
    276c:	30 f4       	brcc	.+12     	; 0x277a <prvSampleTimeNow+0x2a>
    276e:	0e 94 8a 13 	call	0x2714	; 0x2714 <prvSwitchTimerLists>
    2772:	81 e0       	ldi	r24, 0x01	; 1
    2774:	f8 01       	movw	r30, r16
    2776:	80 83       	st	Z, r24
    2778:	02 c0       	rjmp	.+4      	; 0x277e <prvSampleTimeNow+0x2e>
    277a:	f8 01       	movw	r30, r16
    277c:	10 82       	st	Z, r1
    277e:	d0 93 44 05 	sts	0x0544, r29	; 0x800544 <xLastTime.2429+0x1>
    2782:	c0 93 43 05 	sts	0x0543, r28	; 0x800543 <xLastTime.2429>
    2786:	ce 01       	movw	r24, r28
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	08 95       	ret

00002792 <prvProcessTimerOrBlockTask>:
    2792:	cf 92       	push	r12
    2794:	df 92       	push	r13
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	1f 93       	push	r17
    279c:	cf 93       	push	r28
    279e:	df 93       	push	r29
    27a0:	1f 92       	push	r1
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	7c 01       	movw	r14, r24
    27a8:	16 2f       	mov	r17, r22
    27aa:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <vTaskSuspendAll>
    27ae:	ce 01       	movw	r24, r28
    27b0:	01 96       	adiw	r24, 0x01	; 1
    27b2:	0e 94 a8 13 	call	0x2750	; 0x2750 <prvSampleTimeNow>
    27b6:	6c 01       	movw	r12, r24
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	81 11       	cpse	r24, r1
    27bc:	27 c0       	rjmp	.+78     	; 0x280c <prvProcessTimerOrBlockTask+0x7a>
    27be:	11 11       	cpse	r17, r1
    27c0:	0a c0       	rjmp	.+20     	; 0x27d6 <prvProcessTimerOrBlockTask+0x44>
    27c2:	ce 14       	cp	r12, r14
    27c4:	df 04       	cpc	r13, r15
    27c6:	38 f0       	brcs	.+14     	; 0x27d6 <prvProcessTimerOrBlockTask+0x44>
    27c8:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    27cc:	b6 01       	movw	r22, r12
    27ce:	c7 01       	movw	r24, r14
    27d0:	0e 94 5f 13 	call	0x26be	; 0x26be <prvProcessExpiredTimer>
    27d4:	1d c0       	rjmp	.+58     	; 0x2810 <prvProcessTimerOrBlockTask+0x7e>
    27d6:	11 23       	and	r17, r17
    27d8:	41 f0       	breq	.+16     	; 0x27ea <prvProcessTimerOrBlockTask+0x58>
    27da:	e0 91 49 05 	lds	r30, 0x0549	; 0x800549 <pxOverflowTimerList>
    27de:	f0 91 4a 05 	lds	r31, 0x054A	; 0x80054a <pxOverflowTimerList+0x1>
    27e2:	80 81       	ld	r24, Z
    27e4:	11 e0       	ldi	r17, 0x01	; 1
    27e6:	81 11       	cpse	r24, r1
    27e8:	10 e0       	ldi	r17, 0x00	; 0
    27ea:	b7 01       	movw	r22, r14
    27ec:	6c 19       	sub	r22, r12
    27ee:	7d 09       	sbc	r23, r13
    27f0:	41 2f       	mov	r20, r17
    27f2:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <xTimerQueue>
    27f6:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <xTimerQueue+0x1>
    27fa:	0e 94 31 0a 	call	0x1462	; 0x1462 <vQueueWaitForMessageRestricted>
    27fe:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    2802:	81 11       	cpse	r24, r1
    2804:	05 c0       	rjmp	.+10     	; 0x2810 <prvProcessTimerOrBlockTask+0x7e>
    2806:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <vPortYield>
    280a:	02 c0       	rjmp	.+4      	; 0x2810 <prvProcessTimerOrBlockTask+0x7e>
    280c:	0e 94 75 0e 	call	0x1cea	; 0x1cea <xTaskResumeAll>
    2810:	0f 90       	pop	r0
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	ff 90       	pop	r15
    281a:	ef 90       	pop	r14
    281c:	df 90       	pop	r13
    281e:	cf 90       	pop	r12
    2820:	08 95       	ret

00002822 <prvProcessReceivedCommands>:
    2822:	ef 92       	push	r14
    2824:	ff 92       	push	r15
    2826:	0f 93       	push	r16
    2828:	1f 93       	push	r17
    282a:	cf 93       	push	r28
    282c:	df 93       	push	r29
    282e:	00 d0       	rcall	.+0      	; 0x2830 <prvProcessReceivedCommands+0xe>
    2830:	00 d0       	rcall	.+0      	; 0x2832 <prvProcessReceivedCommands+0x10>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <prvProcessReceivedCommands+0x12>
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	7a c0       	rjmp	.+244    	; 0x292e <prvProcessReceivedCommands+0x10c>
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	88 23       	and	r24, r24
    283e:	0c f4       	brge	.+2      	; 0x2842 <prvProcessReceivedCommands+0x20>
    2840:	76 c0       	rjmp	.+236    	; 0x292e <prvProcessReceivedCommands+0x10c>
    2842:	0c 81       	ldd	r16, Y+4	; 0x04
    2844:	1d 81       	ldd	r17, Y+5	; 0x05
    2846:	d8 01       	movw	r26, r16
    2848:	1a 96       	adiw	r26, 0x0a	; 10
    284a:	8d 91       	ld	r24, X+
    284c:	9c 91       	ld	r25, X
    284e:	1b 97       	sbiw	r26, 0x0b	; 11
    2850:	89 2b       	or	r24, r25
    2852:	21 f0       	breq	.+8      	; 0x285c <prvProcessReceivedCommands+0x3a>
    2854:	c8 01       	movw	r24, r16
    2856:	02 96       	adiw	r24, 0x02	; 2
    2858:	0e 94 05 03 	call	0x60a	; 0x60a <uxListRemove>
    285c:	ce 01       	movw	r24, r28
    285e:	06 96       	adiw	r24, 0x06	; 6
    2860:	0e 94 a8 13 	call	0x2750	; 0x2750 <prvSampleTimeNow>
    2864:	7c 01       	movw	r14, r24
    2866:	e9 81       	ldd	r30, Y+1	; 0x01
    2868:	8e 2f       	mov	r24, r30
    286a:	ee 0f       	add	r30, r30
    286c:	99 0b       	sbc	r25, r25
    286e:	aa 0b       	sbc	r26, r26
    2870:	bb 0b       	sbc	r27, r27
    2872:	fc 01       	movw	r30, r24
    2874:	31 97       	sbiw	r30, 0x01	; 1
    2876:	e9 30       	cpi	r30, 0x09	; 9
    2878:	f1 05       	cpc	r31, r1
    287a:	08 f0       	brcs	.+2      	; 0x287e <prvProcessReceivedCommands+0x5c>
    287c:	58 c0       	rjmp	.+176    	; 0x292e <prvProcessReceivedCommands+0x10c>
    287e:	e6 5d       	subi	r30, 0xD6	; 214
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	0c 94 e9 16 	jmp	0x2dd2	; 0x2dd2 <__tablejump2__>
    2886:	f8 01       	movw	r30, r16
    2888:	82 89       	ldd	r24, Z+18	; 0x12
    288a:	81 60       	ori	r24, 0x01	; 1
    288c:	82 8b       	std	Z+18, r24	; 0x12
    288e:	2a 81       	ldd	r18, Y+2	; 0x02
    2890:	3b 81       	ldd	r19, Y+3	; 0x03
    2892:	64 85       	ldd	r22, Z+12	; 0x0c
    2894:	75 85       	ldd	r23, Z+13	; 0x0d
    2896:	62 0f       	add	r22, r18
    2898:	73 1f       	adc	r23, r19
    289a:	a7 01       	movw	r20, r14
    289c:	c8 01       	movw	r24, r16
    289e:	0e 94 0c 13 	call	0x2618	; 0x2618 <prvInsertTimerInActiveList>
    28a2:	88 23       	and	r24, r24
    28a4:	09 f4       	brne	.+2      	; 0x28a8 <prvProcessReceivedCommands+0x86>
    28a6:	43 c0       	rjmp	.+134    	; 0x292e <prvProcessReceivedCommands+0x10c>
    28a8:	d8 01       	movw	r26, r16
    28aa:	52 96       	adiw	r26, 0x12	; 18
    28ac:	8c 91       	ld	r24, X
    28ae:	52 97       	sbiw	r26, 0x12	; 18
    28b0:	82 ff       	sbrs	r24, 2
    28b2:	0d c0       	rjmp	.+26     	; 0x28ce <prvProcessReceivedCommands+0xac>
    28b4:	6a 81       	ldd	r22, Y+2	; 0x02
    28b6:	7b 81       	ldd	r23, Y+3	; 0x03
    28b8:	1c 96       	adiw	r26, 0x0c	; 12
    28ba:	8d 91       	ld	r24, X+
    28bc:	9c 91       	ld	r25, X
    28be:	1d 97       	sbiw	r26, 0x0d	; 13
    28c0:	68 0f       	add	r22, r24
    28c2:	79 1f       	adc	r23, r25
    28c4:	a7 01       	movw	r20, r14
    28c6:	c8 01       	movw	r24, r16
    28c8:	0e 94 3b 13 	call	0x2676	; 0x2676 <prvReloadTimer>
    28cc:	03 c0       	rjmp	.+6      	; 0x28d4 <prvProcessReceivedCommands+0xb2>
    28ce:	8e 7f       	andi	r24, 0xFE	; 254
    28d0:	f8 01       	movw	r30, r16
    28d2:	82 8b       	std	Z+18, r24	; 0x12
    28d4:	d8 01       	movw	r26, r16
    28d6:	50 96       	adiw	r26, 0x10	; 16
    28d8:	ed 91       	ld	r30, X+
    28da:	fc 91       	ld	r31, X
    28dc:	51 97       	sbiw	r26, 0x11	; 17
    28de:	c8 01       	movw	r24, r16
    28e0:	09 95       	icall
    28e2:	25 c0       	rjmp	.+74     	; 0x292e <prvProcessReceivedCommands+0x10c>
    28e4:	f8 01       	movw	r30, r16
    28e6:	82 89       	ldd	r24, Z+18	; 0x12
    28e8:	8e 7f       	andi	r24, 0xFE	; 254
    28ea:	82 8b       	std	Z+18, r24	; 0x12
    28ec:	20 c0       	rjmp	.+64     	; 0x292e <prvProcessReceivedCommands+0x10c>
    28ee:	d8 01       	movw	r26, r16
    28f0:	52 96       	adiw	r26, 0x12	; 18
    28f2:	8c 91       	ld	r24, X
    28f4:	52 97       	sbiw	r26, 0x12	; 18
    28f6:	81 60       	ori	r24, 0x01	; 1
    28f8:	52 96       	adiw	r26, 0x12	; 18
    28fa:	8c 93       	st	X, r24
    28fc:	52 97       	sbiw	r26, 0x12	; 18
    28fe:	6a 81       	ldd	r22, Y+2	; 0x02
    2900:	7b 81       	ldd	r23, Y+3	; 0x03
    2902:	1d 96       	adiw	r26, 0x0d	; 13
    2904:	7c 93       	st	X, r23
    2906:	6e 93       	st	-X, r22
    2908:	1c 97       	sbiw	r26, 0x0c	; 12
    290a:	6e 0d       	add	r22, r14
    290c:	7f 1d       	adc	r23, r15
    290e:	97 01       	movw	r18, r14
    2910:	a7 01       	movw	r20, r14
    2912:	c8 01       	movw	r24, r16
    2914:	0e 94 0c 13 	call	0x2618	; 0x2618 <prvInsertTimerInActiveList>
    2918:	0a c0       	rjmp	.+20     	; 0x292e <prvProcessReceivedCommands+0x10c>
    291a:	f8 01       	movw	r30, r16
    291c:	82 89       	ldd	r24, Z+18	; 0x12
    291e:	81 fd       	sbrc	r24, 1
    2920:	04 c0       	rjmp	.+8      	; 0x292a <prvProcessReceivedCommands+0x108>
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 9f 00 	call	0x13e	; 0x13e <vPortFree>
    2928:	02 c0       	rjmp	.+4      	; 0x292e <prvProcessReceivedCommands+0x10c>
    292a:	8e 7f       	andi	r24, 0xFE	; 254
    292c:	82 8b       	std	Z+18, r24	; 0x12
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	50 e0       	ldi	r21, 0x00	; 0
    2932:	be 01       	movw	r22, r28
    2934:	6f 5f       	subi	r22, 0xFF	; 255
    2936:	7f 4f       	sbci	r23, 0xFF	; 255
    2938:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <xTimerQueue>
    293c:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <xTimerQueue+0x1>
    2940:	0e 94 f1 08 	call	0x11e2	; 0x11e2 <xQueueReceive>
    2944:	81 11       	cpse	r24, r1
    2946:	79 cf       	rjmp	.-270    	; 0x283a <prvProcessReceivedCommands+0x18>
    2948:	26 96       	adiw	r28, 0x06	; 6
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	08 95       	ret

00002962 <prvTimerTask>:
    2962:	cf 93       	push	r28
    2964:	df 93       	push	r29
    2966:	1f 92       	push	r1
    2968:	cd b7       	in	r28, 0x3d	; 61
    296a:	de b7       	in	r29, 0x3e	; 62
    296c:	ce 01       	movw	r24, r28
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	0e 94 f7 12 	call	0x25ee	; 0x25ee <prvGetNextExpireTime>
    2974:	69 81       	ldd	r22, Y+1	; 0x01
    2976:	0e 94 c9 13 	call	0x2792	; 0x2792 <prvProcessTimerOrBlockTask>
    297a:	0e 94 11 14 	call	0x2822	; 0x2822 <prvProcessReceivedCommands>
    297e:	f6 cf       	rjmp	.-20     	; 0x296c <prvTimerTask+0xa>

00002980 <prvCheckForValidListAndQueue>:
    2980:	0f b6       	in	r0, 0x3f	; 63
    2982:	f8 94       	cli
    2984:	0f 92       	push	r0
    2986:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <xTimerQueue>
    298a:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <xTimerQueue+0x1>
    298e:	89 2b       	or	r24, r25
    2990:	e9 f4       	brne	.+58     	; 0x29cc <prvCheckForValidListAndQueue+0x4c>
    2992:	86 e5       	ldi	r24, 0x56	; 86
    2994:	95 e0       	ldi	r25, 0x05	; 5
    2996:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    299a:	8d e4       	ldi	r24, 0x4D	; 77
    299c:	95 e0       	ldi	r25, 0x05	; 5
    299e:	0e 94 a1 02 	call	0x542	; 0x542 <vListInitialise>
    29a2:	86 e5       	ldi	r24, 0x56	; 86
    29a4:	95 e0       	ldi	r25, 0x05	; 5
    29a6:	90 93 4c 05 	sts	0x054C, r25	; 0x80054c <pxCurrentTimerList+0x1>
    29aa:	80 93 4b 05 	sts	0x054B, r24	; 0x80054b <pxCurrentTimerList>
    29ae:	8d e4       	ldi	r24, 0x4D	; 77
    29b0:	95 e0       	ldi	r25, 0x05	; 5
    29b2:	90 93 4a 05 	sts	0x054A, r25	; 0x80054a <pxOverflowTimerList+0x1>
    29b6:	80 93 49 05 	sts	0x0549, r24	; 0x800549 <pxOverflowTimerList>
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	65 e0       	ldi	r22, 0x05	; 5
    29be:	8a e0       	ldi	r24, 0x0A	; 10
    29c0:	0e 94 1e 08 	call	0x103c	; 0x103c <xQueueGenericCreate>
    29c4:	90 93 48 05 	sts	0x0548, r25	; 0x800548 <xTimerQueue+0x1>
    29c8:	80 93 47 05 	sts	0x0547, r24	; 0x800547 <xTimerQueue>
    29cc:	0f 90       	pop	r0
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	08 95       	ret

000029d2 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
    29d2:	ef 92       	push	r14
    29d4:	ff 92       	push	r15
    29d6:	0f 93       	push	r16

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
    29d8:	0e 94 c0 14 	call	0x2980	; 0x2980 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
    29dc:	80 91 47 05 	lds	r24, 0x0547	; 0x800547 <xTimerQueue>
    29e0:	90 91 48 05 	lds	r25, 0x0548	; 0x800548 <xTimerQueue+0x1>
    29e4:	89 2b       	or	r24, r25
    29e6:	91 f0       	breq	.+36     	; 0x2a0c <xTimerCreateTimerTask+0x3a>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
    29e8:	0f 2e       	mov	r0, r31
    29ea:	f5 e4       	ldi	r31, 0x45	; 69
    29ec:	ef 2e       	mov	r14, r31
    29ee:	f5 e0       	ldi	r31, 0x05	; 5
    29f0:	ff 2e       	mov	r15, r31
    29f2:	f0 2d       	mov	r31, r0
    29f4:	02 e0       	ldi	r16, 0x02	; 2
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e8       	ldi	r20, 0x80	; 128
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	6f ec       	ldi	r22, 0xCF	; 207
    2a00:	70 e0       	ldi	r23, 0x00	; 0
    2a02:	81 eb       	ldi	r24, 0xB1	; 177
    2a04:	94 e1       	ldi	r25, 0x14	; 20
    2a06:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <xTaskCreate>
    2a0a:	01 c0       	rjmp	.+2      	; 0x2a0e <xTimerCreateTimerTask+0x3c>
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
        BaseType_t xReturn = pdFAIL;
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
        return xReturn;
    }
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	08 95       	ret

00002a16 <__divsf3>:
    2a16:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <__divsf3x>
    2a1a:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__fp_round>
    2a1e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__fp_pscB>
    2a22:	58 f0       	brcs	.+22     	; 0x2a3a <__divsf3+0x24>
    2a24:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__fp_pscA>
    2a28:	40 f0       	brcs	.+16     	; 0x2a3a <__divsf3+0x24>
    2a2a:	29 f4       	brne	.+10     	; 0x2a36 <__divsf3+0x20>
    2a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    2a2e:	29 f0       	breq	.+10     	; 0x2a3a <__divsf3+0x24>
    2a30:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__fp_inf>
    2a34:	51 11       	cpse	r21, r1
    2a36:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__fp_szero>
    2a3a:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_nan>

00002a3e <__divsf3x>:
    2a3e:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_split3>
    2a42:	68 f3       	brcs	.-38     	; 0x2a1e <__divsf3+0x8>

00002a44 <__divsf3_pse>:
    2a44:	99 23       	and	r25, r25
    2a46:	b1 f3       	breq	.-20     	; 0x2a34 <__divsf3+0x1e>
    2a48:	55 23       	and	r21, r21
    2a4a:	91 f3       	breq	.-28     	; 0x2a30 <__divsf3+0x1a>
    2a4c:	95 1b       	sub	r25, r21
    2a4e:	55 0b       	sbc	r21, r21
    2a50:	bb 27       	eor	r27, r27
    2a52:	aa 27       	eor	r26, r26
    2a54:	62 17       	cp	r22, r18
    2a56:	73 07       	cpc	r23, r19
    2a58:	84 07       	cpc	r24, r20
    2a5a:	38 f0       	brcs	.+14     	; 0x2a6a <__divsf3_pse+0x26>
    2a5c:	9f 5f       	subi	r25, 0xFF	; 255
    2a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a60:	22 0f       	add	r18, r18
    2a62:	33 1f       	adc	r19, r19
    2a64:	44 1f       	adc	r20, r20
    2a66:	aa 1f       	adc	r26, r26
    2a68:	a9 f3       	breq	.-22     	; 0x2a54 <__divsf3_pse+0x10>
    2a6a:	35 d0       	rcall	.+106    	; 0x2ad6 <__divsf3_pse+0x92>
    2a6c:	0e 2e       	mov	r0, r30
    2a6e:	3a f0       	brmi	.+14     	; 0x2a7e <__divsf3_pse+0x3a>
    2a70:	e0 e8       	ldi	r30, 0x80	; 128
    2a72:	32 d0       	rcall	.+100    	; 0x2ad8 <__divsf3_pse+0x94>
    2a74:	91 50       	subi	r25, 0x01	; 1
    2a76:	50 40       	sbci	r21, 0x00	; 0
    2a78:	e6 95       	lsr	r30
    2a7a:	00 1c       	adc	r0, r0
    2a7c:	ca f7       	brpl	.-14     	; 0x2a70 <__divsf3_pse+0x2c>
    2a7e:	2b d0       	rcall	.+86     	; 0x2ad6 <__divsf3_pse+0x92>
    2a80:	fe 2f       	mov	r31, r30
    2a82:	29 d0       	rcall	.+82     	; 0x2ad6 <__divsf3_pse+0x92>
    2a84:	66 0f       	add	r22, r22
    2a86:	77 1f       	adc	r23, r23
    2a88:	88 1f       	adc	r24, r24
    2a8a:	bb 1f       	adc	r27, r27
    2a8c:	26 17       	cp	r18, r22
    2a8e:	37 07       	cpc	r19, r23
    2a90:	48 07       	cpc	r20, r24
    2a92:	ab 07       	cpc	r26, r27
    2a94:	b0 e8       	ldi	r27, 0x80	; 128
    2a96:	09 f0       	breq	.+2      	; 0x2a9a <__divsf3_pse+0x56>
    2a98:	bb 0b       	sbc	r27, r27
    2a9a:	80 2d       	mov	r24, r0
    2a9c:	bf 01       	movw	r22, r30
    2a9e:	ff 27       	eor	r31, r31
    2aa0:	93 58       	subi	r25, 0x83	; 131
    2aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa4:	3a f0       	brmi	.+14     	; 0x2ab4 <__divsf3_pse+0x70>
    2aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    2aa8:	51 05       	cpc	r21, r1
    2aaa:	78 f0       	brcs	.+30     	; 0x2aca <__divsf3_pse+0x86>
    2aac:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__fp_inf>
    2ab0:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__fp_szero>
    2ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab6:	e4 f3       	brlt	.-8      	; 0x2ab0 <__divsf3_pse+0x6c>
    2ab8:	98 3e       	cpi	r25, 0xE8	; 232
    2aba:	d4 f3       	brlt	.-12     	; 0x2ab0 <__divsf3_pse+0x6c>
    2abc:	86 95       	lsr	r24
    2abe:	77 95       	ror	r23
    2ac0:	67 95       	ror	r22
    2ac2:	b7 95       	ror	r27
    2ac4:	f7 95       	ror	r31
    2ac6:	9f 5f       	subi	r25, 0xFF	; 255
    2ac8:	c9 f7       	brne	.-14     	; 0x2abc <__divsf3_pse+0x78>
    2aca:	88 0f       	add	r24, r24
    2acc:	91 1d       	adc	r25, r1
    2ace:	96 95       	lsr	r25
    2ad0:	87 95       	ror	r24
    2ad2:	97 f9       	bld	r25, 7
    2ad4:	08 95       	ret
    2ad6:	e1 e0       	ldi	r30, 0x01	; 1
    2ad8:	66 0f       	add	r22, r22
    2ada:	77 1f       	adc	r23, r23
    2adc:	88 1f       	adc	r24, r24
    2ade:	bb 1f       	adc	r27, r27
    2ae0:	62 17       	cp	r22, r18
    2ae2:	73 07       	cpc	r23, r19
    2ae4:	84 07       	cpc	r24, r20
    2ae6:	ba 07       	cpc	r27, r26
    2ae8:	20 f0       	brcs	.+8      	; 0x2af2 <__divsf3_pse+0xae>
    2aea:	62 1b       	sub	r22, r18
    2aec:	73 0b       	sbc	r23, r19
    2aee:	84 0b       	sbc	r24, r20
    2af0:	ba 0b       	sbc	r27, r26
    2af2:	ee 1f       	adc	r30, r30
    2af4:	88 f7       	brcc	.-30     	; 0x2ad8 <__divsf3_pse+0x94>
    2af6:	e0 95       	com	r30
    2af8:	08 95       	ret

00002afa <__fixunssfsi>:
    2afa:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__fp_splitA>
    2afe:	88 f0       	brcs	.+34     	; 0x2b22 <__fixunssfsi+0x28>
    2b00:	9f 57       	subi	r25, 0x7F	; 127
    2b02:	98 f0       	brcs	.+38     	; 0x2b2a <__fixunssfsi+0x30>
    2b04:	b9 2f       	mov	r27, r25
    2b06:	99 27       	eor	r25, r25
    2b08:	b7 51       	subi	r27, 0x17	; 23
    2b0a:	b0 f0       	brcs	.+44     	; 0x2b38 <__fixunssfsi+0x3e>
    2b0c:	e1 f0       	breq	.+56     	; 0x2b46 <__fixunssfsi+0x4c>
    2b0e:	66 0f       	add	r22, r22
    2b10:	77 1f       	adc	r23, r23
    2b12:	88 1f       	adc	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	1a f0       	brmi	.+6      	; 0x2b1e <__fixunssfsi+0x24>
    2b18:	ba 95       	dec	r27
    2b1a:	c9 f7       	brne	.-14     	; 0x2b0e <__fixunssfsi+0x14>
    2b1c:	14 c0       	rjmp	.+40     	; 0x2b46 <__fixunssfsi+0x4c>
    2b1e:	b1 30       	cpi	r27, 0x01	; 1
    2b20:	91 f0       	breq	.+36     	; 0x2b46 <__fixunssfsi+0x4c>
    2b22:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__fp_zero>
    2b26:	b1 e0       	ldi	r27, 0x01	; 1
    2b28:	08 95       	ret
    2b2a:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__fp_zero>
    2b2e:	67 2f       	mov	r22, r23
    2b30:	78 2f       	mov	r23, r24
    2b32:	88 27       	eor	r24, r24
    2b34:	b8 5f       	subi	r27, 0xF8	; 248
    2b36:	39 f0       	breq	.+14     	; 0x2b46 <__fixunssfsi+0x4c>
    2b38:	b9 3f       	cpi	r27, 0xF9	; 249
    2b3a:	cc f3       	brlt	.-14     	; 0x2b2e <__fixunssfsi+0x34>
    2b3c:	86 95       	lsr	r24
    2b3e:	77 95       	ror	r23
    2b40:	67 95       	ror	r22
    2b42:	b3 95       	inc	r27
    2b44:	d9 f7       	brne	.-10     	; 0x2b3c <__fixunssfsi+0x42>
    2b46:	3e f4       	brtc	.+14     	; 0x2b56 <__fixunssfsi+0x5c>
    2b48:	90 95       	com	r25
    2b4a:	80 95       	com	r24
    2b4c:	70 95       	com	r23
    2b4e:	61 95       	neg	r22
    2b50:	7f 4f       	sbci	r23, 0xFF	; 255
    2b52:	8f 4f       	sbci	r24, 0xFF	; 255
    2b54:	9f 4f       	sbci	r25, 0xFF	; 255
    2b56:	08 95       	ret

00002b58 <__floatunsisf>:
    2b58:	e8 94       	clt
    2b5a:	09 c0       	rjmp	.+18     	; 0x2b6e <__floatsisf+0x12>

00002b5c <__floatsisf>:
    2b5c:	97 fb       	bst	r25, 7
    2b5e:	3e f4       	brtc	.+14     	; 0x2b6e <__floatsisf+0x12>
    2b60:	90 95       	com	r25
    2b62:	80 95       	com	r24
    2b64:	70 95       	com	r23
    2b66:	61 95       	neg	r22
    2b68:	7f 4f       	sbci	r23, 0xFF	; 255
    2b6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6e:	99 23       	and	r25, r25
    2b70:	a9 f0       	breq	.+42     	; 0x2b9c <__floatsisf+0x40>
    2b72:	f9 2f       	mov	r31, r25
    2b74:	96 e9       	ldi	r25, 0x96	; 150
    2b76:	bb 27       	eor	r27, r27
    2b78:	93 95       	inc	r25
    2b7a:	f6 95       	lsr	r31
    2b7c:	87 95       	ror	r24
    2b7e:	77 95       	ror	r23
    2b80:	67 95       	ror	r22
    2b82:	b7 95       	ror	r27
    2b84:	f1 11       	cpse	r31, r1
    2b86:	f8 cf       	rjmp	.-16     	; 0x2b78 <__floatsisf+0x1c>
    2b88:	fa f4       	brpl	.+62     	; 0x2bc8 <__floatsisf+0x6c>
    2b8a:	bb 0f       	add	r27, r27
    2b8c:	11 f4       	brne	.+4      	; 0x2b92 <__floatsisf+0x36>
    2b8e:	60 ff       	sbrs	r22, 0
    2b90:	1b c0       	rjmp	.+54     	; 0x2bc8 <__floatsisf+0x6c>
    2b92:	6f 5f       	subi	r22, 0xFF	; 255
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	16 c0       	rjmp	.+44     	; 0x2bc8 <__floatsisf+0x6c>
    2b9c:	88 23       	and	r24, r24
    2b9e:	11 f0       	breq	.+4      	; 0x2ba4 <__floatsisf+0x48>
    2ba0:	96 e9       	ldi	r25, 0x96	; 150
    2ba2:	11 c0       	rjmp	.+34     	; 0x2bc6 <__floatsisf+0x6a>
    2ba4:	77 23       	and	r23, r23
    2ba6:	21 f0       	breq	.+8      	; 0x2bb0 <__floatsisf+0x54>
    2ba8:	9e e8       	ldi	r25, 0x8E	; 142
    2baa:	87 2f       	mov	r24, r23
    2bac:	76 2f       	mov	r23, r22
    2bae:	05 c0       	rjmp	.+10     	; 0x2bba <__floatsisf+0x5e>
    2bb0:	66 23       	and	r22, r22
    2bb2:	71 f0       	breq	.+28     	; 0x2bd0 <__floatsisf+0x74>
    2bb4:	96 e8       	ldi	r25, 0x86	; 134
    2bb6:	86 2f       	mov	r24, r22
    2bb8:	70 e0       	ldi	r23, 0x00	; 0
    2bba:	60 e0       	ldi	r22, 0x00	; 0
    2bbc:	2a f0       	brmi	.+10     	; 0x2bc8 <__floatsisf+0x6c>
    2bbe:	9a 95       	dec	r25
    2bc0:	66 0f       	add	r22, r22
    2bc2:	77 1f       	adc	r23, r23
    2bc4:	88 1f       	adc	r24, r24
    2bc6:	da f7       	brpl	.-10     	; 0x2bbe <__floatsisf+0x62>
    2bc8:	88 0f       	add	r24, r24
    2bca:	96 95       	lsr	r25
    2bcc:	87 95       	ror	r24
    2bce:	97 f9       	bld	r25, 7
    2bd0:	08 95       	ret

00002bd2 <__fp_inf>:
    2bd2:	97 f9       	bld	r25, 7
    2bd4:	9f 67       	ori	r25, 0x7F	; 127
    2bd6:	80 e8       	ldi	r24, 0x80	; 128
    2bd8:	70 e0       	ldi	r23, 0x00	; 0
    2bda:	60 e0       	ldi	r22, 0x00	; 0
    2bdc:	08 95       	ret

00002bde <__fp_nan>:
    2bde:	9f ef       	ldi	r25, 0xFF	; 255
    2be0:	80 ec       	ldi	r24, 0xC0	; 192
    2be2:	08 95       	ret

00002be4 <__fp_pscA>:
    2be4:	00 24       	eor	r0, r0
    2be6:	0a 94       	dec	r0
    2be8:	16 16       	cp	r1, r22
    2bea:	17 06       	cpc	r1, r23
    2bec:	18 06       	cpc	r1, r24
    2bee:	09 06       	cpc	r0, r25
    2bf0:	08 95       	ret

00002bf2 <__fp_pscB>:
    2bf2:	00 24       	eor	r0, r0
    2bf4:	0a 94       	dec	r0
    2bf6:	12 16       	cp	r1, r18
    2bf8:	13 06       	cpc	r1, r19
    2bfa:	14 06       	cpc	r1, r20
    2bfc:	05 06       	cpc	r0, r21
    2bfe:	08 95       	ret

00002c00 <__fp_round>:
    2c00:	09 2e       	mov	r0, r25
    2c02:	03 94       	inc	r0
    2c04:	00 0c       	add	r0, r0
    2c06:	11 f4       	brne	.+4      	; 0x2c0c <__fp_round+0xc>
    2c08:	88 23       	and	r24, r24
    2c0a:	52 f0       	brmi	.+20     	; 0x2c20 <__fp_round+0x20>
    2c0c:	bb 0f       	add	r27, r27
    2c0e:	40 f4       	brcc	.+16     	; 0x2c20 <__fp_round+0x20>
    2c10:	bf 2b       	or	r27, r31
    2c12:	11 f4       	brne	.+4      	; 0x2c18 <__fp_round+0x18>
    2c14:	60 ff       	sbrs	r22, 0
    2c16:	04 c0       	rjmp	.+8      	; 0x2c20 <__fp_round+0x20>
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c20:	08 95       	ret

00002c22 <__fp_split3>:
    2c22:	57 fd       	sbrc	r21, 7
    2c24:	90 58       	subi	r25, 0x80	; 128
    2c26:	44 0f       	add	r20, r20
    2c28:	55 1f       	adc	r21, r21
    2c2a:	59 f0       	breq	.+22     	; 0x2c42 <__fp_splitA+0x10>
    2c2c:	5f 3f       	cpi	r21, 0xFF	; 255
    2c2e:	71 f0       	breq	.+28     	; 0x2c4c <__fp_splitA+0x1a>
    2c30:	47 95       	ror	r20

00002c32 <__fp_splitA>:
    2c32:	88 0f       	add	r24, r24
    2c34:	97 fb       	bst	r25, 7
    2c36:	99 1f       	adc	r25, r25
    2c38:	61 f0       	breq	.+24     	; 0x2c52 <__fp_splitA+0x20>
    2c3a:	9f 3f       	cpi	r25, 0xFF	; 255
    2c3c:	79 f0       	breq	.+30     	; 0x2c5c <__fp_splitA+0x2a>
    2c3e:	87 95       	ror	r24
    2c40:	08 95       	ret
    2c42:	12 16       	cp	r1, r18
    2c44:	13 06       	cpc	r1, r19
    2c46:	14 06       	cpc	r1, r20
    2c48:	55 1f       	adc	r21, r21
    2c4a:	f2 cf       	rjmp	.-28     	; 0x2c30 <__fp_split3+0xe>
    2c4c:	46 95       	lsr	r20
    2c4e:	f1 df       	rcall	.-30     	; 0x2c32 <__fp_splitA>
    2c50:	08 c0       	rjmp	.+16     	; 0x2c62 <__fp_splitA+0x30>
    2c52:	16 16       	cp	r1, r22
    2c54:	17 06       	cpc	r1, r23
    2c56:	18 06       	cpc	r1, r24
    2c58:	99 1f       	adc	r25, r25
    2c5a:	f1 cf       	rjmp	.-30     	; 0x2c3e <__fp_splitA+0xc>
    2c5c:	86 95       	lsr	r24
    2c5e:	71 05       	cpc	r23, r1
    2c60:	61 05       	cpc	r22, r1
    2c62:	08 94       	sec
    2c64:	08 95       	ret

00002c66 <__fp_zero>:
    2c66:	e8 94       	clt

00002c68 <__fp_szero>:
    2c68:	bb 27       	eor	r27, r27
    2c6a:	66 27       	eor	r22, r22
    2c6c:	77 27       	eor	r23, r23
    2c6e:	cb 01       	movw	r24, r22
    2c70:	97 f9       	bld	r25, 7
    2c72:	08 95       	ret

00002c74 <__mulsf3>:
    2c74:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <__mulsf3x>
    2c78:	0c 94 00 16 	jmp	0x2c00	; 0x2c00 <__fp_round>
    2c7c:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__fp_pscA>
    2c80:	38 f0       	brcs	.+14     	; 0x2c90 <__mulsf3+0x1c>
    2c82:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__fp_pscB>
    2c86:	20 f0       	brcs	.+8      	; 0x2c90 <__mulsf3+0x1c>
    2c88:	95 23       	and	r25, r21
    2c8a:	11 f0       	breq	.+4      	; 0x2c90 <__mulsf3+0x1c>
    2c8c:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__fp_inf>
    2c90:	0c 94 ef 15 	jmp	0x2bde	; 0x2bde <__fp_nan>
    2c94:	11 24       	eor	r1, r1
    2c96:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__fp_szero>

00002c9a <__mulsf3x>:
    2c9a:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__fp_split3>
    2c9e:	70 f3       	brcs	.-36     	; 0x2c7c <__mulsf3+0x8>

00002ca0 <__mulsf3_pse>:
    2ca0:	95 9f       	mul	r25, r21
    2ca2:	c1 f3       	breq	.-16     	; 0x2c94 <__mulsf3+0x20>
    2ca4:	95 0f       	add	r25, r21
    2ca6:	50 e0       	ldi	r21, 0x00	; 0
    2ca8:	55 1f       	adc	r21, r21
    2caa:	62 9f       	mul	r22, r18
    2cac:	f0 01       	movw	r30, r0
    2cae:	72 9f       	mul	r23, r18
    2cb0:	bb 27       	eor	r27, r27
    2cb2:	f0 0d       	add	r31, r0
    2cb4:	b1 1d       	adc	r27, r1
    2cb6:	63 9f       	mul	r22, r19
    2cb8:	aa 27       	eor	r26, r26
    2cba:	f0 0d       	add	r31, r0
    2cbc:	b1 1d       	adc	r27, r1
    2cbe:	aa 1f       	adc	r26, r26
    2cc0:	64 9f       	mul	r22, r20
    2cc2:	66 27       	eor	r22, r22
    2cc4:	b0 0d       	add	r27, r0
    2cc6:	a1 1d       	adc	r26, r1
    2cc8:	66 1f       	adc	r22, r22
    2cca:	82 9f       	mul	r24, r18
    2ccc:	22 27       	eor	r18, r18
    2cce:	b0 0d       	add	r27, r0
    2cd0:	a1 1d       	adc	r26, r1
    2cd2:	62 1f       	adc	r22, r18
    2cd4:	73 9f       	mul	r23, r19
    2cd6:	b0 0d       	add	r27, r0
    2cd8:	a1 1d       	adc	r26, r1
    2cda:	62 1f       	adc	r22, r18
    2cdc:	83 9f       	mul	r24, r19
    2cde:	a0 0d       	add	r26, r0
    2ce0:	61 1d       	adc	r22, r1
    2ce2:	22 1f       	adc	r18, r18
    2ce4:	74 9f       	mul	r23, r20
    2ce6:	33 27       	eor	r19, r19
    2ce8:	a0 0d       	add	r26, r0
    2cea:	61 1d       	adc	r22, r1
    2cec:	23 1f       	adc	r18, r19
    2cee:	84 9f       	mul	r24, r20
    2cf0:	60 0d       	add	r22, r0
    2cf2:	21 1d       	adc	r18, r1
    2cf4:	82 2f       	mov	r24, r18
    2cf6:	76 2f       	mov	r23, r22
    2cf8:	6a 2f       	mov	r22, r26
    2cfa:	11 24       	eor	r1, r1
    2cfc:	9f 57       	subi	r25, 0x7F	; 127
    2cfe:	50 40       	sbci	r21, 0x00	; 0
    2d00:	9a f0       	brmi	.+38     	; 0x2d28 <__mulsf3_pse+0x88>
    2d02:	f1 f0       	breq	.+60     	; 0x2d40 <__mulsf3_pse+0xa0>
    2d04:	88 23       	and	r24, r24
    2d06:	4a f0       	brmi	.+18     	; 0x2d1a <__mulsf3_pse+0x7a>
    2d08:	ee 0f       	add	r30, r30
    2d0a:	ff 1f       	adc	r31, r31
    2d0c:	bb 1f       	adc	r27, r27
    2d0e:	66 1f       	adc	r22, r22
    2d10:	77 1f       	adc	r23, r23
    2d12:	88 1f       	adc	r24, r24
    2d14:	91 50       	subi	r25, 0x01	; 1
    2d16:	50 40       	sbci	r21, 0x00	; 0
    2d18:	a9 f7       	brne	.-22     	; 0x2d04 <__mulsf3_pse+0x64>
    2d1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2d1c:	51 05       	cpc	r21, r1
    2d1e:	80 f0       	brcs	.+32     	; 0x2d40 <__mulsf3_pse+0xa0>
    2d20:	0c 94 e9 15 	jmp	0x2bd2	; 0x2bd2 <__fp_inf>
    2d24:	0c 94 34 16 	jmp	0x2c68	; 0x2c68 <__fp_szero>
    2d28:	5f 3f       	cpi	r21, 0xFF	; 255
    2d2a:	e4 f3       	brlt	.-8      	; 0x2d24 <__mulsf3_pse+0x84>
    2d2c:	98 3e       	cpi	r25, 0xE8	; 232
    2d2e:	d4 f3       	brlt	.-12     	; 0x2d24 <__mulsf3_pse+0x84>
    2d30:	86 95       	lsr	r24
    2d32:	77 95       	ror	r23
    2d34:	67 95       	ror	r22
    2d36:	b7 95       	ror	r27
    2d38:	f7 95       	ror	r31
    2d3a:	e7 95       	ror	r30
    2d3c:	9f 5f       	subi	r25, 0xFF	; 255
    2d3e:	c1 f7       	brne	.-16     	; 0x2d30 <__mulsf3_pse+0x90>
    2d40:	fe 2b       	or	r31, r30
    2d42:	88 0f       	add	r24, r24
    2d44:	91 1d       	adc	r25, r1
    2d46:	96 95       	lsr	r25
    2d48:	87 95       	ror	r24
    2d4a:	97 f9       	bld	r25, 7
    2d4c:	08 95       	ret

00002d4e <__udivmodqi4>:
    2d4e:	99 1b       	sub	r25, r25
    2d50:	79 e0       	ldi	r23, 0x09	; 9
    2d52:	04 c0       	rjmp	.+8      	; 0x2d5c <__udivmodqi4_ep>

00002d54 <__udivmodqi4_loop>:
    2d54:	99 1f       	adc	r25, r25
    2d56:	96 17       	cp	r25, r22
    2d58:	08 f0       	brcs	.+2      	; 0x2d5c <__udivmodqi4_ep>
    2d5a:	96 1b       	sub	r25, r22

00002d5c <__udivmodqi4_ep>:
    2d5c:	88 1f       	adc	r24, r24
    2d5e:	7a 95       	dec	r23
    2d60:	c9 f7       	brne	.-14     	; 0x2d54 <__udivmodqi4_loop>
    2d62:	80 95       	com	r24
    2d64:	08 95       	ret

00002d66 <__udivmodhi4>:
    2d66:	aa 1b       	sub	r26, r26
    2d68:	bb 1b       	sub	r27, r27
    2d6a:	51 e1       	ldi	r21, 0x11	; 17
    2d6c:	07 c0       	rjmp	.+14     	; 0x2d7c <__udivmodhi4_ep>

00002d6e <__udivmodhi4_loop>:
    2d6e:	aa 1f       	adc	r26, r26
    2d70:	bb 1f       	adc	r27, r27
    2d72:	a6 17       	cp	r26, r22
    2d74:	b7 07       	cpc	r27, r23
    2d76:	10 f0       	brcs	.+4      	; 0x2d7c <__udivmodhi4_ep>
    2d78:	a6 1b       	sub	r26, r22
    2d7a:	b7 0b       	sbc	r27, r23

00002d7c <__udivmodhi4_ep>:
    2d7c:	88 1f       	adc	r24, r24
    2d7e:	99 1f       	adc	r25, r25
    2d80:	5a 95       	dec	r21
    2d82:	a9 f7       	brne	.-22     	; 0x2d6e <__udivmodhi4_loop>
    2d84:	80 95       	com	r24
    2d86:	90 95       	com	r25
    2d88:	bc 01       	movw	r22, r24
    2d8a:	cd 01       	movw	r24, r26
    2d8c:	08 95       	ret

00002d8e <__udivmodsi4>:
    2d8e:	a1 e2       	ldi	r26, 0x21	; 33
    2d90:	1a 2e       	mov	r1, r26
    2d92:	aa 1b       	sub	r26, r26
    2d94:	bb 1b       	sub	r27, r27
    2d96:	fd 01       	movw	r30, r26
    2d98:	0d c0       	rjmp	.+26     	; 0x2db4 <__udivmodsi4_ep>

00002d9a <__udivmodsi4_loop>:
    2d9a:	aa 1f       	adc	r26, r26
    2d9c:	bb 1f       	adc	r27, r27
    2d9e:	ee 1f       	adc	r30, r30
    2da0:	ff 1f       	adc	r31, r31
    2da2:	a2 17       	cp	r26, r18
    2da4:	b3 07       	cpc	r27, r19
    2da6:	e4 07       	cpc	r30, r20
    2da8:	f5 07       	cpc	r31, r21
    2daa:	20 f0       	brcs	.+8      	; 0x2db4 <__udivmodsi4_ep>
    2dac:	a2 1b       	sub	r26, r18
    2dae:	b3 0b       	sbc	r27, r19
    2db0:	e4 0b       	sbc	r30, r20
    2db2:	f5 0b       	sbc	r31, r21

00002db4 <__udivmodsi4_ep>:
    2db4:	66 1f       	adc	r22, r22
    2db6:	77 1f       	adc	r23, r23
    2db8:	88 1f       	adc	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	1a 94       	dec	r1
    2dbe:	69 f7       	brne	.-38     	; 0x2d9a <__udivmodsi4_loop>
    2dc0:	60 95       	com	r22
    2dc2:	70 95       	com	r23
    2dc4:	80 95       	com	r24
    2dc6:	90 95       	com	r25
    2dc8:	9b 01       	movw	r18, r22
    2dca:	ac 01       	movw	r20, r24
    2dcc:	bd 01       	movw	r22, r26
    2dce:	cf 01       	movw	r24, r30
    2dd0:	08 95       	ret

00002dd2 <__tablejump2__>:
    2dd2:	ee 0f       	add	r30, r30
    2dd4:	ff 1f       	adc	r31, r31
    2dd6:	05 90       	lpm	r0, Z+
    2dd8:	f4 91       	lpm	r31, Z
    2dda:	e0 2d       	mov	r30, r0
    2ddc:	09 94       	ijmp

00002dde <memcpy>:
    2dde:	fb 01       	movw	r30, r22
    2de0:	dc 01       	movw	r26, r24
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <memcpy+0xa>
    2de4:	01 90       	ld	r0, Z+
    2de6:	0d 92       	st	X+, r0
    2de8:	41 50       	subi	r20, 0x01	; 1
    2dea:	50 40       	sbci	r21, 0x00	; 0
    2dec:	d8 f7       	brcc	.-10     	; 0x2de4 <memcpy+0x6>
    2dee:	08 95       	ret

00002df0 <_exit>:
    2df0:	f8 94       	cli

00002df2 <__stop_program>:
    2df2:	ff cf       	rjmp	.-2      	; 0x2df2 <__stop_program>
